
stm32bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080059d0  080059d0  000069d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a44  08005a44  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  08005a44  08005a44  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a44  08005a44  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a44  08005a44  00006a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a48  08005a48  00006a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005a4c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c18  20000060  08005aac  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c78  08005aac  00007c78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015881  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003559  00000000  00000000  0001c90a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0001fe68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea4  00000000  00000000  00021158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000034f1  00000000  00000000  00021ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c2c  00000000  00000000  000254ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096f32  00000000  00000000  0003b119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d204b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e4  00000000  00000000  000d2090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d7274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080059b8 	.word	0x080059b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080059b8 	.word	0x080059b8

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t convComplete = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == hadc1.Instance) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b29      	ldr	r3, [pc, #164]	@ (80006c0 <HAL_ADC_ConvCpltCallback+0xb4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	429a      	cmp	r2, r3
 800061e:	d14a      	bne.n	80006b6 <HAL_ADC_ConvCpltCallback+0xaa>
        for (int i = 0; i < ADC_N_CHANNEL; ++i) {
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	e044      	b.n	80006b0 <HAL_ADC_ConvCpltCallback+0xa4>
        	lux = adc_buffer[0];
 8000626:	4b27      	ldr	r3, [pc, #156]	@ (80006c4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fe46 	bl	80002bc <__aeabi_ui2f>
 8000630:	4603      	mov	r3, r0
 8000632:	4a25      	ldr	r2, [pc, #148]	@ (80006c8 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000634:	6013      	str	r3, [r2, #0]
        	pot = adc_buffer[1];
 8000636:	4b23      	ldr	r3, [pc, #140]	@ (80006c4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fe3e 	bl	80002bc <__aeabi_ui2f>
 8000640:	4603      	mov	r3, r0
 8000642:	4a22      	ldr	r2, [pc, #136]	@ (80006cc <HAL_ADC_ConvCpltCallback+0xc0>)
 8000644:	6013      	str	r3, [r2, #0]
            float pref_sample = volts[i] / 1000.f;
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800064e:	4921      	ldr	r1, [pc, #132]	@ (80006d4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff3f 	bl	80004d4 <__aeabi_fdiv>
 8000656:	4603      	mov	r3, r0
 8000658:	613b      	str	r3, [r7, #16]
            float sample = (float)adc_buffer[i] * VREF / (float)(1 << 12) / 1000.f;
 800065a:	4a1a      	ldr	r2, [pc, #104]	@ (80006c4 <HAL_ADC_ConvCpltCallback+0xb8>)
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fe2a 	bl	80002bc <__aeabi_ui2f>
 8000668:	4603      	mov	r3, r0
 800066a:	491b      	ldr	r1, [pc, #108]	@ (80006d8 <HAL_ADC_ConvCpltCallback+0xcc>)
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fe7d 	bl	800036c <__aeabi_fmul>
 8000672:	4603      	mov	r3, r0
 8000674:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff2b 	bl	80004d4 <__aeabi_fdiv>
 800067e:	4603      	mov	r3, r0
 8000680:	4914      	ldr	r1, [pc, #80]	@ (80006d4 <HAL_ADC_ConvCpltCallback+0xc8>)
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff26 	bl	80004d4 <__aeabi_fdiv>
 8000688:	4603      	mov	r3, r0
 800068a:	60fb      	str	r3, [r7, #12]
            volts[i] = pref_sample * 999.f + sample;
 800068c:	4913      	ldr	r1, [pc, #76]	@ (80006dc <HAL_ADC_ConvCpltCallback+0xd0>)
 800068e:	6938      	ldr	r0, [r7, #16]
 8000690:	f7ff fe6c 	bl	800036c <__aeabi_fmul>
 8000694:	4603      	mov	r3, r0
 8000696:	68f9      	ldr	r1, [r7, #12]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fd5f 	bl	800015c <__addsf3>
 800069e:	4603      	mov	r3, r0
 80006a0:	4619      	mov	r1, r3
 80006a2:	4a0b      	ldr	r2, [pc, #44]	@ (80006d0 <HAL_ADC_ConvCpltCallback+0xc4>)
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < ADC_N_CHANNEL; ++i) {
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3301      	adds	r3, #1
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	ddb7      	ble.n	8000626 <HAL_ADC_ConvCpltCallback+0x1a>
//            pot = volts[1];
//            current = (volts[i]-VREF/2)/GAIN/RSHUNT;
//            convComplete = 1;
        }
    }
}
 80006b6:	bf00      	nop
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000007c 	.word	0x2000007c
 80006c4:	20000104 	.word	0x20000104
 80006c8:	200000f4 	.word	0x200000f4
 80006cc:	200000f8 	.word	0x200000f8
 80006d0:	200000fc 	.word	0x200000fc
 80006d4:	447a0000 	.word	0x447a0000
 80006d8:	40533333 	.word	0x40533333
 80006dc:	4479c000 	.word	0x4479c000

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f000 faee 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f81a 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 f8e0 	bl	80008b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006f0:	f000 f8c0 	bl	8000874 <MX_DMA_Init>
  MX_ADC1_Init();
 80006f4:	f000 f870 	bl	80007d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006f8:	f002 fb3e 	bl	8002d78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006fc:	4a05      	ldr	r2, [pc, #20]	@ (8000714 <main+0x34>)
 80006fe:	2100      	movs	r1, #0
 8000700:	4805      	ldr	r0, [pc, #20]	@ (8000718 <main+0x38>)
 8000702:	f002 fb9f 	bl	8002e44 <osThreadNew>
 8000706:	4603      	mov	r3, r0
 8000708:	4a04      	ldr	r2, [pc, #16]	@ (800071c <main+0x3c>)
 800070a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800070c:	f002 fb66 	bl	8002ddc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <main+0x30>
 8000714:	080059f4 	.word	0x080059f4
 8000718:	08000949 	.word	0x08000949
 800071c:	200000f0 	.word	0x200000f0

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800072a:	2228      	movs	r2, #40	@ 0x28
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f005 f85c 	bl	80057ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000750:	2301      	movs	r3, #1
 8000752:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075e:	2301      	movs	r3, #1
 8000760:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000766:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800076a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800076c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000770:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fbd2 	bl	8001f20 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000782:	f000 f90f 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000796:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2102      	movs	r1, #2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fe3e 	bl	8002424 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80007ae:	f000 f8f9 	bl	80009a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007b2:	2302      	movs	r3, #2
 80007b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80007b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007ba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 ffda 	bl	8002778 <HAL_RCCEx_PeriphCLKConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007ca:	f000 f8eb 	bl	80009a4 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3750      	adds	r7, #80	@ 0x50
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e8:	4b20      	ldr	r3, [pc, #128]	@ (800086c <MX_ADC1_Init+0x94>)
 80007ea:	4a21      	ldr	r2, [pc, #132]	@ (8000870 <MX_ADC1_Init+0x98>)
 80007ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <MX_ADC1_Init+0x94>)
 80007f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_ADC1_Init+0x94>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_ADC1_Init+0x94>)
 80007fe:	2200      	movs	r2, #0
 8000800:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_ADC1_Init+0x94>)
 8000804:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000808:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_ADC1_Init+0x94>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000810:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_ADC1_Init+0x94>)
 8000812:	2202      	movs	r2, #2
 8000814:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000816:	4815      	ldr	r0, [pc, #84]	@ (800086c <MX_ADC1_Init+0x94>)
 8000818:	f000 fa86 	bl	8000d28 <HAL_ADC_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000822:	f000 f8bf 	bl	80009a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800082a:	2301      	movs	r3, #1
 800082c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800082e:	2307      	movs	r3, #7
 8000830:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	480d      	ldr	r0, [pc, #52]	@ (800086c <MX_ADC1_Init+0x94>)
 8000838:	f000 fd06 	bl	8001248 <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000842:	f000 f8af 	bl	80009a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000846:	2301      	movs	r3, #1
 8000848:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800084a:	2302      	movs	r3, #2
 800084c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	@ (800086c <MX_ADC1_Init+0x94>)
 8000854:	f000 fcf8 	bl	8001248 <HAL_ADC_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800085e:	f000 f8a1 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000007c 	.word	0x2000007c
 8000870:	40012400 	.word	0x40012400

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_DMA_Init+0x38>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	4a0b      	ldr	r2, [pc, #44]	@ (80008ac <MX_DMA_Init+0x38>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6153      	str	r3, [r2, #20]
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_DMA_Init+0x38>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2105      	movs	r1, #5
 8000896:	200b      	movs	r0, #11
 8000898:	f000 ff8d 	bl	80017b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800089c:	200b      	movs	r0, #11
 800089e:	f000 ffa6 	bl	80017ee <HAL_NVIC_EnableIRQ>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <MX_GPIO_Init+0x90>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000940 <MX_GPIO_Init+0x90>)
 80008ca:	f043 0310 	orr.w	r3, r3, #16
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <MX_GPIO_Init+0x90>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0310 	and.w	r3, r3, #16
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008dc:	4b18      	ldr	r3, [pc, #96]	@ (8000940 <MX_GPIO_Init+0x90>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a17      	ldr	r2, [pc, #92]	@ (8000940 <MX_GPIO_Init+0x90>)
 80008e2:	f043 0320 	orr.w	r3, r3, #32
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <MX_GPIO_Init+0x90>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0320 	and.w	r3, r3, #32
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_GPIO_Init+0x90>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a11      	ldr	r2, [pc, #68]	@ (8000940 <MX_GPIO_Init+0x90>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_GPIO_Init+0x90>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000912:	480c      	ldr	r0, [pc, #48]	@ (8000944 <MX_GPIO_Init+0x94>)
 8000914:	f001 faec 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000918:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	4619      	mov	r1, r3
 8000930:	4804      	ldr	r0, [pc, #16]	@ (8000944 <MX_GPIO_Init+0x94>)
 8000932:	f001 f959 	bl	8001be8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000
 8000944:	40011000 	.word	0x40011000

08000948 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_N_CHANNEL);
 8000950:	2202      	movs	r2, #2
 8000952:	4909      	ldr	r1, [pc, #36]	@ (8000978 <StartDefaultTask+0x30>)
 8000954:	4809      	ldr	r0, [pc, #36]	@ (800097c <StartDefaultTask+0x34>)
 8000956:	f000 fabf 	bl	8000ed8 <HAL_ADC_Start_DMA>
	 __HAL_DMA_DISABLE_IT(hadc1.DMA_Handle, DMA_IT_HT); // disable half complete
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <StartDefaultTask+0x34>)
 800095c:	6a1b      	ldr	r3, [r3, #32]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <StartDefaultTask+0x34>)
 8000964:	6a1b      	ldr	r3, [r3, #32]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f022 0204 	bic.w	r2, r2, #4
 800096c:	601a      	str	r2, [r3, #0]
//	  for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++)
//	  {
//
//	  }

    osDelay(1);
 800096e:	2001      	movs	r0, #1
 8000970:	f002 fb12 	bl	8002f98 <osDelay>
 8000974:	e7fb      	b.n	800096e <StartDefaultTask+0x26>
 8000976:	bf00      	nop
 8000978:	20000104 	.word	0x20000104
 800097c:	2000007c 	.word	0x2000007c

08000980 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d101      	bne.n	8000996 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000992:	f000 f9ad 	bl	8000cf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40000800 	.word	0x40000800

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <Error_Handler+0x8>

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009b6:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <HAL_MspInit+0x68>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	4a17      	ldr	r2, [pc, #92]	@ (8000a18 <HAL_MspInit+0x68>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6193      	str	r3, [r2, #24]
 80009c2:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <HAL_MspInit+0x68>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_MspInit+0x68>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4a11      	ldr	r2, [pc, #68]	@ (8000a18 <HAL_MspInit+0x68>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <HAL_MspInit+0x68>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	210f      	movs	r1, #15
 80009ea:	f06f 0001 	mvn.w	r0, #1
 80009ee:	f000 fee2 	bl	80017b6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009f2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <HAL_MspInit+0x6c>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <HAL_MspInit+0x6c>)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010000 	.word	0x40010000

08000a20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8000aec <HAL_ADC_MspInit+0xcc>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d151      	bne.n	8000ae4 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a40:	4b2b      	ldr	r3, [pc, #172]	@ (8000af0 <HAL_ADC_MspInit+0xd0>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a2a      	ldr	r2, [pc, #168]	@ (8000af0 <HAL_ADC_MspInit+0xd0>)
 8000a46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b28      	ldr	r3, [pc, #160]	@ (8000af0 <HAL_ADC_MspInit+0xd0>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	4b25      	ldr	r3, [pc, #148]	@ (8000af0 <HAL_ADC_MspInit+0xd0>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a24      	ldr	r2, [pc, #144]	@ (8000af0 <HAL_ADC_MspInit+0xd0>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b22      	ldr	r3, [pc, #136]	@ (8000af0 <HAL_ADC_MspInit+0xd0>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0304 	and.w	r3, r3, #4
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a70:	2303      	movs	r3, #3
 8000a72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a74:	2303      	movs	r3, #3
 8000a76:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481d      	ldr	r0, [pc, #116]	@ (8000af4 <HAL_ADC_MspInit+0xd4>)
 8000a80:	f001 f8b2 	bl	8001be8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000a86:	4a1d      	ldr	r2, [pc, #116]	@ (8000afc <HAL_ADC_MspInit+0xdc>)
 8000a88:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000a98:	2280      	movs	r2, #128	@ 0x80
 8000a9a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aa2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000aa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000aaa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000aae:	2220      	movs	r2, #32
 8000ab0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ab8:	480f      	ldr	r0, [pc, #60]	@ (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000aba:	f000 fea7 	bl	800180c <HAL_DMA_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ac4:	f7ff ff6e 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a0b      	ldr	r2, [pc, #44]	@ (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000acc:	621a      	str	r2, [r3, #32]
 8000ace:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2105      	movs	r1, #5
 8000ad8:	2012      	movs	r0, #18
 8000ada:	f000 fe6c 	bl	80017b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ade:	2012      	movs	r0, #18
 8000ae0:	f000 fe85 	bl	80017ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40012400 	.word	0x40012400
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40010800 	.word	0x40010800
 8000af8:	200000ac 	.word	0x200000ac
 8000afc:	40020008 	.word	0x40020008

08000b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	@ 0x38
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000b16:	4b34      	ldr	r3, [pc, #208]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a33      	ldr	r2, [pc, #204]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b31      	ldr	r3, [pc, #196]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b2e:	f107 0210 	add.w	r2, r7, #16
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fdcf 	bl	80026dc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b3e:	6a3b      	ldr	r3, [r7, #32]
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d103      	bne.n	8000b50 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b48:	f001 fdb4 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8000b4c:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b4e:	e004      	b.n	8000b5a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b50:	f001 fdb0 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8000b54:	4603      	mov	r3, r0
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b5c:	4a23      	ldr	r2, [pc, #140]	@ (8000bec <HAL_InitTick+0xec>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9b      	lsrs	r3, r3, #18
 8000b64:	3b01      	subs	r3, #1
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000b68:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b6a:	4a22      	ldr	r2, [pc, #136]	@ (8000bf4 <HAL_InitTick+0xf4>)
 8000b6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b74:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000b76:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b7a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000b8e:	4818      	ldr	r0, [pc, #96]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b90:	f001 fea8 	bl	80028e4 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b9a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d11b      	bne.n	8000bda <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000ba2:	4813      	ldr	r0, [pc, #76]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000ba4:	f001 fef6 	bl	8002994 <HAL_TIM_Base_Start_IT>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d111      	bne.n	8000bda <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000bb6:	201e      	movs	r0, #30
 8000bb8:	f000 fe19 	bl	80017ee <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d808      	bhi.n	8000bd4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	201e      	movs	r0, #30
 8000bc8:	f000 fdf5 	bl	80017b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <HAL_InitTick+0xf8>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	e002      	b.n	8000bda <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bda:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3738      	adds	r7, #56	@ 0x38
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000
 8000bec:	431bde83 	.word	0x431bde83
 8000bf0:	2000010c 	.word	0x2000010c
 8000bf4:	40000800 	.word	0x40000800
 8000bf8:	20000004 	.word	0x20000004

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <NMI_Handler+0x4>

08000c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <MemManage_Handler+0x4>

08000c14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c34:	4802      	ldr	r0, [pc, #8]	@ (8000c40 <DMA1_Channel1_IRQHandler+0x10>)
 8000c36:	f000 fea3 	bl	8001980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000ac 	.word	0x200000ac

08000c44 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <ADC1_2_IRQHandler+0x10>)
 8000c4a:	f000 fa23 	bl	8001094 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000007c 	.word	0x2000007c

08000c58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <TIM4_IRQHandler+0x10>)
 8000c5e:	f001 feeb 	bl	8002a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000010c 	.word	0x2000010c

08000c6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c78:	f7ff fff8 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480b      	ldr	r0, [pc, #44]	@ (8000cac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c7e:	490c      	ldr	r1, [pc, #48]	@ (8000cb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c80:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a09      	ldr	r2, [pc, #36]	@ (8000cb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c94:	4c09      	ldr	r4, [pc, #36]	@ (8000cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f004 fe01 	bl	80058a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca6:	f7ff fd1b 	bl	80006e0 <main>
  bx lr
 8000caa:	4770      	bx	lr
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000cb4:	08005a4c 	.word	0x08005a4c
  ldr r2, =_sbss
 8000cb8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000cbc:	20001c78 	.word	0x20001c78

08000cc0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <CAN1_RX1_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <HAL_Init+0x28>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <HAL_Init+0x28>)
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 fd63 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	200f      	movs	r0, #15
 8000cdc:	f7ff ff10 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fe66 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40022000 	.word	0x40022000

08000cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <HAL_IncTick+0x1c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <HAL_IncTick+0x20>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a03      	ldr	r2, [pc, #12]	@ (8000d10 <HAL_IncTick+0x20>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000154 	.word	0x20000154

08000d14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b02      	ldr	r3, [pc, #8]	@ (8000d24 <HAL_GetTick+0x10>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	20000154 	.word	0x20000154

08000d28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e0be      	b.n	8000ec8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d109      	bne.n	8000d6c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fe5a 	bl	8000a20 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 fbbd 	bl	80014ec <ADC_ConversionStop_Disable>
 8000d72:	4603      	mov	r3, r0
 8000d74:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8099 	bne.w	8000eb6 <HAL_ADC_Init+0x18e>
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f040 8095 	bne.w	8000eb6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d90:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d94:	f023 0302 	bic.w	r3, r3, #2
 8000d98:	f043 0202 	orr.w	r2, r3, #2
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000da8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	7b1b      	ldrb	r3, [r3, #12]
 8000dae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000db0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000dc0:	d003      	beq.n	8000dca <HAL_ADC_Init+0xa2>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d102      	bne.n	8000dd0 <HAL_ADC_Init+0xa8>
 8000dca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dce:	e000      	b.n	8000dd2 <HAL_ADC_Init+0xaa>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7d1b      	ldrb	r3, [r3, #20]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d119      	bne.n	8000e14 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7b1b      	ldrb	r3, [r3, #12]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d109      	bne.n	8000dfc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	035a      	lsls	r2, r3, #13
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	e00b      	b.n	8000e14 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e00:	f043 0220 	orr.w	r2, r3, #32
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0c:	f043 0201 	orr.w	r2, r3, #1
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	4b28      	ldr	r3, [pc, #160]	@ (8000ed0 <HAL_ADC_Init+0x1a8>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	6812      	ldr	r2, [r2, #0]
 8000e36:	68b9      	ldr	r1, [r7, #8]
 8000e38:	430b      	orrs	r3, r1
 8000e3a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e44:	d003      	beq.n	8000e4e <HAL_ADC_Init+0x126>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d104      	bne.n	8000e58 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	051b      	lsls	r3, r3, #20
 8000e56:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e5e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	4b18      	ldr	r3, [pc, #96]	@ (8000ed4 <HAL_ADC_Init+0x1ac>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d10b      	bne.n	8000e94 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e86:	f023 0303 	bic.w	r3, r3, #3
 8000e8a:	f043 0201 	orr.w	r2, r3, #1
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e92:	e018      	b.n	8000ec6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e98:	f023 0312 	bic.w	r3, r3, #18
 8000e9c:	f043 0210 	orr.w	r2, r3, #16
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea8:	f043 0201 	orr.w	r2, r3, #1
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000eb4:	e007      	b.n	8000ec6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eba:	f043 0210 	orr.w	r2, r3, #16
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ed4:	ff1f0efe 	.word	0xff1f0efe

08000ed8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a64      	ldr	r2, [pc, #400]	@ (8001080 <HAL_ADC_Start_DMA+0x1a8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d004      	beq.n	8000efc <HAL_ADC_Start_DMA+0x24>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a63      	ldr	r2, [pc, #396]	@ (8001084 <HAL_ADC_Start_DMA+0x1ac>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d106      	bne.n	8000f0a <HAL_ADC_Start_DMA+0x32>
 8000efc:	4b60      	ldr	r3, [pc, #384]	@ (8001080 <HAL_ADC_Start_DMA+0x1a8>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f040 80b3 	bne.w	8001070 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d101      	bne.n	8000f18 <HAL_ADC_Start_DMA+0x40>
 8000f14:	2302      	movs	r3, #2
 8000f16:	e0ae      	b.n	8001076 <HAL_ADC_Start_DMA+0x19e>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f000 fa89 	bl	8001438 <ADC_Enable>
 8000f26:	4603      	mov	r3, r0
 8000f28:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f2a:	7dfb      	ldrb	r3, [r7, #23]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f040 809a 	bne.w	8001066 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f36:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000f3a:	f023 0301 	bic.w	r3, r3, #1
 8000f3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a4e      	ldr	r2, [pc, #312]	@ (8001084 <HAL_ADC_Start_DMA+0x1ac>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d105      	bne.n	8000f5c <HAL_ADC_Start_DMA+0x84>
 8000f50:	4b4b      	ldr	r3, [pc, #300]	@ (8001080 <HAL_ADC_Start_DMA+0x1a8>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d115      	bne.n	8000f88 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d026      	beq.n	8000fc4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f7a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f7e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f86:	e01d      	b.n	8000fc4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f8c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a39      	ldr	r2, [pc, #228]	@ (8001080 <HAL_ADC_Start_DMA+0x1a8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d004      	beq.n	8000fa8 <HAL_ADC_Start_DMA+0xd0>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a38      	ldr	r2, [pc, #224]	@ (8001084 <HAL_ADC_Start_DMA+0x1ac>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d10d      	bne.n	8000fc4 <HAL_ADC_Start_DMA+0xec>
 8000fa8:	4b35      	ldr	r3, [pc, #212]	@ (8001080 <HAL_ADC_Start_DMA+0x1a8>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d007      	beq.n	8000fc4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fbc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d006      	beq.n	8000fde <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd4:	f023 0206 	bic.w	r2, r3, #6
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fdc:	e002      	b.n	8000fe4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	4a25      	ldr	r2, [pc, #148]	@ (8001088 <HAL_ADC_Start_DMA+0x1b0>)
 8000ff2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	4a24      	ldr	r2, [pc, #144]	@ (800108c <HAL_ADC_Start_DMA+0x1b4>)
 8000ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4a23      	ldr	r2, [pc, #140]	@ (8001090 <HAL_ADC_Start_DMA+0x1b8>)
 8001002:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f06f 0202 	mvn.w	r2, #2
 800100c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800101c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6a18      	ldr	r0, [r3, #32]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	334c      	adds	r3, #76	@ 0x4c
 8001028:	4619      	mov	r1, r3
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f000 fc47 	bl	80018c0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800103c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001040:	d108      	bne.n	8001054 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001050:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001052:	e00f      	b.n	8001074 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001062:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001064:	e006      	b.n	8001074 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800106e:	e001      	b.n	8001074 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001074:	7dfb      	ldrb	r3, [r7, #23]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40012400 	.word	0x40012400
 8001084:	40012800 	.word	0x40012800
 8001088:	0800156f 	.word	0x0800156f
 800108c:	080015eb 	.word	0x080015eb
 8001090:	08001607 	.word	0x08001607

08001094 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f003 0320 	and.w	r3, r3, #32
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d03e      	beq.n	8001134 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d039      	beq.n	8001134 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c4:	f003 0310 	and.w	r3, r3, #16
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d105      	bne.n	80010d8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80010e2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80010e6:	d11d      	bne.n	8001124 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d119      	bne.n	8001124 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0220 	bic.w	r2, r2, #32
 80010fe:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001104:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001110:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d105      	bne.n	8001124 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800111c:	f043 0201 	orr.w	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff fa71 	bl	800060c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f06f 0212 	mvn.w	r2, #18
 8001132:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800113a:	2b00      	cmp	r3, #0
 800113c:	d04d      	beq.n	80011da <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	d048      	beq.n	80011da <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	2b00      	cmp	r3, #0
 8001152:	d105      	bne.n	8001160 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001158:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800116a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800116e:	d012      	beq.n	8001196 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800117a:	2b00      	cmp	r3, #0
 800117c:	d125      	bne.n	80011ca <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001188:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800118c:	d11d      	bne.n	80011ca <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001192:	2b00      	cmp	r3, #0
 8001194:	d119      	bne.n	80011ca <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011a4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c2:	f043 0201 	orr.w	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fa35 	bl	800163a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f06f 020c 	mvn.w	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d012      	beq.n	800120a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00d      	beq.n	800120a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f812 	bl	8001224 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f06f 0201 	mvn.w	r2, #1
 8001208:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x20>
 8001264:	2302      	movs	r3, #2
 8001266:	e0dc      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1da>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b06      	cmp	r3, #6
 8001276:	d81c      	bhi.n	80012b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	3b05      	subs	r3, #5
 800128a:	221f      	movs	r2, #31
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	4019      	ands	r1, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	3b05      	subs	r3, #5
 80012a4:	fa00 f203 	lsl.w	r2, r0, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80012b0:	e03c      	b.n	800132c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b0c      	cmp	r3, #12
 80012b8:	d81c      	bhi.n	80012f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	3b23      	subs	r3, #35	@ 0x23
 80012cc:	221f      	movs	r2, #31
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	4019      	ands	r1, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	3b23      	subs	r3, #35	@ 0x23
 80012e6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80012f2:	e01b      	b.n	800132c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	3b41      	subs	r3, #65	@ 0x41
 8001306:	221f      	movs	r2, #31
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	4019      	ands	r1, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	3b41      	subs	r3, #65	@ 0x41
 8001320:	fa00 f203 	lsl.w	r2, r0, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b09      	cmp	r3, #9
 8001332:	d91c      	bls.n	800136e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68d9      	ldr	r1, [r3, #12]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	3b1e      	subs	r3, #30
 8001346:	2207      	movs	r2, #7
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	4019      	ands	r1, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	6898      	ldr	r0, [r3, #8]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	3b1e      	subs	r3, #30
 8001360:	fa00 f203 	lsl.w	r2, r0, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	e019      	b.n	80013a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6919      	ldr	r1, [r3, #16]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	2207      	movs	r2, #7
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	4019      	ands	r1, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	6898      	ldr	r0, [r3, #8]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	fa00 f203 	lsl.w	r2, r0, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b10      	cmp	r3, #16
 80013a8:	d003      	beq.n	80013b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013ae:	2b11      	cmp	r3, #17
 80013b0:	d132      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a1d      	ldr	r2, [pc, #116]	@ (800142c <HAL_ADC_ConfigChannel+0x1e4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d125      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d126      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80013d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b10      	cmp	r3, #16
 80013e0:	d11a      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013e2:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <HAL_ADC_ConfigChannel+0x1e8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a13      	ldr	r2, [pc, #76]	@ (8001434 <HAL_ADC_ConfigChannel+0x1ec>)
 80013e8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ec:	0c9a      	lsrs	r2, r3, #18
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013f8:	e002      	b.n	8001400 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f9      	bne.n	80013fa <HAL_ADC_ConfigChannel+0x1b2>
 8001406:	e007      	b.n	8001418 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800140c:	f043 0220 	orr.w	r2, r3, #32
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	40012400 	.word	0x40012400
 8001430:	20000000 	.word	0x20000000
 8001434:	431bde83 	.word	0x431bde83

08001438 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b01      	cmp	r3, #1
 8001454:	d040      	beq.n	80014d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 0201 	orr.w	r2, r2, #1
 8001464:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001466:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <ADC_Enable+0xac>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a1f      	ldr	r2, [pc, #124]	@ (80014e8 <ADC_Enable+0xb0>)
 800146c:	fba2 2303 	umull	r2, r3, r2, r3
 8001470:	0c9b      	lsrs	r3, r3, #18
 8001472:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001474:	e002      	b.n	800147c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3b01      	subs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f9      	bne.n	8001476 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001482:	f7ff fc47 	bl	8000d14 <HAL_GetTick>
 8001486:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001488:	e01f      	b.n	80014ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800148a:	f7ff fc43 	bl	8000d14 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d918      	bls.n	80014ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d011      	beq.n	80014ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014aa:	f043 0210 	orr.w	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e007      	b.n	80014da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d1d8      	bne.n	800148a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000000 	.word	0x20000000
 80014e8:	431bde83 	.word	0x431bde83

080014ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b01      	cmp	r3, #1
 8001504:	d12e      	bne.n	8001564 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001516:	f7ff fbfd 	bl	8000d14 <HAL_GetTick>
 800151a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800151c:	e01b      	b.n	8001556 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800151e:	f7ff fbf9 	bl	8000d14 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d914      	bls.n	8001556 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b01      	cmp	r3, #1
 8001538:	d10d      	bne.n	8001556 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153e:	f043 0210 	orr.w	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154a:	f043 0201 	orr.w	r2, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e007      	b.n	8001566 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b01      	cmp	r3, #1
 8001562:	d0dc      	beq.n	800151e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001580:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001584:	2b00      	cmp	r3, #0
 8001586:	d127      	bne.n	80015d8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800159e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015a2:	d115      	bne.n	80015d0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d111      	bne.n	80015d0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d105      	bne.n	80015d0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c8:	f043 0201 	orr.w	r2, r3, #1
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f7ff f81b 	bl	800060c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80015d6:	e004      	b.n	80015e2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	4798      	blx	r3
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7ff fe0a 	bl	8001212 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001612:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001618:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001624:	f043 0204 	orr.w	r2, r3, #4
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7ff fe02 	bl	8001236 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001668:	4013      	ands	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001674:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800167c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167e:	4a04      	ldr	r2, [pc, #16]	@ (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	60d3      	str	r3, [r2, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <__NVIC_GetPriorityGrouping+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0307 	and.w	r3, r3, #7
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0b      	blt.n	80016da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	4906      	ldr	r1, [pc, #24]	@ (80016e4 <__NVIC_EnableIRQ+0x34>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2001      	movs	r0, #1
 80016d2:	fa00 f202 	lsl.w	r2, r0, r2
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100

080016e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	@ (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	@ (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	@ 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
         );
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	@ 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff4f 	bl	800164c <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff64 	bl	8001694 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ffb2 	bl	800173c <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff81 	bl	80016e8 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff57 	bl	80016b0 <__NVIC_EnableIRQ>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e043      	b.n	80018aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <HAL_DMA_Init+0xa8>)
 800182a:	4413      	add	r3, r2
 800182c:	4a22      	ldr	r2, [pc, #136]	@ (80018b8 <HAL_DMA_Init+0xac>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	009a      	lsls	r2, r3, #2
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a1f      	ldr	r2, [pc, #124]	@ (80018bc <HAL_DMA_Init+0xb0>)
 800183e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2202      	movs	r2, #2
 8001844:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001856:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800185a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	bffdfff8 	.word	0xbffdfff8
 80018b8:	cccccccd 	.word	0xcccccccd
 80018bc:	40020000 	.word	0x40020000

080018c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_DMA_Start_IT+0x20>
 80018dc:	2302      	movs	r3, #2
 80018de:	e04b      	b.n	8001978 <HAL_DMA_Start_IT+0xb8>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d13a      	bne.n	800196a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0201 	bic.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	68b9      	ldr	r1, [r7, #8]
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 f937 	bl	8001b8c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001922:	2b00      	cmp	r3, #0
 8001924:	d008      	beq.n	8001938 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 020e 	orr.w	r2, r2, #14
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e00f      	b.n	8001958 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0204 	bic.w	r2, r2, #4
 8001946:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 020a 	orr.w	r2, r2, #10
 8001956:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e005      	b.n	8001976 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001972:	2302      	movs	r3, #2
 8001974:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001976:	7dfb      	ldrb	r3, [r7, #23]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	2204      	movs	r2, #4
 800199e:	409a      	lsls	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d04f      	beq.n	8001a48 <HAL_DMA_IRQHandler+0xc8>
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d04a      	beq.n	8001a48 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0320 	and.w	r3, r3, #32
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d107      	bne.n	80019d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0204 	bic.w	r2, r2, #4
 80019ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a66      	ldr	r2, [pc, #408]	@ (8001b70 <HAL_DMA_IRQHandler+0x1f0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d029      	beq.n	8001a2e <HAL_DMA_IRQHandler+0xae>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a65      	ldr	r2, [pc, #404]	@ (8001b74 <HAL_DMA_IRQHandler+0x1f4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d022      	beq.n	8001a2a <HAL_DMA_IRQHandler+0xaa>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a63      	ldr	r2, [pc, #396]	@ (8001b78 <HAL_DMA_IRQHandler+0x1f8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d01a      	beq.n	8001a24 <HAL_DMA_IRQHandler+0xa4>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a62      	ldr	r2, [pc, #392]	@ (8001b7c <HAL_DMA_IRQHandler+0x1fc>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d012      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x9e>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a60      	ldr	r2, [pc, #384]	@ (8001b80 <HAL_DMA_IRQHandler+0x200>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00a      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x98>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a5f      	ldr	r2, [pc, #380]	@ (8001b84 <HAL_DMA_IRQHandler+0x204>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d102      	bne.n	8001a12 <HAL_DMA_IRQHandler+0x92>
 8001a0c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a10:	e00e      	b.n	8001a30 <HAL_DMA_IRQHandler+0xb0>
 8001a12:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001a16:	e00b      	b.n	8001a30 <HAL_DMA_IRQHandler+0xb0>
 8001a18:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001a1c:	e008      	b.n	8001a30 <HAL_DMA_IRQHandler+0xb0>
 8001a1e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a22:	e005      	b.n	8001a30 <HAL_DMA_IRQHandler+0xb0>
 8001a24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a28:	e002      	b.n	8001a30 <HAL_DMA_IRQHandler+0xb0>
 8001a2a:	2340      	movs	r3, #64	@ 0x40
 8001a2c:	e000      	b.n	8001a30 <HAL_DMA_IRQHandler+0xb0>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	4a55      	ldr	r2, [pc, #340]	@ (8001b88 <HAL_DMA_IRQHandler+0x208>)
 8001a32:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 8094 	beq.w	8001b66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a46:	e08e      	b.n	8001b66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d056      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x186>
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d051      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10b      	bne.n	8001a88 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 020a 	bic.w	r2, r2, #10
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a38      	ldr	r2, [pc, #224]	@ (8001b70 <HAL_DMA_IRQHandler+0x1f0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d029      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x166>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a37      	ldr	r2, [pc, #220]	@ (8001b74 <HAL_DMA_IRQHandler+0x1f4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d022      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x162>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a35      	ldr	r2, [pc, #212]	@ (8001b78 <HAL_DMA_IRQHandler+0x1f8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d01a      	beq.n	8001adc <HAL_DMA_IRQHandler+0x15c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a34      	ldr	r2, [pc, #208]	@ (8001b7c <HAL_DMA_IRQHandler+0x1fc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d012      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x156>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a32      	ldr	r2, [pc, #200]	@ (8001b80 <HAL_DMA_IRQHandler+0x200>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00a      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x150>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a31      	ldr	r2, [pc, #196]	@ (8001b84 <HAL_DMA_IRQHandler+0x204>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d102      	bne.n	8001aca <HAL_DMA_IRQHandler+0x14a>
 8001ac4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ac8:	e00e      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x168>
 8001aca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ace:	e00b      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x168>
 8001ad0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ad4:	e008      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x168>
 8001ad6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ada:	e005      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x168>
 8001adc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae0:	e002      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x168>
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	e000      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x168>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	4a27      	ldr	r2, [pc, #156]	@ (8001b88 <HAL_DMA_IRQHandler+0x208>)
 8001aea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d034      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b04:	e02f      	b.n	8001b66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d028      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x1e8>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d023      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 020e 	bic.w	r2, r2, #14
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d004      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	4798      	blx	r3
    }
  }
  return;
 8001b66:	bf00      	nop
 8001b68:	bf00      	nop
}
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40020008 	.word	0x40020008
 8001b74:	4002001c 	.word	0x4002001c
 8001b78:	40020030 	.word	0x40020030
 8001b7c:	40020044 	.word	0x40020044
 8001b80:	40020058 	.word	0x40020058
 8001b84:	4002006c 	.word	0x4002006c
 8001b88:	40020000 	.word	0x40020000

08001b8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b10      	cmp	r3, #16
 8001bb8:	d108      	bne.n	8001bcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bca:	e007      	b.n	8001bdc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	60da      	str	r2, [r3, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b08b      	sub	sp, #44	@ 0x2c
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfa:	e169      	b.n	8001ed0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	f040 8158 	bne.w	8001eca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4a9a      	ldr	r2, [pc, #616]	@ (8001e88 <HAL_GPIO_Init+0x2a0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d05e      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c24:	4a98      	ldr	r2, [pc, #608]	@ (8001e88 <HAL_GPIO_Init+0x2a0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d875      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c2a:	4a98      	ldr	r2, [pc, #608]	@ (8001e8c <HAL_GPIO_Init+0x2a4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d058      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c30:	4a96      	ldr	r2, [pc, #600]	@ (8001e8c <HAL_GPIO_Init+0x2a4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d86f      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c36:	4a96      	ldr	r2, [pc, #600]	@ (8001e90 <HAL_GPIO_Init+0x2a8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d052      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c3c:	4a94      	ldr	r2, [pc, #592]	@ (8001e90 <HAL_GPIO_Init+0x2a8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d869      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c42:	4a94      	ldr	r2, [pc, #592]	@ (8001e94 <HAL_GPIO_Init+0x2ac>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d04c      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c48:	4a92      	ldr	r2, [pc, #584]	@ (8001e94 <HAL_GPIO_Init+0x2ac>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d863      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c4e:	4a92      	ldr	r2, [pc, #584]	@ (8001e98 <HAL_GPIO_Init+0x2b0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d046      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
 8001c54:	4a90      	ldr	r2, [pc, #576]	@ (8001e98 <HAL_GPIO_Init+0x2b0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d85d      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c5a:	2b12      	cmp	r3, #18
 8001c5c:	d82a      	bhi.n	8001cb4 <HAL_GPIO_Init+0xcc>
 8001c5e:	2b12      	cmp	r3, #18
 8001c60:	d859      	bhi.n	8001d16 <HAL_GPIO_Init+0x12e>
 8001c62:	a201      	add	r2, pc, #4	@ (adr r2, 8001c68 <HAL_GPIO_Init+0x80>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001ce3 	.word	0x08001ce3
 8001c6c:	08001cbd 	.word	0x08001cbd
 8001c70:	08001ccf 	.word	0x08001ccf
 8001c74:	08001d11 	.word	0x08001d11
 8001c78:	08001d17 	.word	0x08001d17
 8001c7c:	08001d17 	.word	0x08001d17
 8001c80:	08001d17 	.word	0x08001d17
 8001c84:	08001d17 	.word	0x08001d17
 8001c88:	08001d17 	.word	0x08001d17
 8001c8c:	08001d17 	.word	0x08001d17
 8001c90:	08001d17 	.word	0x08001d17
 8001c94:	08001d17 	.word	0x08001d17
 8001c98:	08001d17 	.word	0x08001d17
 8001c9c:	08001d17 	.word	0x08001d17
 8001ca0:	08001d17 	.word	0x08001d17
 8001ca4:	08001d17 	.word	0x08001d17
 8001ca8:	08001d17 	.word	0x08001d17
 8001cac:	08001cc5 	.word	0x08001cc5
 8001cb0:	08001cd9 	.word	0x08001cd9
 8001cb4:	4a79      	ldr	r2, [pc, #484]	@ (8001e9c <HAL_GPIO_Init+0x2b4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cba:	e02c      	b.n	8001d16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	623b      	str	r3, [r7, #32]
          break;
 8001cc2:	e029      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	623b      	str	r3, [r7, #32]
          break;
 8001ccc:	e024      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	3308      	adds	r3, #8
 8001cd4:	623b      	str	r3, [r7, #32]
          break;
 8001cd6:	e01f      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	330c      	adds	r3, #12
 8001cde:	623b      	str	r3, [r7, #32]
          break;
 8001ce0:	e01a      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cea:	2304      	movs	r3, #4
 8001cec:	623b      	str	r3, [r7, #32]
          break;
 8001cee:	e013      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d105      	bne.n	8001d04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	611a      	str	r2, [r3, #16]
          break;
 8001d02:	e009      	b.n	8001d18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d04:	2308      	movs	r3, #8
 8001d06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	615a      	str	r2, [r3, #20]
          break;
 8001d0e:	e003      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
          break;
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x130>
          break;
 8001d16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2bff      	cmp	r3, #255	@ 0xff
 8001d1c:	d801      	bhi.n	8001d22 <HAL_GPIO_Init+0x13a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	e001      	b.n	8001d26 <HAL_GPIO_Init+0x13e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3304      	adds	r3, #4
 8001d26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2bff      	cmp	r3, #255	@ 0xff
 8001d2c:	d802      	bhi.n	8001d34 <HAL_GPIO_Init+0x14c>
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	e002      	b.n	8001d3a <HAL_GPIO_Init+0x152>
 8001d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d36:	3b08      	subs	r3, #8
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	210f      	movs	r1, #15
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	6a39      	ldr	r1, [r7, #32]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	431a      	orrs	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80b1 	beq.w	8001eca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d68:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea0 <HAL_GPIO_Init+0x2b8>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea0 <HAL_GPIO_Init+0x2b8>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea0 <HAL_GPIO_Init+0x2b8>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d80:	4a48      	ldr	r2, [pc, #288]	@ (8001ea4 <HAL_GPIO_Init+0x2bc>)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	220f      	movs	r2, #15
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a40      	ldr	r2, [pc, #256]	@ (8001ea8 <HAL_GPIO_Init+0x2c0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d013      	beq.n	8001dd4 <HAL_GPIO_Init+0x1ec>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a3f      	ldr	r2, [pc, #252]	@ (8001eac <HAL_GPIO_Init+0x2c4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00d      	beq.n	8001dd0 <HAL_GPIO_Init+0x1e8>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a3e      	ldr	r2, [pc, #248]	@ (8001eb0 <HAL_GPIO_Init+0x2c8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d007      	beq.n	8001dcc <HAL_GPIO_Init+0x1e4>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a3d      	ldr	r2, [pc, #244]	@ (8001eb4 <HAL_GPIO_Init+0x2cc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d101      	bne.n	8001dc8 <HAL_GPIO_Init+0x1e0>
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e006      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dc8:	2304      	movs	r3, #4
 8001dca:	e004      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_GPIO_Init+0x1ee>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd8:	f002 0203 	and.w	r2, r2, #3
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	4093      	lsls	r3, r2
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001de6:	492f      	ldr	r1, [pc, #188]	@ (8001ea4 <HAL_GPIO_Init+0x2bc>)
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e00:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	492c      	ldr	r1, [pc, #176]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4928      	ldr	r1, [pc, #160]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e28:	4b23      	ldr	r3, [pc, #140]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	4922      	ldr	r1, [pc, #136]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60cb      	str	r3, [r1, #12]
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e36:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	491e      	ldr	r1, [pc, #120]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e50:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4918      	ldr	r1, [pc, #96]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e5e:	4b16      	ldr	r3, [pc, #88]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	4914      	ldr	r1, [pc, #80]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d021      	beq.n	8001ebc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e78:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	490e      	ldr	r1, [pc, #56]	@ (8001eb8 <HAL_GPIO_Init+0x2d0>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
 8001e84:	e021      	b.n	8001eca <HAL_GPIO_Init+0x2e2>
 8001e86:	bf00      	nop
 8001e88:	10320000 	.word	0x10320000
 8001e8c:	10310000 	.word	0x10310000
 8001e90:	10220000 	.word	0x10220000
 8001e94:	10210000 	.word	0x10210000
 8001e98:	10120000 	.word	0x10120000
 8001e9c:	10110000 	.word	0x10110000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40010800 	.word	0x40010800
 8001eac:	40010c00 	.word	0x40010c00
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	40011400 	.word	0x40011400
 8001eb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <HAL_GPIO_Init+0x304>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	4909      	ldr	r1, [pc, #36]	@ (8001eec <HAL_GPIO_Init+0x304>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	3301      	adds	r3, #1
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f47f ae8e 	bne.w	8001bfc <HAL_GPIO_Init+0x14>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	372c      	adds	r7, #44	@ 0x2c
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f0c:	e003      	b.n	8001f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	041a      	lsls	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	611a      	str	r2, [r3, #16]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e272      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8087 	beq.w	800204e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f40:	4b92      	ldr	r3, [pc, #584]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d00c      	beq.n	8001f66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f4c:	4b8f      	ldr	r3, [pc, #572]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d112      	bne.n	8001f7e <HAL_RCC_OscConfig+0x5e>
 8001f58:	4b8c      	ldr	r3, [pc, #560]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f64:	d10b      	bne.n	8001f7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f66:	4b89      	ldr	r3, [pc, #548]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d06c      	beq.n	800204c <HAL_RCC_OscConfig+0x12c>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d168      	bne.n	800204c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e24c      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x76>
 8001f88:	4b80      	ldr	r3, [pc, #512]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a7f      	ldr	r2, [pc, #508]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	e02e      	b.n	8001ff4 <HAL_RCC_OscConfig+0xd4>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x98>
 8001f9e:	4b7b      	ldr	r3, [pc, #492]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a7a      	ldr	r2, [pc, #488]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b78      	ldr	r3, [pc, #480]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a77      	ldr	r2, [pc, #476]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e01d      	b.n	8001ff4 <HAL_RCC_OscConfig+0xd4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0xbc>
 8001fc2:	4b72      	ldr	r3, [pc, #456]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a71      	ldr	r2, [pc, #452]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b6f      	ldr	r3, [pc, #444]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a6e      	ldr	r2, [pc, #440]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCC_OscConfig+0xd4>
 8001fdc:	4b6b      	ldr	r3, [pc, #428]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a6a      	ldr	r2, [pc, #424]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b68      	ldr	r3, [pc, #416]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a67      	ldr	r2, [pc, #412]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ff2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d013      	beq.n	8002024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fe8a 	bl	8000d14 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002004:	f7fe fe86 	bl	8000d14 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	@ 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e200      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b5d      	ldr	r3, [pc, #372]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0xe4>
 8002022:	e014      	b.n	800204e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7fe fe76 	bl	8000d14 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7fe fe72 	bl	8000d14 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	@ 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1ec      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	4b53      	ldr	r3, [pc, #332]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x10c>
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d063      	beq.n	8002122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800205a:	4b4c      	ldr	r3, [pc, #304]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002066:	4b49      	ldr	r3, [pc, #292]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b08      	cmp	r3, #8
 8002070:	d11c      	bne.n	80020ac <HAL_RCC_OscConfig+0x18c>
 8002072:	4b46      	ldr	r3, [pc, #280]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d116      	bne.n	80020ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	4b43      	ldr	r3, [pc, #268]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_RCC_OscConfig+0x176>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e1c0      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002096:	4b3d      	ldr	r3, [pc, #244]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4939      	ldr	r1, [pc, #228]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020aa:	e03a      	b.n	8002122 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d020      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b4:	4b36      	ldr	r3, [pc, #216]	@ (8002190 <HAL_RCC_OscConfig+0x270>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7fe fe2b 	bl	8000d14 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c2:	f7fe fe27 	bl	8000d14 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e1a1      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d4:	4b2d      	ldr	r3, [pc, #180]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4927      	ldr	r1, [pc, #156]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
 80020f4:	e015      	b.n	8002122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f6:	4b26      	ldr	r3, [pc, #152]	@ (8002190 <HAL_RCC_OscConfig+0x270>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7fe fe0a 	bl	8000d14 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002104:	f7fe fe06 	bl	8000d14 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e180      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002116:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d03a      	beq.n	80021a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d019      	beq.n	800216a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002136:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <HAL_RCC_OscConfig+0x274>)
 8002138:	2201      	movs	r2, #1
 800213a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213c:	f7fe fdea 	bl	8000d14 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002144:	f7fe fde6 	bl	8000d14 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e160      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002156:	4b0d      	ldr	r3, [pc, #52]	@ (800218c <HAL_RCC_OscConfig+0x26c>)
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002162:	2001      	movs	r0, #1
 8002164:	f000 faea 	bl	800273c <RCC_Delay>
 8002168:	e01c      	b.n	80021a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800216a:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <HAL_RCC_OscConfig+0x274>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002170:	f7fe fdd0 	bl	8000d14 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002176:	e00f      	b.n	8002198 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002178:	f7fe fdcc 	bl	8000d14 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d908      	bls.n	8002198 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e146      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	42420000 	.word	0x42420000
 8002194:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002198:	4b92      	ldr	r3, [pc, #584]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1e9      	bne.n	8002178 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80a6 	beq.w	80022fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b6:	4b8b      	ldr	r3, [pc, #556]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10d      	bne.n	80021de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4b88      	ldr	r3, [pc, #544]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4a87      	ldr	r2, [pc, #540]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021cc:	61d3      	str	r3, [r2, #28]
 80021ce:	4b85      	ldr	r3, [pc, #532]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021da:	2301      	movs	r3, #1
 80021dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021de:	4b82      	ldr	r3, [pc, #520]	@ (80023e8 <HAL_RCC_OscConfig+0x4c8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ea:	4b7f      	ldr	r3, [pc, #508]	@ (80023e8 <HAL_RCC_OscConfig+0x4c8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a7e      	ldr	r2, [pc, #504]	@ (80023e8 <HAL_RCC_OscConfig+0x4c8>)
 80021f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f6:	f7fe fd8d 	bl	8000d14 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fe:	f7fe fd89 	bl	8000d14 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b64      	cmp	r3, #100	@ 0x64
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e103      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	4b75      	ldr	r3, [pc, #468]	@ (80023e8 <HAL_RCC_OscConfig+0x4c8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x312>
 8002224:	4b6f      	ldr	r3, [pc, #444]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a6e      	ldr	r2, [pc, #440]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6213      	str	r3, [r2, #32]
 8002230:	e02d      	b.n	800228e <HAL_RCC_OscConfig+0x36e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x334>
 800223a:	4b6a      	ldr	r3, [pc, #424]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a69      	ldr	r2, [pc, #420]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	6213      	str	r3, [r2, #32]
 8002246:	4b67      	ldr	r3, [pc, #412]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a66      	ldr	r2, [pc, #408]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	6213      	str	r3, [r2, #32]
 8002252:	e01c      	b.n	800228e <HAL_RCC_OscConfig+0x36e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b05      	cmp	r3, #5
 800225a:	d10c      	bne.n	8002276 <HAL_RCC_OscConfig+0x356>
 800225c:	4b61      	ldr	r3, [pc, #388]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4a60      	ldr	r2, [pc, #384]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	6213      	str	r3, [r2, #32]
 8002268:	4b5e      	ldr	r3, [pc, #376]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a5d      	ldr	r2, [pc, #372]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	e00b      	b.n	800228e <HAL_RCC_OscConfig+0x36e>
 8002276:	4b5b      	ldr	r3, [pc, #364]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a5a      	ldr	r2, [pc, #360]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	6213      	str	r3, [r2, #32]
 8002282:	4b58      	ldr	r3, [pc, #352]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a57      	ldr	r2, [pc, #348]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d015      	beq.n	80022c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7fe fd3d 	bl	8000d14 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe fd39 	bl	8000d14 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0b1      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	4b4b      	ldr	r3, [pc, #300]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ee      	beq.n	800229e <HAL_RCC_OscConfig+0x37e>
 80022c0:	e014      	b.n	80022ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7fe fd27 	bl	8000d14 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe fd23 	bl	8000d14 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e09b      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e0:	4b40      	ldr	r3, [pc, #256]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1ee      	bne.n	80022ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d105      	bne.n	80022fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f2:	4b3c      	ldr	r3, [pc, #240]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a3b      	ldr	r2, [pc, #236]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8087 	beq.w	8002416 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002308:	4b36      	ldr	r3, [pc, #216]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b08      	cmp	r3, #8
 8002312:	d061      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d146      	bne.n	80023aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231c:	4b33      	ldr	r3, [pc, #204]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7fe fcf7 	bl	8000d14 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232a:	f7fe fcf3 	bl	8000d14 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e06d      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233c:	4b29      	ldr	r3, [pc, #164]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002350:	d108      	bne.n	8002364 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002352:	4b24      	ldr	r3, [pc, #144]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	4921      	ldr	r1, [pc, #132]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002364:	4b1f      	ldr	r3, [pc, #124]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a19      	ldr	r1, [r3, #32]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	430b      	orrs	r3, r1
 8002376:	491b      	ldr	r1, [pc, #108]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800237c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7fe fcc7 	bl	8000d14 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238a:	f7fe fcc3 	bl	8000d14 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e03d      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x46a>
 80023a8:	e035      	b.n	8002416 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <HAL_RCC_OscConfig+0x4cc>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7fe fcb0 	bl	8000d14 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe fcac 	bl	8000d14 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e026      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x498>
 80023d6:	e01e      	b.n	8002416 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e019      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40007000 	.word	0x40007000
 80023ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_OscConfig+0x500>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	429a      	cmp	r2, r3
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000

08002424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0d0      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b6a      	ldr	r3, [pc, #424]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d910      	bls.n	8002468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b67      	ldr	r3, [pc, #412]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 0207 	bic.w	r2, r3, #7
 800244e:	4965      	ldr	r1, [pc, #404]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b63      	ldr	r3, [pc, #396]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0b8      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002480:	4b59      	ldr	r3, [pc, #356]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a58      	ldr	r2, [pc, #352]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800248a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002498:	4b53      	ldr	r3, [pc, #332]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4a52      	ldr	r2, [pc, #328]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b50      	ldr	r3, [pc, #320]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	494d      	ldr	r1, [pc, #308]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d040      	beq.n	8002544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b47      	ldr	r3, [pc, #284]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d115      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e07f      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	4b41      	ldr	r3, [pc, #260]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e073      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	4b3d      	ldr	r3, [pc, #244]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06b      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002502:	4b39      	ldr	r3, [pc, #228]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f023 0203 	bic.w	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4936      	ldr	r1, [pc, #216]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002514:	f7fe fbfe 	bl	8000d14 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7fe fbfa 	bl	8000d14 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e053      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	4b2d      	ldr	r3, [pc, #180]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 020c 	and.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	429a      	cmp	r2, r3
 8002542:	d1eb      	bne.n	800251c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002544:	4b27      	ldr	r3, [pc, #156]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d210      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b24      	ldr	r3, [pc, #144]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 0207 	bic.w	r2, r3, #7
 800255a:	4922      	ldr	r1, [pc, #136]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e032      	b.n	80025da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4916      	ldr	r1, [pc, #88]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800259e:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	490e      	ldr	r1, [pc, #56]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025b2:	f000 f821 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b0b      	ldr	r3, [pc, #44]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	490a      	ldr	r1, [pc, #40]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a09      	ldr	r2, [pc, #36]	@ (80025f0 <HAL_RCC_ClockConfig+0x1cc>)
 80025cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ce:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <HAL_RCC_ClockConfig+0x1d0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fa94 	bl	8000b00 <HAL_InitTick>

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40022000 	.word	0x40022000
 80025e8:	40021000 	.word	0x40021000
 80025ec:	08005a18 	.word	0x08005a18
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002612:	4b1e      	ldr	r3, [pc, #120]	@ (800268c <HAL_RCC_GetSysClockFreq+0x94>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b04      	cmp	r3, #4
 8002620:	d002      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x30>
 8002622:	2b08      	cmp	r3, #8
 8002624:	d003      	beq.n	800262e <HAL_RCC_GetSysClockFreq+0x36>
 8002626:	e027      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002628:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x98>)
 800262a:	613b      	str	r3, [r7, #16]
      break;
 800262c:	e027      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	0c9b      	lsrs	r3, r3, #18
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	4a17      	ldr	r2, [pc, #92]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002638:	5cd3      	ldrb	r3, [r2, r3]
 800263a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d010      	beq.n	8002668 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002646:	4b11      	ldr	r3, [pc, #68]	@ (800268c <HAL_RCC_GetSysClockFreq+0x94>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	0c5b      	lsrs	r3, r3, #17
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	4a11      	ldr	r2, [pc, #68]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002652:	5cd3      	ldrb	r3, [r2, r3]
 8002654:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a0d      	ldr	r2, [pc, #52]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x98>)
 800265a:	fb03 f202 	mul.w	r2, r3, r2
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	fbb2 f3f3 	udiv	r3, r2, r3
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	e004      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a0c      	ldr	r2, [pc, #48]	@ (800269c <HAL_RCC_GetSysClockFreq+0xa4>)
 800266c:	fb02 f303 	mul.w	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	613b      	str	r3, [r7, #16]
      break;
 8002676:	e002      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x98>)
 800267a:	613b      	str	r3, [r7, #16]
      break;
 800267c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267e:	693b      	ldr	r3, [r7, #16]
}
 8002680:	4618      	mov	r0, r3
 8002682:	371c      	adds	r7, #28
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	007a1200 	.word	0x007a1200
 8002694:	08005a30 	.word	0x08005a30
 8002698:	08005a40 	.word	0x08005a40
 800269c:	003d0900 	.word	0x003d0900

080026a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a4:	4b02      	ldr	r3, [pc, #8]	@ (80026b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	20000000 	.word	0x20000000

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026b8:	f7ff fff2 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4903      	ldr	r1, [pc, #12]	@ (80026d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000
 80026d8:	08005a28 	.word	0x08005a28

080026dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	220f      	movs	r2, #15
 80026ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026ec:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <HAL_RCC_GetClockConfig+0x58>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0203 	and.w	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002734 <HAL_RCC_GetClockConfig+0x58>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002704:	4b0b      	ldr	r3, [pc, #44]	@ (8002734 <HAL_RCC_GetClockConfig+0x58>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002710:	4b08      	ldr	r3, [pc, #32]	@ (8002734 <HAL_RCC_GetClockConfig+0x58>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	08db      	lsrs	r3, r3, #3
 8002716:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_RCC_GetClockConfig+0x5c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0207 	and.w	r2, r3, #7
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40021000 	.word	0x40021000
 8002738:	40022000 	.word	0x40022000

0800273c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002744:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <RCC_Delay+0x34>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0a      	ldr	r2, [pc, #40]	@ (8002774 <RCC_Delay+0x38>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0a5b      	lsrs	r3, r3, #9
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002758:	bf00      	nop
  }
  while (Delay --);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1e5a      	subs	r2, r3, #1
 800275e:	60fa      	str	r2, [r7, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f9      	bne.n	8002758 <RCC_Delay+0x1c>
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	20000000 	.word	0x20000000
 8002774:	10624dd3 	.word	0x10624dd3

08002778 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d07d      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002794:	2300      	movs	r3, #0
 8002796:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002798:	4b4f      	ldr	r3, [pc, #316]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10d      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a4:	4b4c      	ldr	r3, [pc, #304]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	4a4b      	ldr	r2, [pc, #300]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	61d3      	str	r3, [r2, #28]
 80027b0:	4b49      	ldr	r3, [pc, #292]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027bc:	2301      	movs	r3, #1
 80027be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	4b46      	ldr	r3, [pc, #280]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d118      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027cc:	4b43      	ldr	r3, [pc, #268]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a42      	ldr	r2, [pc, #264]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d8:	f7fe fa9c 	bl	8000d14 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027de:	e008      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e0:	f7fe fa98 	bl	8000d14 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	@ 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e06d      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f2:	4b3a      	ldr	r3, [pc, #232]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027fe:	4b36      	ldr	r3, [pc, #216]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002806:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d02e      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	429a      	cmp	r2, r3
 800281a:	d027      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800281c:	4b2e      	ldr	r3, [pc, #184]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002824:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002826:	4b2e      	ldr	r3, [pc, #184]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800282c:	4b2c      	ldr	r3, [pc, #176]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002832:	4a29      	ldr	r2, [pc, #164]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d014      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002842:	f7fe fa67 	bl	8000d14 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002848:	e00a      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284a:	f7fe fa63 	bl	8000d14 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002858:	4293      	cmp	r3, r2
 800285a:	d901      	bls.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e036      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002860:	4b1d      	ldr	r3, [pc, #116]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0ee      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800286c:	4b1a      	ldr	r3, [pc, #104]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4917      	ldr	r1, [pc, #92]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287a:	4313      	orrs	r3, r2
 800287c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d105      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002884:	4b14      	ldr	r3, [pc, #80]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	4a13      	ldr	r2, [pc, #76]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800288e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800289c:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	490b      	ldr	r1, [pc, #44]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ba:	4b07      	ldr	r3, [pc, #28]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	4904      	ldr	r1, [pc, #16]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40007000 	.word	0x40007000
 80028e0:	42420440 	.word	0x42420440

080028e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e041      	b.n	800297a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f839 	bl	8002982 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f000 f9b4 	bl	8002c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d001      	beq.n	80029ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e03a      	b.n	8002a22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a18      	ldr	r2, [pc, #96]	@ (8002a2c <HAL_TIM_Base_Start_IT+0x98>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00e      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x58>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d6:	d009      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x58>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a14      	ldr	r2, [pc, #80]	@ (8002a30 <HAL_TIM_Base_Start_IT+0x9c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d004      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x58>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a13      	ldr	r2, [pc, #76]	@ (8002a34 <HAL_TIM_Base_Start_IT+0xa0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d111      	bne.n	8002a10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d010      	beq.n	8002a20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0e:	e007      	b.n	8002a20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	40012c00 	.word	0x40012c00
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800

08002a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d122      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d11b      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0202 	mvn.w	r2, #2
 8002a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f8ed 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 8002a80:	e005      	b.n	8002a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8e0 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f8ef 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0204 	mvn.w	r2, #4
 8002ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f8c3 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f8b6 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f8c5 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0208 	mvn.w	r2, #8
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2204      	movs	r2, #4
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f899 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f88c 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f89b 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d122      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d11b      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0210 	mvn.w	r2, #16
 8002b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2208      	movs	r2, #8
 8002b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f86f 	bl	8002c5a <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e005      	b.n	8002b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f862 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f871 	bl	8002c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d10e      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d107      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0201 	mvn.w	r2, #1
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fd fee2 	bl	8000980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc6:	2b80      	cmp	r3, #128	@ 0x80
 8002bc8:	d10e      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd4:	2b80      	cmp	r3, #128	@ 0x80
 8002bd6:	d107      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8bf 	bl	8002d66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf2:	2b40      	cmp	r3, #64	@ 0x40
 8002bf4:	d10e      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c00:	2b40      	cmp	r3, #64	@ 0x40
 8002c02:	d107      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f835 	bl	8002c7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d10e      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d107      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0220 	mvn.w	r2, #32
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f88a 	bl	8002d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a29      	ldr	r2, [pc, #164]	@ (8002d48 <TIM_Base_SetConfig+0xb8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00b      	beq.n	8002cc0 <TIM_Base_SetConfig+0x30>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cae:	d007      	beq.n	8002cc0 <TIM_Base_SetConfig+0x30>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a26      	ldr	r2, [pc, #152]	@ (8002d4c <TIM_Base_SetConfig+0xbc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <TIM_Base_SetConfig+0x30>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a25      	ldr	r2, [pc, #148]	@ (8002d50 <TIM_Base_SetConfig+0xc0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d108      	bne.n	8002cd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d48 <TIM_Base_SetConfig+0xb8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <TIM_Base_SetConfig+0x62>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce0:	d007      	beq.n	8002cf2 <TIM_Base_SetConfig+0x62>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a19      	ldr	r2, [pc, #100]	@ (8002d4c <TIM_Base_SetConfig+0xbc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d003      	beq.n	8002cf2 <TIM_Base_SetConfig+0x62>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a18      	ldr	r2, [pc, #96]	@ (8002d50 <TIM_Base_SetConfig+0xc0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d108      	bne.n	8002d04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a07      	ldr	r2, [pc, #28]	@ (8002d48 <TIM_Base_SetConfig+0xb8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d103      	bne.n	8002d38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	615a      	str	r2, [r3, #20]
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800

08002d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d7e:	f3ef 8305 	mrs	r3, IPSR
 8002d82:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10f      	bne.n	8002daa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d8e:	607b      	str	r3, [r7, #4]
  return(result);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <osKernelInitialize+0x32>
 8002d96:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <osKernelInitialize+0x60>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d109      	bne.n	8002db2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8002da2:	603b      	str	r3, [r7, #0]
  return(result);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002daa:	f06f 0305 	mvn.w	r3, #5
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e00c      	b.n	8002dcc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002db2:	4b09      	ldr	r3, [pc, #36]	@ (8002dd8 <osKernelInitialize+0x60>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002dba:	4b07      	ldr	r3, [pc, #28]	@ (8002dd8 <osKernelInitialize+0x60>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e002      	b.n	8002dcc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	20000158 	.word	0x20000158

08002ddc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002de2:	f3ef 8305 	mrs	r3, IPSR
 8002de6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002de8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10f      	bne.n	8002e0e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dee:	f3ef 8310 	mrs	r3, PRIMASK
 8002df2:	607b      	str	r3, [r7, #4]
  return(result);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <osKernelStart+0x32>
 8002dfa:	4b11      	ldr	r3, [pc, #68]	@ (8002e40 <osKernelStart+0x64>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d109      	bne.n	8002e16 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e02:	f3ef 8311 	mrs	r3, BASEPRI
 8002e06:	603b      	str	r3, [r7, #0]
  return(result);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002e0e:	f06f 0305 	mvn.w	r3, #5
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e00e      	b.n	8002e34 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e16:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <osKernelStart+0x64>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d107      	bne.n	8002e2e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002e1e:	4b08      	ldr	r3, [pc, #32]	@ (8002e40 <osKernelStart+0x64>)
 8002e20:	2202      	movs	r2, #2
 8002e22:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002e24:	f001 f8a8 	bl	8003f78 <vTaskStartScheduler>
      stat = osOK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	e002      	b.n	8002e34 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e34:	68fb      	ldr	r3, [r7, #12]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000158 	.word	0x20000158

08002e44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b092      	sub	sp, #72	@ 0x48
 8002e48:	af04      	add	r7, sp, #16
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e54:	f3ef 8305 	mrs	r3, IPSR
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 8094 	bne.w	8002f8a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e62:	f3ef 8310 	mrs	r3, PRIMASK
 8002e66:	623b      	str	r3, [r7, #32]
  return(result);
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f040 808d 	bne.w	8002f8a <osThreadNew+0x146>
 8002e70:	4b48      	ldr	r3, [pc, #288]	@ (8002f94 <osThreadNew+0x150>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d106      	bne.n	8002e86 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e78:	f3ef 8311 	mrs	r3, BASEPRI
 8002e7c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f040 8082 	bne.w	8002f8a <osThreadNew+0x146>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d07e      	beq.n	8002f8a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002e8c:	2380      	movs	r3, #128	@ 0x80
 8002e8e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002e90:	2318      	movs	r3, #24
 8002e92:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8002e94:	2300      	movs	r3, #0
 8002e96:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002e98:	f107 031b 	add.w	r3, r7, #27
 8002e9c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea2:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d045      	beq.n	8002f36 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <osThreadNew+0x74>
        name = attr->name;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <osThreadNew+0x9a>
 8002ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ece:	2b38      	cmp	r3, #56	@ 0x38
 8002ed0:	d805      	bhi.n	8002ede <osThreadNew+0x9a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <osThreadNew+0x9e>
        return (NULL);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e054      	b.n	8002f8c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00e      	beq.n	8002f18 <osThreadNew+0xd4>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	2ba7      	cmp	r3, #167	@ 0xa7
 8002f00:	d90a      	bls.n	8002f18 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d006      	beq.n	8002f18 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <osThreadNew+0xd4>
        mem = 1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f16:	e010      	b.n	8002f3a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10c      	bne.n	8002f3a <osThreadNew+0xf6>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d108      	bne.n	8002f3a <osThreadNew+0xf6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d104      	bne.n	8002f3a <osThreadNew+0xf6>
          mem = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f34:	e001      	b.n	8002f3a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8002f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d110      	bne.n	8002f62 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f48:	9202      	str	r2, [sp, #8]
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f54:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fe24 	bl	8003ba4 <xTaskCreateStatic>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e013      	b.n	8002f8a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d110      	bne.n	8002f8a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fe71 	bl	8003c62 <xTaskCreate>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d001      	beq.n	8002f8a <osThreadNew+0x146>
          hTask = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f8a:	697b      	ldr	r3, [r7, #20]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3738      	adds	r7, #56	@ 0x38
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000158 	.word	0x20000158

08002f98 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fa0:	f3ef 8305 	mrs	r3, IPSR
 8002fa4:	613b      	str	r3, [r7, #16]
  return(result);
 8002fa6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10f      	bne.n	8002fcc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fac:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <osDelay+0x34>
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff0 <osDelay+0x58>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d109      	bne.n	8002fd4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fc0:	f3ef 8311 	mrs	r3, BASEPRI
 8002fc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <osDelay+0x3c>
    stat = osErrorISR;
 8002fcc:	f06f 0305 	mvn.w	r3, #5
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	e007      	b.n	8002fe4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 ff94 	bl	8003f0c <vTaskDelay>
    }
  }

  return (stat);
 8002fe4:	697b      	ldr	r3, [r7, #20]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000158 	.word	0x20000158

08002ff4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4a06      	ldr	r2, [pc, #24]	@ (800301c <vApplicationGetIdleTaskMemory+0x28>)
 8003004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4a05      	ldr	r2, [pc, #20]	@ (8003020 <vApplicationGetIdleTaskMemory+0x2c>)
 800300a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2280      	movs	r2, #128	@ 0x80
 8003010:	601a      	str	r2, [r3, #0]
}
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	2000015c 	.word	0x2000015c
 8003020:	20000204 	.word	0x20000204

08003024 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a07      	ldr	r2, [pc, #28]	@ (8003050 <vApplicationGetTimerTaskMemory+0x2c>)
 8003034:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4a06      	ldr	r2, [pc, #24]	@ (8003054 <vApplicationGetTimerTaskMemory+0x30>)
 800303a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003042:	601a      	str	r2, [r3, #0]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000404 	.word	0x20000404
 8003054:	200004ac 	.word	0x200004ac

08003058 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f103 0208 	add.w	r2, r3, #8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f04f 32ff 	mov.w	r2, #4294967295
 8003070:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f103 0208 	add.w	r2, r3, #8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f103 0208 	add.w	r2, r3, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030ae:	b480      	push	{r7}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	601a      	str	r2, [r3, #0]
}
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d103      	bne.n	8003114 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e00c      	b.n	800312e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3308      	adds	r3, #8
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e002      	b.n	8003122 <vListInsert+0x2e>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	d2f6      	bcs.n	800311c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	601a      	str	r2, [r3, #0]
}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6892      	ldr	r2, [r2, #8]
 800317a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6852      	ldr	r2, [r2, #4]
 8003184:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d103      	bne.n	8003198 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	1e5a      	subs	r2, r3, #1
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
	...

080031b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10b      	bne.n	80031e4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031de:	bf00      	nop
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80031e4:	f002 f822 	bl	800522c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f0:	68f9      	ldr	r1, [r7, #12]
 80031f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	441a      	add	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003214:	3b01      	subs	r3, #1
 8003216:	68f9      	ldr	r1, [r7, #12]
 8003218:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	441a      	add	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	22ff      	movs	r2, #255	@ 0xff
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	22ff      	movs	r2, #255	@ 0xff
 8003230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d114      	bne.n	8003264 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01a      	beq.n	8003278 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3310      	adds	r3, #16
 8003246:	4618      	mov	r0, r3
 8003248:	f001 f936 	bl	80044b8 <xTaskRemoveFromEventList>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d012      	beq.n	8003278 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003252:	4b0d      	ldr	r3, [pc, #52]	@ (8003288 <xQueueGenericReset+0xd0>)
 8003254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	e009      	b.n	8003278 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3310      	adds	r3, #16
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fef5 	bl	8003058 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3324      	adds	r3, #36	@ 0x24
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fef0 	bl	8003058 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003278:	f002 f808 	bl	800528c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800327c:	2301      	movs	r3, #1
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	e000ed04 	.word	0xe000ed04

0800328c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08e      	sub	sp, #56	@ 0x38
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10b      	bne.n	80032b8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80032b2:	bf00      	nop
 80032b4:	bf00      	nop
 80032b6:	e7fd      	b.n	80032b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10b      	bne.n	80032d6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	e7fd      	b.n	80032d2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <xQueueGenericCreateStatic+0x56>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <xQueueGenericCreateStatic+0x5a>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <xQueueGenericCreateStatic+0x5c>
 80032e6:	2300      	movs	r3, #0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10b      	bne.n	8003304 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80032ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f0:	f383 8811 	msr	BASEPRI, r3
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	623b      	str	r3, [r7, #32]
}
 80032fe:	bf00      	nop
 8003300:	bf00      	nop
 8003302:	e7fd      	b.n	8003300 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <xQueueGenericCreateStatic+0x84>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <xQueueGenericCreateStatic+0x88>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <xQueueGenericCreateStatic+0x8a>
 8003314:	2300      	movs	r3, #0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	61fb      	str	r3, [r7, #28]
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	e7fd      	b.n	800332e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003332:	2350      	movs	r3, #80	@ 0x50
 8003334:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b50      	cmp	r3, #80	@ 0x50
 800333a:	d00b      	beq.n	8003354 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800333c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	61bb      	str	r3, [r7, #24]
}
 800334e:	bf00      	nop
 8003350:	bf00      	nop
 8003352:	e7fd      	b.n	8003350 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00d      	beq.n	800337a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800335e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003366:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800336a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	4613      	mov	r3, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f805 	bl	8003384 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800337a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800337c:	4618      	mov	r0, r3
 800337e:	3730      	adds	r7, #48	@ 0x30
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d103      	bne.n	80033a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	e002      	b.n	80033a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033b2:	2101      	movs	r1, #1
 80033b4:	69b8      	ldr	r0, [r7, #24]
 80033b6:	f7ff feff 	bl	80031b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08e      	sub	sp, #56	@ 0x38
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033da:	2300      	movs	r3, #0
 80033dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <xQueueGenericSend+0x34>
	__asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d103      	bne.n	800340e <xQueueGenericSend+0x42>
 8003406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <xQueueGenericSend+0x46>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <xQueueGenericSend+0x48>
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <xQueueGenericSend+0x64>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800342a:	bf00      	nop
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d103      	bne.n	800343e <xQueueGenericSend+0x72>
 8003436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <xQueueGenericSend+0x76>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <xQueueGenericSend+0x78>
 8003442:	2300      	movs	r3, #0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <xQueueGenericSend+0x94>
	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	623b      	str	r3, [r7, #32]
}
 800345a:	bf00      	nop
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003460:	f001 f9f4 	bl	800484c <xTaskGetSchedulerState>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <xQueueGenericSend+0xa4>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <xQueueGenericSend+0xa8>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <xQueueGenericSend+0xaa>
 8003474:	2300      	movs	r3, #0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10b      	bne.n	8003492 <xQueueGenericSend+0xc6>
	__asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	61fb      	str	r3, [r7, #28]
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	e7fd      	b.n	800348e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003492:	f001 fecb 	bl	800522c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800349a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349e:	429a      	cmp	r2, r3
 80034a0:	d302      	bcc.n	80034a8 <xQueueGenericSend+0xdc>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d129      	bne.n	80034fc <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034ae:	f000 fa0d 	bl	80038cc <prvCopyDataToQueue>
 80034b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d010      	beq.n	80034de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034be:	3324      	adds	r3, #36	@ 0x24
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fff9 	bl	80044b8 <xTaskRemoveFromEventList>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d013      	beq.n	80034f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034cc:	4b3f      	ldr	r3, [pc, #252]	@ (80035cc <xQueueGenericSend+0x200>)
 80034ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	e00a      	b.n	80034f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034e4:	4b39      	ldr	r3, [pc, #228]	@ (80035cc <xQueueGenericSend+0x200>)
 80034e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034f4:	f001 feca 	bl	800528c <vPortExitCritical>
				return pdPASS;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e063      	b.n	80035c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003502:	f001 fec3 	bl	800528c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003506:	2300      	movs	r3, #0
 8003508:	e05c      	b.n	80035c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800350a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350c:	2b00      	cmp	r3, #0
 800350e:	d106      	bne.n	800351e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003510:	f107 0314 	add.w	r3, r7, #20
 8003514:	4618      	mov	r0, r3
 8003516:	f001 f833 	bl	8004580 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800351a:	2301      	movs	r3, #1
 800351c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800351e:	f001 feb5 	bl	800528c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003522:	f000 fd99 	bl	8004058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003526:	f001 fe81 	bl	800522c <vPortEnterCritical>
 800352a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003530:	b25b      	sxtb	r3, r3
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d103      	bne.n	8003540 <xQueueGenericSend+0x174>
 8003538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003542:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003546:	b25b      	sxtb	r3, r3
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d103      	bne.n	8003556 <xQueueGenericSend+0x18a>
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003556:	f001 fe99 	bl	800528c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800355a:	1d3a      	adds	r2, r7, #4
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f001 f822 	bl	80045ac <xTaskCheckForTimeOut>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d124      	bne.n	80035b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800356e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003570:	f000 faa4 	bl	8003abc <prvIsQueueFull>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d018      	beq.n	80035ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800357a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357c:	3310      	adds	r3, #16
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f000 ff46 	bl	8004414 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800358a:	f000 fa2f 	bl	80039ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800358e:	f000 fd71 	bl	8004074 <xTaskResumeAll>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	f47f af7c 	bne.w	8003492 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800359a:	4b0c      	ldr	r3, [pc, #48]	@ (80035cc <xQueueGenericSend+0x200>)
 800359c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	e772      	b.n	8003492 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035ae:	f000 fa1d 	bl	80039ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035b2:	f000 fd5f 	bl	8004074 <xTaskResumeAll>
 80035b6:	e76c      	b.n	8003492 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035ba:	f000 fa17 	bl	80039ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035be:	f000 fd59 	bl	8004074 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035c2:	2300      	movs	r3, #0
		}
	}
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3738      	adds	r7, #56	@ 0x38
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	e000ed04 	.word	0xe000ed04

080035d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08e      	sub	sp, #56	@ 0x38
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80035e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035fa:	bf00      	nop
 80035fc:	bf00      	nop
 80035fe:	e7fd      	b.n	80035fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <xQueueGenericSendFromISR+0x3e>
 8003606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <xQueueGenericSendFromISR+0x42>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <xQueueGenericSendFromISR+0x44>
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10b      	bne.n	8003630 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	623b      	str	r3, [r7, #32]
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	e7fd      	b.n	800362c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d103      	bne.n	800363e <xQueueGenericSendFromISR+0x6e>
 8003636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <xQueueGenericSendFromISR+0x72>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <xQueueGenericSendFromISR+0x74>
 8003642:	2300      	movs	r3, #0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	61fb      	str	r3, [r7, #28]
}
 800365a:	bf00      	nop
 800365c:	bf00      	nop
 800365e:	e7fd      	b.n	800365c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003660:	f001 fea6 	bl	80053b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003664:	f3ef 8211 	mrs	r2, BASEPRI
 8003668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	61ba      	str	r2, [r7, #24]
 800367a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800367c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800367e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003682:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003688:	429a      	cmp	r2, r3
 800368a:	d302      	bcc.n	8003692 <xQueueGenericSendFromISR+0xc2>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d12c      	bne.n	80036ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003698:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036a2:	f000 f913 	bl	80038cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d112      	bne.n	80036d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d016      	beq.n	80036e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ba:	3324      	adds	r3, #36	@ 0x24
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fefb 	bl	80044b8 <xTaskRemoveFromEventList>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00e      	beq.n	80036e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e007      	b.n	80036e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80036da:	3301      	adds	r3, #1
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	b25a      	sxtb	r2, r3
 80036e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80036e6:	2301      	movs	r3, #1
 80036e8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80036ea:	e001      	b.n	80036f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80036f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3738      	adds	r7, #56	@ 0x38
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08c      	sub	sp, #48	@ 0x30
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003714:	2300      	movs	r3, #0
 8003716:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800371c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <xQueueReceive+0x32>
	__asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	623b      	str	r3, [r7, #32]
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	e7fd      	b.n	8003736 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d103      	bne.n	8003748 <xQueueReceive+0x40>
 8003740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <xQueueReceive+0x44>
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <xQueueReceive+0x46>
 800374c:	2300      	movs	r3, #0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10b      	bne.n	800376a <xQueueReceive+0x62>
	__asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	61fb      	str	r3, [r7, #28]
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop
 8003768:	e7fd      	b.n	8003766 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800376a:	f001 f86f 	bl	800484c <xTaskGetSchedulerState>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <xQueueReceive+0x72>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <xQueueReceive+0x76>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <xQueueReceive+0x78>
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <xQueueReceive+0x94>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	61bb      	str	r3, [r7, #24]
}
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	e7fd      	b.n	8003798 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800379c:	f001 fd46 	bl	800522c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01f      	beq.n	80037ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037b0:	f000 f8f6 	bl	80039a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	1e5a      	subs	r2, r3, #1
 80037b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00f      	beq.n	80037e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c6:	3310      	adds	r3, #16
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fe75 	bl	80044b8 <xTaskRemoveFromEventList>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d007      	beq.n	80037e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037d4:	4b3c      	ldr	r3, [pc, #240]	@ (80038c8 <xQueueReceive+0x1c0>)
 80037d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037e4:	f001 fd52 	bl	800528c <vPortExitCritical>
				return pdPASS;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e069      	b.n	80038c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037f2:	f001 fd4b 	bl	800528c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e062      	b.n	80038c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d106      	bne.n	800380e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	4618      	mov	r0, r3
 8003806:	f000 febb 	bl	8004580 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800380a:	2301      	movs	r3, #1
 800380c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800380e:	f001 fd3d 	bl	800528c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003812:	f000 fc21 	bl	8004058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003816:	f001 fd09 	bl	800522c <vPortEnterCritical>
 800381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003820:	b25b      	sxtb	r3, r3
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d103      	bne.n	8003830 <xQueueReceive+0x128>
 8003828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003832:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003836:	b25b      	sxtb	r3, r3
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d103      	bne.n	8003846 <xQueueReceive+0x13e>
 800383e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003846:	f001 fd21 	bl	800528c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800384a:	1d3a      	adds	r2, r7, #4
 800384c:	f107 0310 	add.w	r3, r7, #16
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f000 feaa 	bl	80045ac <xTaskCheckForTimeOut>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d123      	bne.n	80038a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800385e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003860:	f000 f916 	bl	8003a90 <prvIsQueueEmpty>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d017      	beq.n	800389a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800386a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386c:	3324      	adds	r3, #36	@ 0x24
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fdce 	bl	8004414 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003878:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800387a:	f000 f8b7 	bl	80039ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800387e:	f000 fbf9 	bl	8004074 <xTaskResumeAll>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d189      	bne.n	800379c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003888:	4b0f      	ldr	r3, [pc, #60]	@ (80038c8 <xQueueReceive+0x1c0>)
 800388a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	e780      	b.n	800379c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800389a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800389c:	f000 f8a6 	bl	80039ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038a0:	f000 fbe8 	bl	8004074 <xTaskResumeAll>
 80038a4:	e77a      	b.n	800379c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038a8:	f000 f8a0 	bl	80039ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038ac:	f000 fbe2 	bl	8004074 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038b2:	f000 f8ed 	bl	8003a90 <prvIsQueueEmpty>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f43f af6f 	beq.w	800379c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3730      	adds	r7, #48	@ 0x30
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d14d      	bne.n	800398e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 ffc6 	bl	8004888 <xTaskPriorityDisinherit>
 80038fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	605a      	str	r2, [r3, #4]
 8003904:	e043      	b.n	800398e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d119      	bne.n	8003940 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6898      	ldr	r0, [r3, #8]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	461a      	mov	r2, r3
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	f001 ffec 	bl	80058f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003924:	441a      	add	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	429a      	cmp	r2, r3
 8003934:	d32b      	bcc.n	800398e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	609a      	str	r2, [r3, #8]
 800393e:	e026      	b.n	800398e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68d8      	ldr	r0, [r3, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	461a      	mov	r2, r3
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	f001 ffd2 	bl	80058f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	425b      	negs	r3, r3
 800395a:	441a      	add	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d207      	bcs.n	800397c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	425b      	negs	r3, r3
 8003976:	441a      	add	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d105      	bne.n	800398e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	3b01      	subs	r3, #1
 800398c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003996:	697b      	ldr	r3, [r7, #20]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d018      	beq.n	80039e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	441a      	add	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d303      	bcc.n	80039d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68d9      	ldr	r1, [r3, #12]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039dc:	461a      	mov	r2, r3
 80039de:	6838      	ldr	r0, [r7, #0]
 80039e0:	f001 ff88 	bl	80058f4 <memcpy>
	}
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039f4:	f001 fc1a 	bl	800522c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a00:	e011      	b.n	8003a26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d012      	beq.n	8003a30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3324      	adds	r3, #36	@ 0x24
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fd52 	bl	80044b8 <xTaskRemoveFromEventList>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a1a:	f000 fe2b 	bl	8004674 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	dce9      	bgt.n	8003a02 <prvUnlockQueue+0x16>
 8003a2e:	e000      	b.n	8003a32 <prvUnlockQueue+0x46>
					break;
 8003a30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	22ff      	movs	r2, #255	@ 0xff
 8003a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003a3a:	f001 fc27 	bl	800528c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a3e:	f001 fbf5 	bl	800522c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a4a:	e011      	b.n	8003a70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d012      	beq.n	8003a7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3310      	adds	r3, #16
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fd2d 	bl	80044b8 <xTaskRemoveFromEventList>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a64:	f000 fe06 	bl	8004674 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a68:	7bbb      	ldrb	r3, [r7, #14]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	dce9      	bgt.n	8003a4c <prvUnlockQueue+0x60>
 8003a78:	e000      	b.n	8003a7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	22ff      	movs	r2, #255	@ 0xff
 8003a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003a84:	f001 fc02 	bl	800528c <vPortExitCritical>
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a98:	f001 fbc8 	bl	800522c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d102      	bne.n	8003aaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e001      	b.n	8003aae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003aae:	f001 fbed 	bl	800528c <vPortExitCritical>

	return xReturn;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ac4:	f001 fbb2 	bl	800522c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d102      	bne.n	8003ada <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e001      	b.n	8003ade <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ade:	f001 fbd5 	bl	800528c <vPortExitCritical>

	return xReturn;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	e014      	b.n	8003b26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003afc:	4a0e      	ldr	r2, [pc, #56]	@ (8003b38 <vQueueAddToRegistry+0x4c>)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10b      	bne.n	8003b20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b08:	490b      	ldr	r1, [pc, #44]	@ (8003b38 <vQueueAddToRegistry+0x4c>)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b12:	4a09      	ldr	r2, [pc, #36]	@ (8003b38 <vQueueAddToRegistry+0x4c>)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4413      	add	r3, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b1e:	e006      	b.n	8003b2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3301      	adds	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b07      	cmp	r3, #7
 8003b2a:	d9e7      	bls.n	8003afc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	200008ac 	.word	0x200008ac

08003b3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b4c:	f001 fb6e 	bl	800522c <vPortEnterCritical>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b56:	b25b      	sxtb	r3, r3
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d103      	bne.n	8003b66 <vQueueWaitForMessageRestricted+0x2a>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b72:	d103      	bne.n	8003b7c <vQueueWaitForMessageRestricted+0x40>
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b7c:	f001 fb86 	bl	800528c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3324      	adds	r3, #36	@ 0x24
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fc65 	bl	8004460 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b96:	6978      	ldr	r0, [r7, #20]
 8003b98:	f7ff ff28 	bl	80039ec <prvUnlockQueue>
	}
 8003b9c:	bf00      	nop
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08e      	sub	sp, #56	@ 0x38
 8003ba8:	af04      	add	r7, sp, #16
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10b      	bne.n	8003bd0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	623b      	str	r3, [r7, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	bf00      	nop
 8003bce:	e7fd      	b.n	8003bcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10b      	bne.n	8003bee <xTaskCreateStatic+0x4a>
	__asm volatile
 8003bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	61fb      	str	r3, [r7, #28]
}
 8003be8:	bf00      	nop
 8003bea:	bf00      	nop
 8003bec:	e7fd      	b.n	8003bea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003bee:	23a8      	movs	r3, #168	@ 0xa8
 8003bf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2ba8      	cmp	r3, #168	@ 0xa8
 8003bf6:	d00b      	beq.n	8003c10 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	61bb      	str	r3, [r7, #24]
}
 8003c0a:	bf00      	nop
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01e      	beq.n	8003c54 <xTaskCreateStatic+0xb0>
 8003c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01b      	beq.n	8003c54 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c24:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	2202      	movs	r2, #2
 8003c2a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9303      	str	r3, [sp, #12]
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	9302      	str	r3, [sp, #8]
 8003c36:	f107 0314 	add.w	r3, r7, #20
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f850 	bl	8003cec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c4e:	f000 f8ed 	bl	8003e2c <prvAddNewTaskToReadyList>
 8003c52:	e001      	b.n	8003c58 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c58:	697b      	ldr	r3, [r7, #20]
	}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3728      	adds	r7, #40	@ 0x28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b08c      	sub	sp, #48	@ 0x30
 8003c66:	af04      	add	r7, sp, #16
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 fbda 	bl	8005430 <pvPortMalloc>
 8003c7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00e      	beq.n	8003ca2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003c84:	20a8      	movs	r0, #168	@ 0xa8
 8003c86:	f001 fbd3 	bl	8005430 <pvPortMalloc>
 8003c8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c98:	e005      	b.n	8003ca6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f001 fc90 	bl	80055c0 <vPortFree>
 8003ca0:	e001      	b.n	8003ca6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d017      	beq.n	8003cdc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cb4:	88fa      	ldrh	r2, [r7, #6]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9303      	str	r3, [sp, #12]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	9302      	str	r3, [sp, #8]
 8003cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f80e 	bl	8003cec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cd0:	69f8      	ldr	r0, [r7, #28]
 8003cd2:	f000 f8ab 	bl	8003e2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	e002      	b.n	8003ce2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ce2:	69bb      	ldr	r3, [r7, #24]
	}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3720      	adds	r7, #32
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	461a      	mov	r2, r3
 8003d04:	21a5      	movs	r1, #165	@ 0xa5
 8003d06:	f001 fd71 	bl	80057ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d14:	3b01      	subs	r3, #1
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f023 0307 	bic.w	r3, r3, #7
 8003d22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	617b      	str	r3, [r7, #20]
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	e7fd      	b.n	8003d42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
 8003d4a:	e012      	b.n	8003d72 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	7819      	ldrb	r1, [r3, #0]
 8003d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4413      	add	r3, r2
 8003d5a:	3334      	adds	r3, #52	@ 0x34
 8003d5c:	460a      	mov	r2, r1
 8003d5e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d006      	beq.n	8003d7a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	2b0f      	cmp	r3, #15
 8003d76:	d9e9      	bls.n	8003d4c <prvInitialiseNewTask+0x60>
 8003d78:	e000      	b.n	8003d7c <prvInitialiseNewTask+0x90>
		{
			break;
 8003d7a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d86:	2b37      	cmp	r3, #55	@ 0x37
 8003d88:	d901      	bls.n	8003d8e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d8a:	2337      	movs	r3, #55	@ 0x37
 8003d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d92:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d98:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da2:	3304      	adds	r3, #4
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff f976 	bl	8003096 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dac:	3318      	adds	r3, #24
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff f971 	bl	8003096 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ddc:	3354      	adds	r3, #84	@ 0x54
 8003dde:	224c      	movs	r2, #76	@ 0x4c
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f001 fd02 	bl	80057ec <memset>
 8003de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dea:	4a0d      	ldr	r2, [pc, #52]	@ (8003e20 <prvInitialiseNewTask+0x134>)
 8003dec:	659a      	str	r2, [r3, #88]	@ 0x58
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	4a0c      	ldr	r2, [pc, #48]	@ (8003e24 <prvInitialiseNewTask+0x138>)
 8003df2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df6:	4a0c      	ldr	r2, [pc, #48]	@ (8003e28 <prvInitialiseNewTask+0x13c>)
 8003df8:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	68f9      	ldr	r1, [r7, #12]
 8003dfe:	69b8      	ldr	r0, [r7, #24]
 8003e00:	f001 f926 	bl	8005050 <pxPortInitialiseStack>
 8003e04:	4602      	mov	r2, r0
 8003e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e08:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e16:	bf00      	nop
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20001b38 	.word	0x20001b38
 8003e24:	20001ba0 	.word	0x20001ba0
 8003e28:	20001c08 	.word	0x20001c08

08003e2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e34:	f001 f9fa 	bl	800522c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e38:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef0 <prvAddNewTaskToReadyList+0xc4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ef0 <prvAddNewTaskToReadyList+0xc4>)
 8003e40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e42:	4b2c      	ldr	r3, [pc, #176]	@ (8003ef4 <prvAddNewTaskToReadyList+0xc8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef4 <prvAddNewTaskToReadyList+0xc8>)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e50:	4b27      	ldr	r3, [pc, #156]	@ (8003ef0 <prvAddNewTaskToReadyList+0xc4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d110      	bne.n	8003e7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e58:	f000 fc30 	bl	80046bc <prvInitialiseTaskLists>
 8003e5c:	e00d      	b.n	8003e7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e5e:	4b26      	ldr	r3, [pc, #152]	@ (8003ef8 <prvAddNewTaskToReadyList+0xcc>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e66:	4b23      	ldr	r3, [pc, #140]	@ (8003ef4 <prvAddNewTaskToReadyList+0xc8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d802      	bhi.n	8003e7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e74:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef4 <prvAddNewTaskToReadyList+0xc8>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e7a:	4b20      	ldr	r3, [pc, #128]	@ (8003efc <prvAddNewTaskToReadyList+0xd0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	4a1e      	ldr	r2, [pc, #120]	@ (8003efc <prvAddNewTaskToReadyList+0xd0>)
 8003e82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e84:	4b1d      	ldr	r3, [pc, #116]	@ (8003efc <prvAddNewTaskToReadyList+0xd0>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e90:	4b1b      	ldr	r3, [pc, #108]	@ (8003f00 <prvAddNewTaskToReadyList+0xd4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d903      	bls.n	8003ea0 <prvAddNewTaskToReadyList+0x74>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	4a18      	ldr	r2, [pc, #96]	@ (8003f00 <prvAddNewTaskToReadyList+0xd4>)
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4a15      	ldr	r2, [pc, #84]	@ (8003f04 <prvAddNewTaskToReadyList+0xd8>)
 8003eae:	441a      	add	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f7ff f8f9 	bl	80030ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ebc:	f001 f9e6 	bl	800528c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <prvAddNewTaskToReadyList+0xcc>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00e      	beq.n	8003ee6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <prvAddNewTaskToReadyList+0xc8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d207      	bcs.n	8003ee6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8003f08 <prvAddNewTaskToReadyList+0xdc>)
 8003ed8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000dc0 	.word	0x20000dc0
 8003ef4:	200008ec 	.word	0x200008ec
 8003ef8:	20000dcc 	.word	0x20000dcc
 8003efc:	20000ddc 	.word	0x20000ddc
 8003f00:	20000dc8 	.word	0x20000dc8
 8003f04:	200008f0 	.word	0x200008f0
 8003f08:	e000ed04 	.word	0xe000ed04

08003f0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d018      	beq.n	8003f50 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f1e:	4b14      	ldr	r3, [pc, #80]	@ (8003f70 <vTaskDelay+0x64>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <vTaskDelay+0x32>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60bb      	str	r3, [r7, #8]
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	e7fd      	b.n	8003f3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f3e:	f000 f88b 	bl	8004058 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f42:	2100      	movs	r1, #0
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fd0f 	bl	8004968 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f4a:	f000 f893 	bl	8004074 <xTaskResumeAll>
 8003f4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d107      	bne.n	8003f66 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003f56:	4b07      	ldr	r3, [pc, #28]	@ (8003f74 <vTaskDelay+0x68>)
 8003f58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000de8 	.word	0x20000de8
 8003f74:	e000ed04 	.word	0xe000ed04

08003f78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	@ 0x28
 8003f7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f86:	463a      	mov	r2, r7
 8003f88:	1d39      	adds	r1, r7, #4
 8003f8a:	f107 0308 	add.w	r3, r7, #8
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff f830 	bl	8002ff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f94:	6839      	ldr	r1, [r7, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	9202      	str	r2, [sp, #8]
 8003f9c:	9301      	str	r3, [sp, #4]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	460a      	mov	r2, r1
 8003fa6:	4924      	ldr	r1, [pc, #144]	@ (8004038 <vTaskStartScheduler+0xc0>)
 8003fa8:	4824      	ldr	r0, [pc, #144]	@ (800403c <vTaskStartScheduler+0xc4>)
 8003faa:	f7ff fdfb 	bl	8003ba4 <xTaskCreateStatic>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4a23      	ldr	r2, [pc, #140]	@ (8004040 <vTaskStartScheduler+0xc8>)
 8003fb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fb4:	4b22      	ldr	r3, [pc, #136]	@ (8004040 <vTaskStartScheduler+0xc8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	e001      	b.n	8003fc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d102      	bne.n	8003fd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003fcc:	f000 fd20 	bl	8004a10 <xTimerCreateTimerTask>
 8003fd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d11b      	bne.n	8004010 <vTaskStartScheduler+0x98>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	613b      	str	r3, [r7, #16]
}
 8003fea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fec:	4b15      	ldr	r3, [pc, #84]	@ (8004044 <vTaskStartScheduler+0xcc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3354      	adds	r3, #84	@ 0x54
 8003ff2:	4a15      	ldr	r2, [pc, #84]	@ (8004048 <vTaskStartScheduler+0xd0>)
 8003ff4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ff6:	4b15      	ldr	r3, [pc, #84]	@ (800404c <vTaskStartScheduler+0xd4>)
 8003ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ffe:	4b14      	ldr	r3, [pc, #80]	@ (8004050 <vTaskStartScheduler+0xd8>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004004:	4b13      	ldr	r3, [pc, #76]	@ (8004054 <vTaskStartScheduler+0xdc>)
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800400a:	f001 f89d 	bl	8005148 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800400e:	e00f      	b.n	8004030 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004016:	d10b      	bne.n	8004030 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60fb      	str	r3, [r7, #12]
}
 800402a:	bf00      	nop
 800402c:	bf00      	nop
 800402e:	e7fd      	b.n	800402c <vTaskStartScheduler+0xb4>
}
 8004030:	bf00      	nop
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	080059dc 	.word	0x080059dc
 800403c:	0800468d 	.word	0x0800468d
 8004040:	20000de4 	.word	0x20000de4
 8004044:	200008ec 	.word	0x200008ec
 8004048:	20000010 	.word	0x20000010
 800404c:	20000de0 	.word	0x20000de0
 8004050:	20000dcc 	.word	0x20000dcc
 8004054:	20000dc4 	.word	0x20000dc4

08004058 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800405c:	4b04      	ldr	r3, [pc, #16]	@ (8004070 <vTaskSuspendAll+0x18>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3301      	adds	r3, #1
 8004062:	4a03      	ldr	r2, [pc, #12]	@ (8004070 <vTaskSuspendAll+0x18>)
 8004064:	6013      	str	r3, [r2, #0]
}
 8004066:	bf00      	nop
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	20000de8 	.word	0x20000de8

08004074 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004082:	4b42      	ldr	r3, [pc, #264]	@ (800418c <xTaskResumeAll+0x118>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	603b      	str	r3, [r7, #0]
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	e7fd      	b.n	800409e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040a2:	f001 f8c3 	bl	800522c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040a6:	4b39      	ldr	r3, [pc, #228]	@ (800418c <xTaskResumeAll+0x118>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	4a37      	ldr	r2, [pc, #220]	@ (800418c <xTaskResumeAll+0x118>)
 80040ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040b0:	4b36      	ldr	r3, [pc, #216]	@ (800418c <xTaskResumeAll+0x118>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d162      	bne.n	800417e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040b8:	4b35      	ldr	r3, [pc, #212]	@ (8004190 <xTaskResumeAll+0x11c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d05e      	beq.n	800417e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040c0:	e02f      	b.n	8004122 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80040c2:	4b34      	ldr	r3, [pc, #208]	@ (8004194 <xTaskResumeAll+0x120>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3318      	adds	r3, #24
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff f848 	bl	8003164 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3304      	adds	r3, #4
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff f843 	bl	8003164 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004198 <xTaskResumeAll+0x124>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d903      	bls.n	80040f2 <xTaskResumeAll+0x7e>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004198 <xTaskResumeAll+0x124>)
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4a27      	ldr	r2, [pc, #156]	@ (800419c <xTaskResumeAll+0x128>)
 8004100:	441a      	add	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3304      	adds	r3, #4
 8004106:	4619      	mov	r1, r3
 8004108:	4610      	mov	r0, r2
 800410a:	f7fe ffd0 	bl	80030ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004112:	4b23      	ldr	r3, [pc, #140]	@ (80041a0 <xTaskResumeAll+0x12c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	429a      	cmp	r2, r3
 800411a:	d302      	bcc.n	8004122 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800411c:	4b21      	ldr	r3, [pc, #132]	@ (80041a4 <xTaskResumeAll+0x130>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004122:	4b1c      	ldr	r3, [pc, #112]	@ (8004194 <xTaskResumeAll+0x120>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1cb      	bne.n	80040c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004130:	f000 fb68 	bl	8004804 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004134:	4b1c      	ldr	r3, [pc, #112]	@ (80041a8 <xTaskResumeAll+0x134>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d010      	beq.n	8004162 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004140:	f000 f844 	bl	80041cc <xTaskIncrementTick>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800414a:	4b16      	ldr	r3, [pc, #88]	@ (80041a4 <xTaskResumeAll+0x130>)
 800414c:	2201      	movs	r2, #1
 800414e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3b01      	subs	r3, #1
 8004154:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f1      	bne.n	8004140 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800415c:	4b12      	ldr	r3, [pc, #72]	@ (80041a8 <xTaskResumeAll+0x134>)
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004162:	4b10      	ldr	r3, [pc, #64]	@ (80041a4 <xTaskResumeAll+0x130>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800416a:	2301      	movs	r3, #1
 800416c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800416e:	4b0f      	ldr	r3, [pc, #60]	@ (80041ac <xTaskResumeAll+0x138>)
 8004170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800417e:	f001 f885 	bl	800528c <vPortExitCritical>

	return xAlreadyYielded;
 8004182:	68bb      	ldr	r3, [r7, #8]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000de8 	.word	0x20000de8
 8004190:	20000dc0 	.word	0x20000dc0
 8004194:	20000d80 	.word	0x20000d80
 8004198:	20000dc8 	.word	0x20000dc8
 800419c:	200008f0 	.word	0x200008f0
 80041a0:	200008ec 	.word	0x200008ec
 80041a4:	20000dd4 	.word	0x20000dd4
 80041a8:	20000dd0 	.word	0x20000dd0
 80041ac:	e000ed04 	.word	0xe000ed04

080041b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041b6:	4b04      	ldr	r3, [pc, #16]	@ (80041c8 <xTaskGetTickCount+0x18>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041bc:	687b      	ldr	r3, [r7, #4]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	20000dc4 	.word	0x20000dc4

080041cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041d6:	4b52      	ldr	r3, [pc, #328]	@ (8004320 <xTaskIncrementTick+0x154>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f040 808f 	bne.w	80042fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041e0:	4b50      	ldr	r3, [pc, #320]	@ (8004324 <xTaskIncrementTick+0x158>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041e8:	4a4e      	ldr	r2, [pc, #312]	@ (8004324 <xTaskIncrementTick+0x158>)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d121      	bne.n	8004238 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80041f4:	4b4c      	ldr	r3, [pc, #304]	@ (8004328 <xTaskIncrementTick+0x15c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <xTaskIncrementTick+0x4a>
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	603b      	str	r3, [r7, #0]
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	e7fd      	b.n	8004212 <xTaskIncrementTick+0x46>
 8004216:	4b44      	ldr	r3, [pc, #272]	@ (8004328 <xTaskIncrementTick+0x15c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	4b43      	ldr	r3, [pc, #268]	@ (800432c <xTaskIncrementTick+0x160>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a41      	ldr	r2, [pc, #260]	@ (8004328 <xTaskIncrementTick+0x15c>)
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	4a41      	ldr	r2, [pc, #260]	@ (800432c <xTaskIncrementTick+0x160>)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4b41      	ldr	r3, [pc, #260]	@ (8004330 <xTaskIncrementTick+0x164>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3301      	adds	r3, #1
 8004230:	4a3f      	ldr	r2, [pc, #252]	@ (8004330 <xTaskIncrementTick+0x164>)
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	f000 fae6 	bl	8004804 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004238:	4b3e      	ldr	r3, [pc, #248]	@ (8004334 <xTaskIncrementTick+0x168>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	429a      	cmp	r2, r3
 8004240:	d34e      	bcc.n	80042e0 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004242:	4b39      	ldr	r3, [pc, #228]	@ (8004328 <xTaskIncrementTick+0x15c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <xTaskIncrementTick+0x84>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <xTaskIncrementTick+0x86>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d004      	beq.n	8004260 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004256:	4b37      	ldr	r3, [pc, #220]	@ (8004334 <xTaskIncrementTick+0x168>)
 8004258:	f04f 32ff 	mov.w	r2, #4294967295
 800425c:	601a      	str	r2, [r3, #0]
					break;
 800425e:	e03f      	b.n	80042e0 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004260:	4b31      	ldr	r3, [pc, #196]	@ (8004328 <xTaskIncrementTick+0x15c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	429a      	cmp	r2, r3
 8004276:	d203      	bcs.n	8004280 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004278:	4a2e      	ldr	r2, [pc, #184]	@ (8004334 <xTaskIncrementTick+0x168>)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6013      	str	r3, [r2, #0]
						break;
 800427e:	e02f      	b.n	80042e0 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	3304      	adds	r3, #4
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe ff6d 	bl	8003164 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	3318      	adds	r3, #24
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe ff64 	bl	8003164 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a0:	4b25      	ldr	r3, [pc, #148]	@ (8004338 <xTaskIncrementTick+0x16c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d903      	bls.n	80042b0 <xTaskIncrementTick+0xe4>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ac:	4a22      	ldr	r2, [pc, #136]	@ (8004338 <xTaskIncrementTick+0x16c>)
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4a1f      	ldr	r2, [pc, #124]	@ (800433c <xTaskIncrementTick+0x170>)
 80042be:	441a      	add	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f7fe fef1 	bl	80030ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004340 <xTaskIncrementTick+0x174>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d3b3      	bcc.n	8004242 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80042da:	2301      	movs	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042de:	e7b0      	b.n	8004242 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042e0:	4b17      	ldr	r3, [pc, #92]	@ (8004340 <xTaskIncrementTick+0x174>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e6:	4915      	ldr	r1, [pc, #84]	@ (800433c <xTaskIncrementTick+0x170>)
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d907      	bls.n	8004308 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80042f8:	2301      	movs	r3, #1
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e004      	b.n	8004308 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80042fe:	4b11      	ldr	r3, [pc, #68]	@ (8004344 <xTaskIncrementTick+0x178>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3301      	adds	r3, #1
 8004304:	4a0f      	ldr	r2, [pc, #60]	@ (8004344 <xTaskIncrementTick+0x178>)
 8004306:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004308:	4b0f      	ldr	r3, [pc, #60]	@ (8004348 <xTaskIncrementTick+0x17c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004314:	697b      	ldr	r3, [r7, #20]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000de8 	.word	0x20000de8
 8004324:	20000dc4 	.word	0x20000dc4
 8004328:	20000d78 	.word	0x20000d78
 800432c:	20000d7c 	.word	0x20000d7c
 8004330:	20000dd8 	.word	0x20000dd8
 8004334:	20000de0 	.word	0x20000de0
 8004338:	20000dc8 	.word	0x20000dc8
 800433c:	200008f0 	.word	0x200008f0
 8004340:	200008ec 	.word	0x200008ec
 8004344:	20000dd0 	.word	0x20000dd0
 8004348:	20000dd4 	.word	0x20000dd4

0800434c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004352:	4b2a      	ldr	r3, [pc, #168]	@ (80043fc <vTaskSwitchContext+0xb0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800435a:	4b29      	ldr	r3, [pc, #164]	@ (8004400 <vTaskSwitchContext+0xb4>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004360:	e047      	b.n	80043f2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004362:	4b27      	ldr	r3, [pc, #156]	@ (8004400 <vTaskSwitchContext+0xb4>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004368:	4b26      	ldr	r3, [pc, #152]	@ (8004404 <vTaskSwitchContext+0xb8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	e011      	b.n	8004394 <vTaskSwitchContext+0x48>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <vTaskSwitchContext+0x42>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	607b      	str	r3, [r7, #4]
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	e7fd      	b.n	800438a <vTaskSwitchContext+0x3e>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3b01      	subs	r3, #1
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	491c      	ldr	r1, [pc, #112]	@ (8004408 <vTaskSwitchContext+0xbc>)
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0e3      	beq.n	8004370 <vTaskSwitchContext+0x24>
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <vTaskSwitchContext+0xbc>)
 80043b4:	4413      	add	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	3308      	adds	r3, #8
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d104      	bne.n	80043d8 <vTaskSwitchContext+0x8c>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	605a      	str	r2, [r3, #4]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4a0b      	ldr	r2, [pc, #44]	@ (800440c <vTaskSwitchContext+0xc0>)
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4a08      	ldr	r2, [pc, #32]	@ (8004404 <vTaskSwitchContext+0xb8>)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043e8:	4b08      	ldr	r3, [pc, #32]	@ (800440c <vTaskSwitchContext+0xc0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3354      	adds	r3, #84	@ 0x54
 80043ee:	4a08      	ldr	r2, [pc, #32]	@ (8004410 <vTaskSwitchContext+0xc4>)
 80043f0:	6013      	str	r3, [r2, #0]
}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr
 80043fc:	20000de8 	.word	0x20000de8
 8004400:	20000dd4 	.word	0x20000dd4
 8004404:	20000dc8 	.word	0x20000dc8
 8004408:	200008f0 	.word	0x200008f0
 800440c:	200008ec 	.word	0x200008ec
 8004410:	20000010 	.word	0x20000010

08004414 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10b      	bne.n	800443c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	60fb      	str	r3, [r7, #12]
}
 8004436:	bf00      	nop
 8004438:	bf00      	nop
 800443a:	e7fd      	b.n	8004438 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800443c:	4b07      	ldr	r3, [pc, #28]	@ (800445c <vTaskPlaceOnEventList+0x48>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3318      	adds	r3, #24
 8004442:	4619      	mov	r1, r3
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7fe fe55 	bl	80030f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800444a:	2101      	movs	r1, #1
 800444c:	6838      	ldr	r0, [r7, #0]
 800444e:	f000 fa8b 	bl	8004968 <prvAddCurrentTaskToDelayedList>
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	200008ec 	.word	0x200008ec

08004460 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10b      	bne.n	800448a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	617b      	str	r3, [r7, #20]
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	e7fd      	b.n	8004486 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800448a:	4b0a      	ldr	r3, [pc, #40]	@ (80044b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3318      	adds	r3, #24
 8004490:	4619      	mov	r1, r3
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7fe fe0b 	bl	80030ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800449e:	f04f 33ff 	mov.w	r3, #4294967295
 80044a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	68b8      	ldr	r0, [r7, #8]
 80044a8:	f000 fa5e 	bl	8004968 <prvAddCurrentTaskToDelayedList>
	}
 80044ac:	bf00      	nop
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	200008ec 	.word	0x200008ec

080044b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10b      	bne.n	80044e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	60fb      	str	r3, [r7, #12]
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	e7fd      	b.n	80044e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	3318      	adds	r3, #24
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe fe3a 	bl	8003164 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004568 <xTaskRemoveFromEventList+0xb0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d11d      	bne.n	8004534 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe fe31 	bl	8003164 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004506:	4b19      	ldr	r3, [pc, #100]	@ (800456c <xTaskRemoveFromEventList+0xb4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d903      	bls.n	8004516 <xTaskRemoveFromEventList+0x5e>
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004512:	4a16      	ldr	r2, [pc, #88]	@ (800456c <xTaskRemoveFromEventList+0xb4>)
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4a13      	ldr	r2, [pc, #76]	@ (8004570 <xTaskRemoveFromEventList+0xb8>)
 8004524:	441a      	add	r2, r3
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	3304      	adds	r3, #4
 800452a:	4619      	mov	r1, r3
 800452c:	4610      	mov	r0, r2
 800452e:	f7fe fdbe 	bl	80030ae <vListInsertEnd>
 8004532:	e005      	b.n	8004540 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	3318      	adds	r3, #24
 8004538:	4619      	mov	r1, r3
 800453a:	480e      	ldr	r0, [pc, #56]	@ (8004574 <xTaskRemoveFromEventList+0xbc>)
 800453c:	f7fe fdb7 	bl	80030ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004544:	4b0c      	ldr	r3, [pc, #48]	@ (8004578 <xTaskRemoveFromEventList+0xc0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454a:	429a      	cmp	r2, r3
 800454c:	d905      	bls.n	800455a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800454e:	2301      	movs	r3, #1
 8004550:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004552:	4b0a      	ldr	r3, [pc, #40]	@ (800457c <xTaskRemoveFromEventList+0xc4>)
 8004554:	2201      	movs	r2, #1
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	e001      	b.n	800455e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800455e:	697b      	ldr	r3, [r7, #20]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000de8 	.word	0x20000de8
 800456c:	20000dc8 	.word	0x20000dc8
 8004570:	200008f0 	.word	0x200008f0
 8004574:	20000d80 	.word	0x20000d80
 8004578:	200008ec 	.word	0x200008ec
 800457c:	20000dd4 	.word	0x20000dd4

08004580 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004588:	4b06      	ldr	r3, [pc, #24]	@ (80045a4 <vTaskInternalSetTimeOutState+0x24>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <vTaskInternalSetTimeOutState+0x28>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	605a      	str	r2, [r3, #4]
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000dd8 	.word	0x20000dd8
 80045a8:	20000dc4 	.word	0x20000dc4

080045ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10b      	bne.n	80045d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	613b      	str	r3, [r7, #16]
}
 80045ce:	bf00      	nop
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	60fb      	str	r3, [r7, #12]
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	e7fd      	b.n	80045ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80045f2:	f000 fe1b 	bl	800522c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045f6:	4b1d      	ldr	r3, [pc, #116]	@ (800466c <xTaskCheckForTimeOut+0xc0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d102      	bne.n	8004616 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004610:	2300      	movs	r3, #0
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	e023      	b.n	800465e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b15      	ldr	r3, [pc, #84]	@ (8004670 <xTaskCheckForTimeOut+0xc4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d007      	beq.n	8004632 <xTaskCheckForTimeOut+0x86>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	429a      	cmp	r2, r3
 800462a:	d302      	bcc.n	8004632 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800462c:	2301      	movs	r3, #1
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	e015      	b.n	800465e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	429a      	cmp	r2, r3
 800463a:	d20b      	bcs.n	8004654 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	1ad2      	subs	r2, r2, r3
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff ff99 	bl	8004580 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	e004      	b.n	800465e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800465a:	2301      	movs	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800465e:	f000 fe15 	bl	800528c <vPortExitCritical>

	return xReturn;
 8004662:	69fb      	ldr	r3, [r7, #28]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3720      	adds	r7, #32
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20000dc4 	.word	0x20000dc4
 8004670:	20000dd8 	.word	0x20000dd8

08004674 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004678:	4b03      	ldr	r3, [pc, #12]	@ (8004688 <vTaskMissedYield+0x14>)
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]
}
 800467e:	bf00      	nop
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000dd4 	.word	0x20000dd4

0800468c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004694:	f000 f852 	bl	800473c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004698:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <prvIdleTask+0x28>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d9f9      	bls.n	8004694 <prvIdleTask+0x8>
			{
				taskYIELD();
 80046a0:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <prvIdleTask+0x2c>)
 80046a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046b0:	e7f0      	b.n	8004694 <prvIdleTask+0x8>
 80046b2:	bf00      	nop
 80046b4:	200008f0 	.word	0x200008f0
 80046b8:	e000ed04 	.word	0xe000ed04

080046bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046c2:	2300      	movs	r3, #0
 80046c4:	607b      	str	r3, [r7, #4]
 80046c6:	e00c      	b.n	80046e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4a12      	ldr	r2, [pc, #72]	@ (800471c <prvInitialiseTaskLists+0x60>)
 80046d4:	4413      	add	r3, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fcbe 	bl	8003058 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3301      	adds	r3, #1
 80046e0:	607b      	str	r3, [r7, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b37      	cmp	r3, #55	@ 0x37
 80046e6:	d9ef      	bls.n	80046c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046e8:	480d      	ldr	r0, [pc, #52]	@ (8004720 <prvInitialiseTaskLists+0x64>)
 80046ea:	f7fe fcb5 	bl	8003058 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046ee:	480d      	ldr	r0, [pc, #52]	@ (8004724 <prvInitialiseTaskLists+0x68>)
 80046f0:	f7fe fcb2 	bl	8003058 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046f4:	480c      	ldr	r0, [pc, #48]	@ (8004728 <prvInitialiseTaskLists+0x6c>)
 80046f6:	f7fe fcaf 	bl	8003058 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046fa:	480c      	ldr	r0, [pc, #48]	@ (800472c <prvInitialiseTaskLists+0x70>)
 80046fc:	f7fe fcac 	bl	8003058 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004700:	480b      	ldr	r0, [pc, #44]	@ (8004730 <prvInitialiseTaskLists+0x74>)
 8004702:	f7fe fca9 	bl	8003058 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004706:	4b0b      	ldr	r3, [pc, #44]	@ (8004734 <prvInitialiseTaskLists+0x78>)
 8004708:	4a05      	ldr	r2, [pc, #20]	@ (8004720 <prvInitialiseTaskLists+0x64>)
 800470a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800470c:	4b0a      	ldr	r3, [pc, #40]	@ (8004738 <prvInitialiseTaskLists+0x7c>)
 800470e:	4a05      	ldr	r2, [pc, #20]	@ (8004724 <prvInitialiseTaskLists+0x68>)
 8004710:	601a      	str	r2, [r3, #0]
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	200008f0 	.word	0x200008f0
 8004720:	20000d50 	.word	0x20000d50
 8004724:	20000d64 	.word	0x20000d64
 8004728:	20000d80 	.word	0x20000d80
 800472c:	20000d94 	.word	0x20000d94
 8004730:	20000dac 	.word	0x20000dac
 8004734:	20000d78 	.word	0x20000d78
 8004738:	20000d7c 	.word	0x20000d7c

0800473c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004742:	e019      	b.n	8004778 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004744:	f000 fd72 	bl	800522c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004748:	4b10      	ldr	r3, [pc, #64]	@ (800478c <prvCheckTasksWaitingTermination+0x50>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe fd05 	bl	8003164 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800475a:	4b0d      	ldr	r3, [pc, #52]	@ (8004790 <prvCheckTasksWaitingTermination+0x54>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3b01      	subs	r3, #1
 8004760:	4a0b      	ldr	r2, [pc, #44]	@ (8004790 <prvCheckTasksWaitingTermination+0x54>)
 8004762:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004764:	4b0b      	ldr	r3, [pc, #44]	@ (8004794 <prvCheckTasksWaitingTermination+0x58>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3b01      	subs	r3, #1
 800476a:	4a0a      	ldr	r2, [pc, #40]	@ (8004794 <prvCheckTasksWaitingTermination+0x58>)
 800476c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800476e:	f000 fd8d 	bl	800528c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f810 	bl	8004798 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004778:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <prvCheckTasksWaitingTermination+0x58>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e1      	bne.n	8004744 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000d94 	.word	0x20000d94
 8004790:	20000dc0 	.word	0x20000dc0
 8004794:	20000da8 	.word	0x20000da8

08004798 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3354      	adds	r3, #84	@ 0x54
 80047a4:	4618      	mov	r0, r3
 80047a6:	f001 f829 	bl	80057fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d108      	bne.n	80047c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 ff01 	bl	80055c0 <vPortFree>
				vPortFree( pxTCB );
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fefe 	bl	80055c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047c4:	e019      	b.n	80047fa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d103      	bne.n	80047d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fef5 	bl	80055c0 <vPortFree>
	}
 80047d6:	e010      	b.n	80047fa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d00b      	beq.n	80047fa <prvDeleteTCB+0x62>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	60fb      	str	r3, [r7, #12]
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	e7fd      	b.n	80047f6 <prvDeleteTCB+0x5e>
	}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800480a:	4b0e      	ldr	r3, [pc, #56]	@ (8004844 <prvResetNextTaskUnblockTime+0x40>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <prvResetNextTaskUnblockTime+0x14>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <prvResetNextTaskUnblockTime+0x16>
 8004818:	2300      	movs	r3, #0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d004      	beq.n	8004828 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800481e:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <prvResetNextTaskUnblockTime+0x44>)
 8004820:	f04f 32ff 	mov.w	r2, #4294967295
 8004824:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004826:	e008      	b.n	800483a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004828:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <prvResetNextTaskUnblockTime+0x40>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4a04      	ldr	r2, [pc, #16]	@ (8004848 <prvResetNextTaskUnblockTime+0x44>)
 8004838:	6013      	str	r3, [r2, #0]
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr
 8004844:	20000d78 	.word	0x20000d78
 8004848:	20000de0 	.word	0x20000de0

0800484c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004852:	4b0b      	ldr	r3, [pc, #44]	@ (8004880 <xTaskGetSchedulerState+0x34>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800485a:	2301      	movs	r3, #1
 800485c:	607b      	str	r3, [r7, #4]
 800485e:	e008      	b.n	8004872 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004860:	4b08      	ldr	r3, [pc, #32]	@ (8004884 <xTaskGetSchedulerState+0x38>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d102      	bne.n	800486e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004868:	2302      	movs	r3, #2
 800486a:	607b      	str	r3, [r7, #4]
 800486c:	e001      	b.n	8004872 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800486e:	2300      	movs	r3, #0
 8004870:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004872:	687b      	ldr	r3, [r7, #4]
	}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000dcc 	.word	0x20000dcc
 8004884:	20000de8 	.word	0x20000de8

08004888 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d058      	beq.n	8004950 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800489e:	4b2f      	ldr	r3, [pc, #188]	@ (800495c <xTaskPriorityDisinherit+0xd4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d00b      	beq.n	80048c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	60fb      	str	r3, [r7, #12]
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	e7fd      	b.n	80048bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	60bb      	str	r3, [r7, #8]
}
 80048da:	bf00      	nop
 80048dc:	bf00      	nop
 80048de:	e7fd      	b.n	80048dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e4:	1e5a      	subs	r2, r3, #1
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d02c      	beq.n	8004950 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d128      	bne.n	8004950 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	3304      	adds	r3, #4
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe fc2e 	bl	8003164 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004920:	4b0f      	ldr	r3, [pc, #60]	@ (8004960 <xTaskPriorityDisinherit+0xd8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d903      	bls.n	8004930 <xTaskPriorityDisinherit+0xa8>
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	4a0c      	ldr	r2, [pc, #48]	@ (8004960 <xTaskPriorityDisinherit+0xd8>)
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4a09      	ldr	r2, [pc, #36]	@ (8004964 <xTaskPriorityDisinherit+0xdc>)
 800493e:	441a      	add	r2, r3
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	3304      	adds	r3, #4
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f7fe fbb1 	bl	80030ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004950:	697b      	ldr	r3, [r7, #20]
	}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	200008ec 	.word	0x200008ec
 8004960:	20000dc8 	.word	0x20000dc8
 8004964:	200008f0 	.word	0x200008f0

08004968 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004972:	4b21      	ldr	r3, [pc, #132]	@ (80049f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004978:	4b20      	ldr	r3, [pc, #128]	@ (80049fc <prvAddCurrentTaskToDelayedList+0x94>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3304      	adds	r3, #4
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe fbf0 	bl	8003164 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	d10a      	bne.n	80049a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004992:	4b1a      	ldr	r3, [pc, #104]	@ (80049fc <prvAddCurrentTaskToDelayedList+0x94>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4819      	ldr	r0, [pc, #100]	@ (8004a00 <prvAddCurrentTaskToDelayedList+0x98>)
 800499c:	f7fe fb87 	bl	80030ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049a0:	e026      	b.n	80049f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4413      	add	r3, r2
 80049a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049aa:	4b14      	ldr	r3, [pc, #80]	@ (80049fc <prvAddCurrentTaskToDelayedList+0x94>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d209      	bcs.n	80049ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049ba:	4b12      	ldr	r3, [pc, #72]	@ (8004a04 <prvAddCurrentTaskToDelayedList+0x9c>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b0f      	ldr	r3, [pc, #60]	@ (80049fc <prvAddCurrentTaskToDelayedList+0x94>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f7fe fb94 	bl	80030f4 <vListInsert>
}
 80049cc:	e010      	b.n	80049f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004a08 <prvAddCurrentTaskToDelayedList+0xa0>)
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b0a      	ldr	r3, [pc, #40]	@ (80049fc <prvAddCurrentTaskToDelayedList+0x94>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f7fe fb8a 	bl	80030f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049e0:	4b0a      	ldr	r3, [pc, #40]	@ (8004a0c <prvAddCurrentTaskToDelayedList+0xa4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d202      	bcs.n	80049f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049ea:	4a08      	ldr	r2, [pc, #32]	@ (8004a0c <prvAddCurrentTaskToDelayedList+0xa4>)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	6013      	str	r3, [r2, #0]
}
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000dc4 	.word	0x20000dc4
 80049fc:	200008ec 	.word	0x200008ec
 8004a00:	20000dac 	.word	0x20000dac
 8004a04:	20000d7c 	.word	0x20000d7c
 8004a08:	20000d78 	.word	0x20000d78
 8004a0c:	20000de0 	.word	0x20000de0

08004a10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	@ 0x28
 8004a14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a1a:	f000 fad9 	bl	8004fd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004a94 <xTimerCreateTimerTask+0x84>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d021      	beq.n	8004a6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a2e:	1d3a      	adds	r2, r7, #4
 8004a30:	f107 0108 	add.w	r1, r7, #8
 8004a34:	f107 030c 	add.w	r3, r7, #12
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe faf3 	bl	8003024 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	9202      	str	r2, [sp, #8]
 8004a46:	9301      	str	r3, [sp, #4]
 8004a48:	2302      	movs	r3, #2
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	460a      	mov	r2, r1
 8004a50:	4911      	ldr	r1, [pc, #68]	@ (8004a98 <xTimerCreateTimerTask+0x88>)
 8004a52:	4812      	ldr	r0, [pc, #72]	@ (8004a9c <xTimerCreateTimerTask+0x8c>)
 8004a54:	f7ff f8a6 	bl	8003ba4 <xTaskCreateStatic>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	4a11      	ldr	r2, [pc, #68]	@ (8004aa0 <xTimerCreateTimerTask+0x90>)
 8004a5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a5e:	4b10      	ldr	r3, [pc, #64]	@ (8004aa0 <xTimerCreateTimerTask+0x90>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a66:	2301      	movs	r3, #1
 8004a68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	613b      	str	r3, [r7, #16]
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a88:	697b      	ldr	r3, [r7, #20]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000e1c 	.word	0x20000e1c
 8004a98:	080059e4 	.word	0x080059e4
 8004a9c:	08004bc5 	.word	0x08004bc5
 8004aa0:	20000e20 	.word	0x20000e20

08004aa4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08a      	sub	sp, #40	@ 0x28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10b      	bne.n	8004ad4 <xTimerGenericCommand+0x30>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	623b      	str	r3, [r7, #32]
}
 8004ace:	bf00      	nop
 8004ad0:	bf00      	nop
 8004ad2:	e7fd      	b.n	8004ad0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ad4:	4b19      	ldr	r3, [pc, #100]	@ (8004b3c <xTimerGenericCommand+0x98>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d02a      	beq.n	8004b32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b05      	cmp	r3, #5
 8004aec:	dc18      	bgt.n	8004b20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004aee:	f7ff fead 	bl	800484c <xTaskGetSchedulerState>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d109      	bne.n	8004b0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004af8:	4b10      	ldr	r3, [pc, #64]	@ (8004b3c <xTimerGenericCommand+0x98>)
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	f107 0110 	add.w	r1, r7, #16
 8004b00:	2300      	movs	r3, #0
 8004b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b04:	f7fe fc62 	bl	80033cc <xQueueGenericSend>
 8004b08:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b0a:	e012      	b.n	8004b32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <xTimerGenericCommand+0x98>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	f107 0110 	add.w	r1, r7, #16
 8004b14:	2300      	movs	r3, #0
 8004b16:	2200      	movs	r2, #0
 8004b18:	f7fe fc58 	bl	80033cc <xQueueGenericSend>
 8004b1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b1e:	e008      	b.n	8004b32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b20:	4b06      	ldr	r3, [pc, #24]	@ (8004b3c <xTimerGenericCommand+0x98>)
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	f107 0110 	add.w	r1, r7, #16
 8004b28:	2300      	movs	r3, #0
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	f7fe fd50 	bl	80035d0 <xQueueGenericSendFromISR>
 8004b30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3728      	adds	r7, #40	@ 0x28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000e1c 	.word	0x20000e1c

08004b40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc0 <prvProcessExpiredTimer+0x80>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	3304      	adds	r3, #4
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fe fb03 	bl	8003164 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d123      	bne.n	8004bae <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	18d1      	adds	r1, r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	6978      	ldr	r0, [r7, #20]
 8004b74:	f000 f8cc 	bl	8004d10 <prvInsertTimerInActiveList>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d017      	beq.n	8004bae <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b7e:	2300      	movs	r3, #0
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	2300      	movs	r3, #0
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	2100      	movs	r1, #0
 8004b88:	6978      	ldr	r0, [r7, #20]
 8004b8a:	f7ff ff8b 	bl	8004aa4 <xTimerGenericCommand>
 8004b8e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10b      	bne.n	8004bae <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	60fb      	str	r3, [r7, #12]
}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	e7fd      	b.n	8004baa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	6978      	ldr	r0, [r7, #20]
 8004bb4:	4798      	blx	r3
}
 8004bb6:	bf00      	nop
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000e14 	.word	0x20000e14

08004bc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bcc:	f107 0308 	add.w	r3, r7, #8
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 f859 	bl	8004c88 <prvGetNextExpireTime>
 8004bd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f805 	bl	8004bec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004be2:	f000 f8d7 	bl	8004d94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004be6:	bf00      	nop
 8004be8:	e7f0      	b.n	8004bcc <prvTimerTask+0x8>
	...

08004bec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bf6:	f7ff fa2f 	bl	8004058 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bfa:	f107 0308 	add.w	r3, r7, #8
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f866 	bl	8004cd0 <prvSampleTimeNow>
 8004c04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d130      	bne.n	8004c6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <prvProcessTimerOrBlockTask+0x3c>
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d806      	bhi.n	8004c28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c1a:	f7ff fa2b 	bl	8004074 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c1e:	68f9      	ldr	r1, [r7, #12]
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff ff8d 	bl	8004b40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c26:	e024      	b.n	8004c72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d008      	beq.n	8004c40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c2e:	4b13      	ldr	r3, [pc, #76]	@ (8004c7c <prvProcessTimerOrBlockTask+0x90>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bf0c      	ite	eq
 8004c38:	2301      	moveq	r3, #1
 8004c3a:	2300      	movne	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c40:	4b0f      	ldr	r3, [pc, #60]	@ (8004c80 <prvProcessTimerOrBlockTask+0x94>)
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	f7fe ff75 	bl	8003b3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c52:	f7ff fa0f 	bl	8004074 <xTaskResumeAll>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c5c:	4b09      	ldr	r3, [pc, #36]	@ (8004c84 <prvProcessTimerOrBlockTask+0x98>)
 8004c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	f3bf 8f6f 	isb	sy
}
 8004c6c:	e001      	b.n	8004c72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c6e:	f7ff fa01 	bl	8004074 <xTaskResumeAll>
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000e18 	.word	0x20000e18
 8004c80:	20000e1c 	.word	0x20000e1c
 8004c84:	e000ed04 	.word	0xe000ed04

08004c88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c90:	4b0e      	ldr	r3, [pc, #56]	@ (8004ccc <prvGetNextExpireTime+0x44>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bf0c      	ite	eq
 8004c9a:	2301      	moveq	r3, #1
 8004c9c:	2300      	movne	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d105      	bne.n	8004cba <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cae:	4b07      	ldr	r3, [pc, #28]	@ (8004ccc <prvGetNextExpireTime+0x44>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	e001      	b.n	8004cbe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20000e14 	.word	0x20000e14

08004cd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cd8:	f7ff fa6a 	bl	80041b0 <xTaskGetTickCount>
 8004cdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cde:	4b0b      	ldr	r3, [pc, #44]	@ (8004d0c <prvSampleTimeNow+0x3c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d205      	bcs.n	8004cf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ce8:	f000 f910 	bl	8004f0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e002      	b.n	8004cfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cfa:	4a04      	ldr	r2, [pc, #16]	@ (8004d0c <prvSampleTimeNow+0x3c>)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d00:	68fb      	ldr	r3, [r7, #12]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000e24 	.word	0x20000e24

08004d10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d812      	bhi.n	8004d5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	1ad2      	subs	r2, r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d302      	bcc.n	8004d4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d44:	2301      	movs	r3, #1
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	e01b      	b.n	8004d82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d4a:	4b10      	ldr	r3, [pc, #64]	@ (8004d8c <prvInsertTimerInActiveList+0x7c>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4619      	mov	r1, r3
 8004d54:	4610      	mov	r0, r2
 8004d56:	f7fe f9cd 	bl	80030f4 <vListInsert>
 8004d5a:	e012      	b.n	8004d82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d206      	bcs.n	8004d72 <prvInsertTimerInActiveList+0x62>
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d302      	bcc.n	8004d72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	e007      	b.n	8004d82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d72:	4b07      	ldr	r3, [pc, #28]	@ (8004d90 <prvInsertTimerInActiveList+0x80>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	f7fe f9b9 	bl	80030f4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d82:	697b      	ldr	r3, [r7, #20]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20000e18 	.word	0x20000e18
 8004d90:	20000e14 	.word	0x20000e14

08004d94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08e      	sub	sp, #56	@ 0x38
 8004d98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d9a:	e0a5      	b.n	8004ee8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	da19      	bge.n	8004dd6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004da2:	1d3b      	adds	r3, r7, #4
 8004da4:	3304      	adds	r3, #4
 8004da6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10b      	bne.n	8004dc6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	61fb      	str	r3, [r7, #28]
}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	e7fd      	b.n	8004dc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dcc:	6850      	ldr	r0, [r2, #4]
 8004dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dd0:	6892      	ldr	r2, [r2, #8]
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f2c0 8085 	blt.w	8004ee8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d004      	beq.n	8004df4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dec:	3304      	adds	r3, #4
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fe f9b8 	bl	8003164 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004df4:	463b      	mov	r3, r7
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff ff6a 	bl	8004cd0 <prvSampleTimeNow>
 8004dfc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b09      	cmp	r3, #9
 8004e02:	d86c      	bhi.n	8004ede <prvProcessReceivedCommands+0x14a>
 8004e04:	a201      	add	r2, pc, #4	@ (adr r2, 8004e0c <prvProcessReceivedCommands+0x78>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	08004e35 	.word	0x08004e35
 8004e14:	08004e35 	.word	0x08004e35
 8004e18:	08004edf 	.word	0x08004edf
 8004e1c:	08004e93 	.word	0x08004e93
 8004e20:	08004ecd 	.word	0x08004ecd
 8004e24:	08004e35 	.word	0x08004e35
 8004e28:	08004e35 	.word	0x08004e35
 8004e2c:	08004edf 	.word	0x08004edf
 8004e30:	08004e93 	.word	0x08004e93
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	18d1      	adds	r1, r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e42:	f7ff ff65 	bl	8004d10 <prvInsertTimerInActiveList>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d04a      	beq.n	8004ee2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e52:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d142      	bne.n	8004ee2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	441a      	add	r2, r3
 8004e64:	2300      	movs	r3, #0
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e6e:	f7ff fe19 	bl	8004aa4 <xTimerGenericCommand>
 8004e72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d133      	bne.n	8004ee2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	61bb      	str	r3, [r7, #24]
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	e7fd      	b.n	8004e8e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	617b      	str	r3, [r7, #20]
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	e7fd      	b.n	8004eb4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eba:	699a      	ldr	r2, [r3, #24]
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	18d1      	adds	r1, r2, r3
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ec6:	f7ff ff23 	bl	8004d10 <prvInsertTimerInActiveList>
					break;
 8004eca:	e00d      	b.n	8004ee8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ece:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d107      	bne.n	8004ee6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8004ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ed8:	f000 fb72 	bl	80055c0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004edc:	e003      	b.n	8004ee6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8004ede:	bf00      	nop
 8004ee0:	e002      	b.n	8004ee8 <prvProcessReceivedCommands+0x154>
					break;
 8004ee2:	bf00      	nop
 8004ee4:	e000      	b.n	8004ee8 <prvProcessReceivedCommands+0x154>
					break;
 8004ee6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ee8:	4b07      	ldr	r3, [pc, #28]	@ (8004f08 <prvProcessReceivedCommands+0x174>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	1d39      	adds	r1, r7, #4
 8004eee:	2200      	movs	r2, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe fc09 	bl	8003708 <xQueueReceive>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f47f af4f 	bne.w	8004d9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004efe:	bf00      	nop
 8004f00:	bf00      	nop
 8004f02:	3730      	adds	r7, #48	@ 0x30
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20000e1c 	.word	0x20000e1c

08004f0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f12:	e046      	b.n	8004fa2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f14:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc8 <prvSwitchTimerLists+0xbc>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc8 <prvSwitchTimerLists+0xbc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe f919 	bl	8003164 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d12f      	bne.n	8004fa2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d90e      	bls.n	8004f72 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f60:	4b19      	ldr	r3, [pc, #100]	@ (8004fc8 <prvSwitchTimerLists+0xbc>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3304      	adds	r3, #4
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f7fe f8c2 	bl	80030f4 <vListInsert>
 8004f70:	e017      	b.n	8004fa2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f72:	2300      	movs	r3, #0
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	2300      	movs	r3, #0
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f7ff fd91 	bl	8004aa4 <xTimerGenericCommand>
 8004f82:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10b      	bne.n	8004fa2 <prvSwitchTimerLists+0x96>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	603b      	str	r3, [r7, #0]
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	e7fd      	b.n	8004f9e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fa2:	4b09      	ldr	r3, [pc, #36]	@ (8004fc8 <prvSwitchTimerLists+0xbc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1b3      	bne.n	8004f14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fac:	4b06      	ldr	r3, [pc, #24]	@ (8004fc8 <prvSwitchTimerLists+0xbc>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fb2:	4b06      	ldr	r3, [pc, #24]	@ (8004fcc <prvSwitchTimerLists+0xc0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a04      	ldr	r2, [pc, #16]	@ (8004fc8 <prvSwitchTimerLists+0xbc>)
 8004fb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004fba:	4a04      	ldr	r2, [pc, #16]	@ (8004fcc <prvSwitchTimerLists+0xc0>)
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	6013      	str	r3, [r2, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20000e14 	.word	0x20000e14
 8004fcc:	20000e18 	.word	0x20000e18

08004fd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fd6:	f000 f929 	bl	800522c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fda:	4b15      	ldr	r3, [pc, #84]	@ (8005030 <prvCheckForValidListAndQueue+0x60>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d120      	bne.n	8005024 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004fe2:	4814      	ldr	r0, [pc, #80]	@ (8005034 <prvCheckForValidListAndQueue+0x64>)
 8004fe4:	f7fe f838 	bl	8003058 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fe8:	4813      	ldr	r0, [pc, #76]	@ (8005038 <prvCheckForValidListAndQueue+0x68>)
 8004fea:	f7fe f835 	bl	8003058 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fee:	4b13      	ldr	r3, [pc, #76]	@ (800503c <prvCheckForValidListAndQueue+0x6c>)
 8004ff0:	4a10      	ldr	r2, [pc, #64]	@ (8005034 <prvCheckForValidListAndQueue+0x64>)
 8004ff2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ff4:	4b12      	ldr	r3, [pc, #72]	@ (8005040 <prvCheckForValidListAndQueue+0x70>)
 8004ff6:	4a10      	ldr	r2, [pc, #64]	@ (8005038 <prvCheckForValidListAndQueue+0x68>)
 8004ff8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	4b11      	ldr	r3, [pc, #68]	@ (8005044 <prvCheckForValidListAndQueue+0x74>)
 8005000:	4a11      	ldr	r2, [pc, #68]	@ (8005048 <prvCheckForValidListAndQueue+0x78>)
 8005002:	2110      	movs	r1, #16
 8005004:	200a      	movs	r0, #10
 8005006:	f7fe f941 	bl	800328c <xQueueGenericCreateStatic>
 800500a:	4603      	mov	r3, r0
 800500c:	4a08      	ldr	r2, [pc, #32]	@ (8005030 <prvCheckForValidListAndQueue+0x60>)
 800500e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005010:	4b07      	ldr	r3, [pc, #28]	@ (8005030 <prvCheckForValidListAndQueue+0x60>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005018:	4b05      	ldr	r3, [pc, #20]	@ (8005030 <prvCheckForValidListAndQueue+0x60>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	490b      	ldr	r1, [pc, #44]	@ (800504c <prvCheckForValidListAndQueue+0x7c>)
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fd64 	bl	8003aec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005024:	f000 f932 	bl	800528c <vPortExitCritical>
}
 8005028:	bf00      	nop
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000e1c 	.word	0x20000e1c
 8005034:	20000dec 	.word	0x20000dec
 8005038:	20000e00 	.word	0x20000e00
 800503c:	20000e14 	.word	0x20000e14
 8005040:	20000e18 	.word	0x20000e18
 8005044:	20000ec8 	.word	0x20000ec8
 8005048:	20000e28 	.word	0x20000e28
 800504c:	080059ec 	.word	0x080059ec

08005050 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3b04      	subs	r3, #4
 8005060:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3b04      	subs	r3, #4
 800506e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f023 0201 	bic.w	r2, r3, #1
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3b04      	subs	r3, #4
 800507e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005080:	4a08      	ldr	r2, [pc, #32]	@ (80050a4 <pxPortInitialiseStack+0x54>)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3b14      	subs	r3, #20
 800508a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3b20      	subs	r3, #32
 8005096:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005098:	68fb      	ldr	r3, [r7, #12]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr
 80050a4:	080050a9 	.word	0x080050a9

080050a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050b2:	4b12      	ldr	r3, [pc, #72]	@ (80050fc <prvTaskExitError+0x54>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ba:	d00b      	beq.n	80050d4 <prvTaskExitError+0x2c>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	60fb      	str	r3, [r7, #12]
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <prvTaskExitError+0x28>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	60bb      	str	r3, [r7, #8]
}
 80050e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050e8:	bf00      	nop
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0fc      	beq.n	80050ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	2000000c 	.word	0x2000000c

08005100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005100:	4b07      	ldr	r3, [pc, #28]	@ (8005120 <pxCurrentTCBConst2>)
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	6808      	ldr	r0, [r1, #0]
 8005106:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800510a:	f380 8809 	msr	PSP, r0
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f380 8811 	msr	BASEPRI, r0
 800511a:	f04e 0e0d 	orr.w	lr, lr, #13
 800511e:	4770      	bx	lr

08005120 <pxCurrentTCBConst2>:
 8005120:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop

08005128 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005128:	4806      	ldr	r0, [pc, #24]	@ (8005144 <prvPortStartFirstTask+0x1c>)
 800512a:	6800      	ldr	r0, [r0, #0]
 800512c:	6800      	ldr	r0, [r0, #0]
 800512e:	f380 8808 	msr	MSP, r0
 8005132:	b662      	cpsie	i
 8005134:	b661      	cpsie	f
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	df00      	svc	0
 8005140:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005142:	bf00      	nop
 8005144:	e000ed08 	.word	0xe000ed08

08005148 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800514e:	4b32      	ldr	r3, [pc, #200]	@ (8005218 <xPortStartScheduler+0xd0>)
 8005150:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	22ff      	movs	r2, #255	@ 0xff
 800515e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005168:	78fb      	ldrb	r3, [r7, #3]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005170:	b2da      	uxtb	r2, r3
 8005172:	4b2a      	ldr	r3, [pc, #168]	@ (800521c <xPortStartScheduler+0xd4>)
 8005174:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005176:	4b2a      	ldr	r3, [pc, #168]	@ (8005220 <xPortStartScheduler+0xd8>)
 8005178:	2207      	movs	r2, #7
 800517a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800517c:	e009      	b.n	8005192 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800517e:	4b28      	ldr	r3, [pc, #160]	@ (8005220 <xPortStartScheduler+0xd8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3b01      	subs	r3, #1
 8005184:	4a26      	ldr	r2, [pc, #152]	@ (8005220 <xPortStartScheduler+0xd8>)
 8005186:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519a:	2b80      	cmp	r3, #128	@ 0x80
 800519c:	d0ef      	beq.n	800517e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800519e:	4b20      	ldr	r3, [pc, #128]	@ (8005220 <xPortStartScheduler+0xd8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f1c3 0307 	rsb	r3, r3, #7
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d00b      	beq.n	80051c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	60bb      	str	r3, [r7, #8]
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051c2:	4b17      	ldr	r3, [pc, #92]	@ (8005220 <xPortStartScheduler+0xd8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	4a15      	ldr	r2, [pc, #84]	@ (8005220 <xPortStartScheduler+0xd8>)
 80051ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051cc:	4b14      	ldr	r3, [pc, #80]	@ (8005220 <xPortStartScheduler+0xd8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051d4:	4a12      	ldr	r2, [pc, #72]	@ (8005220 <xPortStartScheduler+0xd8>)
 80051d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051e0:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <xPortStartScheduler+0xdc>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005224 <xPortStartScheduler+0xdc>)
 80051e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <xPortStartScheduler+0xdc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005224 <xPortStartScheduler+0xdc>)
 80051f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80051f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051f8:	f000 f8b8 	bl	800536c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <xPortStartScheduler+0xe0>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005202:	f7ff ff91 	bl	8005128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005206:	f7ff f8a1 	bl	800434c <vTaskSwitchContext>
	prvTaskExitError();
 800520a:	f7ff ff4d 	bl	80050a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	e000e400 	.word	0xe000e400
 800521c:	20000f18 	.word	0x20000f18
 8005220:	20000f1c 	.word	0x20000f1c
 8005224:	e000ed20 	.word	0xe000ed20
 8005228:	2000000c 	.word	0x2000000c

0800522c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	607b      	str	r3, [r7, #4]
}
 8005244:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005246:	4b0f      	ldr	r3, [pc, #60]	@ (8005284 <vPortEnterCritical+0x58>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3301      	adds	r3, #1
 800524c:	4a0d      	ldr	r2, [pc, #52]	@ (8005284 <vPortEnterCritical+0x58>)
 800524e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005250:	4b0c      	ldr	r3, [pc, #48]	@ (8005284 <vPortEnterCritical+0x58>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d110      	bne.n	800527a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005258:	4b0b      	ldr	r3, [pc, #44]	@ (8005288 <vPortEnterCritical+0x5c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <vPortEnterCritical+0x4e>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	603b      	str	r3, [r7, #0]
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	e7fd      	b.n	8005276 <vPortEnterCritical+0x4a>
	}
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr
 8005284:	2000000c 	.word	0x2000000c
 8005288:	e000ed04 	.word	0xe000ed04

0800528c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005292:	4b12      	ldr	r3, [pc, #72]	@ (80052dc <vPortExitCritical+0x50>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10b      	bne.n	80052b2 <vPortExitCritical+0x26>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	607b      	str	r3, [r7, #4]
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	e7fd      	b.n	80052ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052b2:	4b0a      	ldr	r3, [pc, #40]	@ (80052dc <vPortExitCritical+0x50>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	4a08      	ldr	r2, [pc, #32]	@ (80052dc <vPortExitCritical+0x50>)
 80052ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052bc:	4b07      	ldr	r3, [pc, #28]	@ (80052dc <vPortExitCritical+0x50>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d105      	bne.n	80052d0 <vPortExitCritical+0x44>
 80052c4:	2300      	movs	r3, #0
 80052c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f383 8811 	msr	BASEPRI, r3
}
 80052ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	2000000c 	.word	0x2000000c

080052e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052e0:	f3ef 8009 	mrs	r0, PSP
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005320 <pxCurrentTCBConst>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052f0:	6010      	str	r0, [r2, #0]
 80052f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80052f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052fa:	f380 8811 	msr	BASEPRI, r0
 80052fe:	f7ff f825 	bl	800434c <vTaskSwitchContext>
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	f380 8811 	msr	BASEPRI, r0
 800530a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800530e:	6819      	ldr	r1, [r3, #0]
 8005310:	6808      	ldr	r0, [r1, #0]
 8005312:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005316:	f380 8809 	msr	PSP, r0
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	4770      	bx	lr

08005320 <pxCurrentTCBConst>:
 8005320:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop

08005328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	607b      	str	r3, [r7, #4]
}
 8005340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005342:	f7fe ff43 	bl	80041cc <xTaskIncrementTick>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800534c:	4b06      	ldr	r3, [pc, #24]	@ (8005368 <SysTick_Handler+0x40>)
 800534e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f383 8811 	msr	BASEPRI, r3
}
 800535e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005370:	4b0a      	ldr	r3, [pc, #40]	@ (800539c <vPortSetupTimerInterrupt+0x30>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005376:	4b0a      	ldr	r3, [pc, #40]	@ (80053a0 <vPortSetupTimerInterrupt+0x34>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800537c:	4b09      	ldr	r3, [pc, #36]	@ (80053a4 <vPortSetupTimerInterrupt+0x38>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a09      	ldr	r2, [pc, #36]	@ (80053a8 <vPortSetupTimerInterrupt+0x3c>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	099b      	lsrs	r3, r3, #6
 8005388:	4a08      	ldr	r2, [pc, #32]	@ (80053ac <vPortSetupTimerInterrupt+0x40>)
 800538a:	3b01      	subs	r3, #1
 800538c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800538e:	4b03      	ldr	r3, [pc, #12]	@ (800539c <vPortSetupTimerInterrupt+0x30>)
 8005390:	2207      	movs	r2, #7
 8005392:	601a      	str	r2, [r3, #0]
}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr
 800539c:	e000e010 	.word	0xe000e010
 80053a0:	e000e018 	.word	0xe000e018
 80053a4:	20000000 	.word	0x20000000
 80053a8:	10624dd3 	.word	0x10624dd3
 80053ac:	e000e014 	.word	0xe000e014

080053b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80053b6:	f3ef 8305 	mrs	r3, IPSR
 80053ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b0f      	cmp	r3, #15
 80053c0:	d915      	bls.n	80053ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053c2:	4a17      	ldr	r2, [pc, #92]	@ (8005420 <vPortValidateInterruptPriority+0x70>)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053cc:	4b15      	ldr	r3, [pc, #84]	@ (8005424 <vPortValidateInterruptPriority+0x74>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	7afa      	ldrb	r2, [r7, #11]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d20b      	bcs.n	80053ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	607b      	str	r3, [r7, #4]
}
 80053e8:	bf00      	nop
 80053ea:	bf00      	nop
 80053ec:	e7fd      	b.n	80053ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005428 <vPortValidateInterruptPriority+0x78>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80053f6:	4b0d      	ldr	r3, [pc, #52]	@ (800542c <vPortValidateInterruptPriority+0x7c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d90b      	bls.n	8005416 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	603b      	str	r3, [r7, #0]
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <vPortValidateInterruptPriority+0x62>
	}
 8005416:	bf00      	nop
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr
 8005420:	e000e3f0 	.word	0xe000e3f0
 8005424:	20000f18 	.word	0x20000f18
 8005428:	e000ed0c 	.word	0xe000ed0c
 800542c:	20000f1c 	.word	0x20000f1c

08005430 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	@ 0x28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005438:	2300      	movs	r3, #0
 800543a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800543c:	f7fe fe0c 	bl	8004058 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005440:	4b5a      	ldr	r3, [pc, #360]	@ (80055ac <pvPortMalloc+0x17c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005448:	f000 f916 	bl	8005678 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800544c:	4b58      	ldr	r3, [pc, #352]	@ (80055b0 <pvPortMalloc+0x180>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	f040 8090 	bne.w	800557a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01e      	beq.n	800549e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005460:	2208      	movs	r2, #8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4413      	add	r3, r2
 8005466:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	2b00      	cmp	r3, #0
 8005470:	d015      	beq.n	800549e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f023 0307 	bic.w	r3, r3, #7
 8005478:	3308      	adds	r3, #8
 800547a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <pvPortMalloc+0x6e>
	__asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	617b      	str	r3, [r7, #20]
}
 8005498:	bf00      	nop
 800549a:	bf00      	nop
 800549c:	e7fd      	b.n	800549a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d06a      	beq.n	800557a <pvPortMalloc+0x14a>
 80054a4:	4b43      	ldr	r3, [pc, #268]	@ (80055b4 <pvPortMalloc+0x184>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d865      	bhi.n	800557a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054ae:	4b42      	ldr	r3, [pc, #264]	@ (80055b8 <pvPortMalloc+0x188>)
 80054b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054b2:	4b41      	ldr	r3, [pc, #260]	@ (80055b8 <pvPortMalloc+0x188>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054b8:	e004      	b.n	80054c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d903      	bls.n	80054d6 <pvPortMalloc+0xa6>
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f1      	bne.n	80054ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054d6:	4b35      	ldr	r3, [pc, #212]	@ (80055ac <pvPortMalloc+0x17c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054dc:	429a      	cmp	r2, r3
 80054de:	d04c      	beq.n	800557a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2208      	movs	r2, #8
 80054e6:	4413      	add	r3, r2
 80054e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	1ad2      	subs	r2, r2, r3
 80054fa:	2308      	movs	r3, #8
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	429a      	cmp	r2, r3
 8005500:	d920      	bls.n	8005544 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4413      	add	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00b      	beq.n	800552c <pvPortMalloc+0xfc>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	613b      	str	r3, [r7, #16]
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	1ad2      	subs	r2, r2, r3
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800553e:	69b8      	ldr	r0, [r7, #24]
 8005540:	f000 f8fc 	bl	800573c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005544:	4b1b      	ldr	r3, [pc, #108]	@ (80055b4 <pvPortMalloc+0x184>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	4a19      	ldr	r2, [pc, #100]	@ (80055b4 <pvPortMalloc+0x184>)
 8005550:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005552:	4b18      	ldr	r3, [pc, #96]	@ (80055b4 <pvPortMalloc+0x184>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4b19      	ldr	r3, [pc, #100]	@ (80055bc <pvPortMalloc+0x18c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d203      	bcs.n	8005566 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800555e:	4b15      	ldr	r3, [pc, #84]	@ (80055b4 <pvPortMalloc+0x184>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a16      	ldr	r2, [pc, #88]	@ (80055bc <pvPortMalloc+0x18c>)
 8005564:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	4b11      	ldr	r3, [pc, #68]	@ (80055b0 <pvPortMalloc+0x180>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	431a      	orrs	r2, r3
 8005570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005572:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800557a:	f7fe fd7b 	bl	8004074 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <pvPortMalloc+0x170>
	__asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	60fb      	str	r3, [r7, #12]
}
 800559a:	bf00      	nop
 800559c:	bf00      	nop
 800559e:	e7fd      	b.n	800559c <pvPortMalloc+0x16c>
	return pvReturn;
 80055a0:	69fb      	ldr	r3, [r7, #28]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3728      	adds	r7, #40	@ 0x28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	20001b28 	.word	0x20001b28
 80055b0:	20001b34 	.word	0x20001b34
 80055b4:	20001b2c 	.word	0x20001b2c
 80055b8:	20001b20 	.word	0x20001b20
 80055bc:	20001b30 	.word	0x20001b30

080055c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d04a      	beq.n	8005668 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055d2:	2308      	movs	r3, #8
 80055d4:	425b      	negs	r3, r3
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4413      	add	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	4b22      	ldr	r3, [pc, #136]	@ (8005670 <vPortFree+0xb0>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10b      	bne.n	8005606 <vPortFree+0x46>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	60fb      	str	r3, [r7, #12]
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	e7fd      	b.n	8005602 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <vPortFree+0x66>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	60bb      	str	r3, [r7, #8]
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	e7fd      	b.n	8005622 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	4b11      	ldr	r3, [pc, #68]	@ (8005670 <vPortFree+0xb0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d019      	beq.n	8005668 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d115      	bne.n	8005668 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	4b0b      	ldr	r3, [pc, #44]	@ (8005670 <vPortFree+0xb0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	43db      	mvns	r3, r3
 8005646:	401a      	ands	r2, r3
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800564c:	f7fe fd04 	bl	8004058 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	4b07      	ldr	r3, [pc, #28]	@ (8005674 <vPortFree+0xb4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4413      	add	r3, r2
 800565a:	4a06      	ldr	r2, [pc, #24]	@ (8005674 <vPortFree+0xb4>)
 800565c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800565e:	6938      	ldr	r0, [r7, #16]
 8005660:	f000 f86c 	bl	800573c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005664:	f7fe fd06 	bl	8004074 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005668:	bf00      	nop
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	20001b34 	.word	0x20001b34
 8005674:	20001b2c 	.word	0x20001b2c

08005678 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800567e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005682:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005684:	4b27      	ldr	r3, [pc, #156]	@ (8005724 <prvHeapInit+0xac>)
 8005686:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00c      	beq.n	80056ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3307      	adds	r3, #7
 8005696:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0307 	bic.w	r3, r3, #7
 800569e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	4a1f      	ldr	r2, [pc, #124]	@ (8005724 <prvHeapInit+0xac>)
 80056a8:	4413      	add	r3, r2
 80056aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005728 <prvHeapInit+0xb0>)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005728 <prvHeapInit+0xb0>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	4413      	add	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056c4:	2208      	movs	r2, #8
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0307 	bic.w	r3, r3, #7
 80056d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4a15      	ldr	r2, [pc, #84]	@ (800572c <prvHeapInit+0xb4>)
 80056d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056da:	4b14      	ldr	r3, [pc, #80]	@ (800572c <prvHeapInit+0xb4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056e2:	4b12      	ldr	r3, [pc, #72]	@ (800572c <prvHeapInit+0xb4>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	1ad2      	subs	r2, r2, r3
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056f8:	4b0c      	ldr	r3, [pc, #48]	@ (800572c <prvHeapInit+0xb4>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	4a0a      	ldr	r2, [pc, #40]	@ (8005730 <prvHeapInit+0xb8>)
 8005706:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	4a09      	ldr	r2, [pc, #36]	@ (8005734 <prvHeapInit+0xbc>)
 800570e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005710:	4b09      	ldr	r3, [pc, #36]	@ (8005738 <prvHeapInit+0xc0>)
 8005712:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005716:	601a      	str	r2, [r3, #0]
}
 8005718:	bf00      	nop
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	bc80      	pop	{r7}
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20000f20 	.word	0x20000f20
 8005728:	20001b20 	.word	0x20001b20
 800572c:	20001b28 	.word	0x20001b28
 8005730:	20001b30 	.word	0x20001b30
 8005734:	20001b2c 	.word	0x20001b2c
 8005738:	20001b34 	.word	0x20001b34

0800573c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005744:	4b27      	ldr	r3, [pc, #156]	@ (80057e4 <prvInsertBlockIntoFreeList+0xa8>)
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	e002      	b.n	8005750 <prvInsertBlockIntoFreeList+0x14>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	429a      	cmp	r2, r3
 8005758:	d8f7      	bhi.n	800574a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	4413      	add	r3, r2
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	429a      	cmp	r2, r3
 800576a:	d108      	bne.n	800577e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	441a      	add	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	441a      	add	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d118      	bne.n	80057c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	4b14      	ldr	r3, [pc, #80]	@ (80057e8 <prvInsertBlockIntoFreeList+0xac>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d00d      	beq.n	80057ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	441a      	add	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	e008      	b.n	80057cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057ba:	4b0b      	ldr	r3, [pc, #44]	@ (80057e8 <prvInsertBlockIntoFreeList+0xac>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	e003      	b.n	80057cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d002      	beq.n	80057da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057da:	bf00      	nop
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr
 80057e4:	20001b20 	.word	0x20001b20
 80057e8:	20001b28 	.word	0x20001b28

080057ec <memset>:
 80057ec:	4603      	mov	r3, r0
 80057ee:	4402      	add	r2, r0
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d100      	bne.n	80057f6 <memset+0xa>
 80057f4:	4770      	bx	lr
 80057f6:	f803 1b01 	strb.w	r1, [r3], #1
 80057fa:	e7f9      	b.n	80057f0 <memset+0x4>

080057fc <_reclaim_reent>:
 80057fc:	4b29      	ldr	r3, [pc, #164]	@ (80058a4 <_reclaim_reent+0xa8>)
 80057fe:	b570      	push	{r4, r5, r6, lr}
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4604      	mov	r4, r0
 8005804:	4283      	cmp	r3, r0
 8005806:	d04b      	beq.n	80058a0 <_reclaim_reent+0xa4>
 8005808:	69c3      	ldr	r3, [r0, #28]
 800580a:	b1ab      	cbz	r3, 8005838 <_reclaim_reent+0x3c>
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	b16b      	cbz	r3, 800582c <_reclaim_reent+0x30>
 8005810:	2500      	movs	r5, #0
 8005812:	69e3      	ldr	r3, [r4, #28]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	5959      	ldr	r1, [r3, r5]
 8005818:	2900      	cmp	r1, #0
 800581a:	d13b      	bne.n	8005894 <_reclaim_reent+0x98>
 800581c:	3504      	adds	r5, #4
 800581e:	2d80      	cmp	r5, #128	@ 0x80
 8005820:	d1f7      	bne.n	8005812 <_reclaim_reent+0x16>
 8005822:	69e3      	ldr	r3, [r4, #28]
 8005824:	4620      	mov	r0, r4
 8005826:	68d9      	ldr	r1, [r3, #12]
 8005828:	f000 f872 	bl	8005910 <_free_r>
 800582c:	69e3      	ldr	r3, [r4, #28]
 800582e:	6819      	ldr	r1, [r3, #0]
 8005830:	b111      	cbz	r1, 8005838 <_reclaim_reent+0x3c>
 8005832:	4620      	mov	r0, r4
 8005834:	f000 f86c 	bl	8005910 <_free_r>
 8005838:	6961      	ldr	r1, [r4, #20]
 800583a:	b111      	cbz	r1, 8005842 <_reclaim_reent+0x46>
 800583c:	4620      	mov	r0, r4
 800583e:	f000 f867 	bl	8005910 <_free_r>
 8005842:	69e1      	ldr	r1, [r4, #28]
 8005844:	b111      	cbz	r1, 800584c <_reclaim_reent+0x50>
 8005846:	4620      	mov	r0, r4
 8005848:	f000 f862 	bl	8005910 <_free_r>
 800584c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800584e:	b111      	cbz	r1, 8005856 <_reclaim_reent+0x5a>
 8005850:	4620      	mov	r0, r4
 8005852:	f000 f85d 	bl	8005910 <_free_r>
 8005856:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005858:	b111      	cbz	r1, 8005860 <_reclaim_reent+0x64>
 800585a:	4620      	mov	r0, r4
 800585c:	f000 f858 	bl	8005910 <_free_r>
 8005860:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005862:	b111      	cbz	r1, 800586a <_reclaim_reent+0x6e>
 8005864:	4620      	mov	r0, r4
 8005866:	f000 f853 	bl	8005910 <_free_r>
 800586a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800586c:	b111      	cbz	r1, 8005874 <_reclaim_reent+0x78>
 800586e:	4620      	mov	r0, r4
 8005870:	f000 f84e 	bl	8005910 <_free_r>
 8005874:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005876:	b111      	cbz	r1, 800587e <_reclaim_reent+0x82>
 8005878:	4620      	mov	r0, r4
 800587a:	f000 f849 	bl	8005910 <_free_r>
 800587e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005880:	b111      	cbz	r1, 8005888 <_reclaim_reent+0x8c>
 8005882:	4620      	mov	r0, r4
 8005884:	f000 f844 	bl	8005910 <_free_r>
 8005888:	6a23      	ldr	r3, [r4, #32]
 800588a:	b14b      	cbz	r3, 80058a0 <_reclaim_reent+0xa4>
 800588c:	4620      	mov	r0, r4
 800588e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005892:	4718      	bx	r3
 8005894:	680e      	ldr	r6, [r1, #0]
 8005896:	4620      	mov	r0, r4
 8005898:	f000 f83a 	bl	8005910 <_free_r>
 800589c:	4631      	mov	r1, r6
 800589e:	e7bb      	b.n	8005818 <_reclaim_reent+0x1c>
 80058a0:	bd70      	pop	{r4, r5, r6, pc}
 80058a2:	bf00      	nop
 80058a4:	20000010 	.word	0x20000010

080058a8 <__libc_init_array>:
 80058a8:	b570      	push	{r4, r5, r6, lr}
 80058aa:	2600      	movs	r6, #0
 80058ac:	4d0c      	ldr	r5, [pc, #48]	@ (80058e0 <__libc_init_array+0x38>)
 80058ae:	4c0d      	ldr	r4, [pc, #52]	@ (80058e4 <__libc_init_array+0x3c>)
 80058b0:	1b64      	subs	r4, r4, r5
 80058b2:	10a4      	asrs	r4, r4, #2
 80058b4:	42a6      	cmp	r6, r4
 80058b6:	d109      	bne.n	80058cc <__libc_init_array+0x24>
 80058b8:	f000 f87e 	bl	80059b8 <_init>
 80058bc:	2600      	movs	r6, #0
 80058be:	4d0a      	ldr	r5, [pc, #40]	@ (80058e8 <__libc_init_array+0x40>)
 80058c0:	4c0a      	ldr	r4, [pc, #40]	@ (80058ec <__libc_init_array+0x44>)
 80058c2:	1b64      	subs	r4, r4, r5
 80058c4:	10a4      	asrs	r4, r4, #2
 80058c6:	42a6      	cmp	r6, r4
 80058c8:	d105      	bne.n	80058d6 <__libc_init_array+0x2e>
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
 80058cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d0:	4798      	blx	r3
 80058d2:	3601      	adds	r6, #1
 80058d4:	e7ee      	b.n	80058b4 <__libc_init_array+0xc>
 80058d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058da:	4798      	blx	r3
 80058dc:	3601      	adds	r6, #1
 80058de:	e7f2      	b.n	80058c6 <__libc_init_array+0x1e>
 80058e0:	08005a44 	.word	0x08005a44
 80058e4:	08005a44 	.word	0x08005a44
 80058e8:	08005a44 	.word	0x08005a44
 80058ec:	08005a48 	.word	0x08005a48

080058f0 <__retarget_lock_acquire_recursive>:
 80058f0:	4770      	bx	lr

080058f2 <__retarget_lock_release_recursive>:
 80058f2:	4770      	bx	lr

080058f4 <memcpy>:
 80058f4:	440a      	add	r2, r1
 80058f6:	4291      	cmp	r1, r2
 80058f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058fc:	d100      	bne.n	8005900 <memcpy+0xc>
 80058fe:	4770      	bx	lr
 8005900:	b510      	push	{r4, lr}
 8005902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005906:	4291      	cmp	r1, r2
 8005908:	f803 4f01 	strb.w	r4, [r3, #1]!
 800590c:	d1f9      	bne.n	8005902 <memcpy+0xe>
 800590e:	bd10      	pop	{r4, pc}

08005910 <_free_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4605      	mov	r5, r0
 8005914:	2900      	cmp	r1, #0
 8005916:	d040      	beq.n	800599a <_free_r+0x8a>
 8005918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800591c:	1f0c      	subs	r4, r1, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	bfb8      	it	lt
 8005922:	18e4      	addlt	r4, r4, r3
 8005924:	f000 f83c 	bl	80059a0 <__malloc_lock>
 8005928:	4a1c      	ldr	r2, [pc, #112]	@ (800599c <_free_r+0x8c>)
 800592a:	6813      	ldr	r3, [r2, #0]
 800592c:	b933      	cbnz	r3, 800593c <_free_r+0x2c>
 800592e:	6063      	str	r3, [r4, #4]
 8005930:	6014      	str	r4, [r2, #0]
 8005932:	4628      	mov	r0, r5
 8005934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005938:	f000 b838 	b.w	80059ac <__malloc_unlock>
 800593c:	42a3      	cmp	r3, r4
 800593e:	d908      	bls.n	8005952 <_free_r+0x42>
 8005940:	6820      	ldr	r0, [r4, #0]
 8005942:	1821      	adds	r1, r4, r0
 8005944:	428b      	cmp	r3, r1
 8005946:	bf01      	itttt	eq
 8005948:	6819      	ldreq	r1, [r3, #0]
 800594a:	685b      	ldreq	r3, [r3, #4]
 800594c:	1809      	addeq	r1, r1, r0
 800594e:	6021      	streq	r1, [r4, #0]
 8005950:	e7ed      	b.n	800592e <_free_r+0x1e>
 8005952:	461a      	mov	r2, r3
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	b10b      	cbz	r3, 800595c <_free_r+0x4c>
 8005958:	42a3      	cmp	r3, r4
 800595a:	d9fa      	bls.n	8005952 <_free_r+0x42>
 800595c:	6811      	ldr	r1, [r2, #0]
 800595e:	1850      	adds	r0, r2, r1
 8005960:	42a0      	cmp	r0, r4
 8005962:	d10b      	bne.n	800597c <_free_r+0x6c>
 8005964:	6820      	ldr	r0, [r4, #0]
 8005966:	4401      	add	r1, r0
 8005968:	1850      	adds	r0, r2, r1
 800596a:	4283      	cmp	r3, r0
 800596c:	6011      	str	r1, [r2, #0]
 800596e:	d1e0      	bne.n	8005932 <_free_r+0x22>
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4408      	add	r0, r1
 8005976:	6010      	str	r0, [r2, #0]
 8005978:	6053      	str	r3, [r2, #4]
 800597a:	e7da      	b.n	8005932 <_free_r+0x22>
 800597c:	d902      	bls.n	8005984 <_free_r+0x74>
 800597e:	230c      	movs	r3, #12
 8005980:	602b      	str	r3, [r5, #0]
 8005982:	e7d6      	b.n	8005932 <_free_r+0x22>
 8005984:	6820      	ldr	r0, [r4, #0]
 8005986:	1821      	adds	r1, r4, r0
 8005988:	428b      	cmp	r3, r1
 800598a:	bf01      	itttt	eq
 800598c:	6819      	ldreq	r1, [r3, #0]
 800598e:	685b      	ldreq	r3, [r3, #4]
 8005990:	1809      	addeq	r1, r1, r0
 8005992:	6021      	streq	r1, [r4, #0]
 8005994:	6063      	str	r3, [r4, #4]
 8005996:	6054      	str	r4, [r2, #4]
 8005998:	e7cb      	b.n	8005932 <_free_r+0x22>
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	20001c74 	.word	0x20001c74

080059a0 <__malloc_lock>:
 80059a0:	4801      	ldr	r0, [pc, #4]	@ (80059a8 <__malloc_lock+0x8>)
 80059a2:	f7ff bfa5 	b.w	80058f0 <__retarget_lock_acquire_recursive>
 80059a6:	bf00      	nop
 80059a8:	20001c70 	.word	0x20001c70

080059ac <__malloc_unlock>:
 80059ac:	4801      	ldr	r0, [pc, #4]	@ (80059b4 <__malloc_unlock+0x8>)
 80059ae:	f7ff bfa0 	b.w	80058f2 <__retarget_lock_release_recursive>
 80059b2:	bf00      	nop
 80059b4:	20001c70 	.word	0x20001c70

080059b8 <_init>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	bf00      	nop
 80059bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059be:	bc08      	pop	{r3}
 80059c0:	469e      	mov	lr, r3
 80059c2:	4770      	bx	lr

080059c4 <_fini>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	bf00      	nop
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr
