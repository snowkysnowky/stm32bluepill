
stm32bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8bc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800b9cc  0800b9cc  0000c9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbbc  0800bbbc  0000d1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbbc  0800bbbc  0000cbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbc4  0800bbc4  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbc4  0800bbc4  0000cbc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bbc8  0800bbc8  0000cbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800bbcc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dbc  200001e0  0800bdac  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f9c  0800bdac  0000df9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c5ae  00000000  00000000  0000d209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048d0  00000000  00000000  000297b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001808  00000000  00000000  0002e088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001244  00000000  00000000  0002f890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000683a  00000000  00000000  00030ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cdf7  00000000  00000000  0003730e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000989b8  00000000  00000000  00054105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ecabd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c94  00000000  00000000  000ecb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000f3794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b9b4 	.word	0x0800b9b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800b9b4 	.word	0x0800b9b4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000178:	f000 fb74 	bl	8000864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017c:	f000 f824 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000180:	f000 f87c 	bl	800027c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000184:	f007 f9bc 	bl	8007500 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000188:	4a09      	ldr	r2, [pc, #36]	@ (80001b0 <main+0x3c>)
 800018a:	2100      	movs	r1, #0
 800018c:	4809      	ldr	r0, [pc, #36]	@ (80001b4 <main+0x40>)
 800018e:	f007 fa1d 	bl	80075cc <osThreadNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a08      	ldr	r2, [pc, #32]	@ (80001b8 <main+0x44>)
 8000196:	6013      	str	r3, [r2, #0]

  /* creation of myUSBpars */
  myUSBparsHandle = osThreadNew(StartUSBpars, NULL, &myUSBpars_attributes);
 8000198:	4a08      	ldr	r2, [pc, #32]	@ (80001bc <main+0x48>)
 800019a:	2100      	movs	r1, #0
 800019c:	4808      	ldr	r0, [pc, #32]	@ (80001c0 <main+0x4c>)
 800019e:	f007 fa15 	bl	80075cc <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a07      	ldr	r2, [pc, #28]	@ (80001c4 <main+0x50>)
 80001a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001a8:	f007 f9dc 	bl	8007564 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ac:	bf00      	nop
 80001ae:	e7fd      	b.n	80001ac <main+0x38>
 80001b0:	0800ba64 	.word	0x0800ba64
 80001b4:	08000315 	.word	0x08000315
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	0800ba88 	.word	0x0800ba88
 80001c0:	0800034d 	.word	0x0800034d
 80001c4:	20000200 	.word	0x20000200

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b094      	sub	sp, #80	@ 0x50
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001d2:	2228      	movs	r2, #40	@ 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f00a fc87 	bl	800aaea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	f107 0314 	add.w	r3, r7, #20
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
 80001e4:	605a      	str	r2, [r3, #4]
 80001e6:	609a      	str	r2, [r3, #8]
 80001e8:	60da      	str	r2, [r3, #12]
 80001ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f8:	2301      	movs	r3, #1
 80001fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020a:	2302      	movs	r3, #2
 800020c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000212:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000214:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000218:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800021e:	4618      	mov	r0, r3
 8000220:	f002 fb3c 	bl	800289c <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800022a:	f000 f943 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800023e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2102      	movs	r1, #2
 800024a:	4618      	mov	r0, r3
 800024c:	f002 fda8 	bl	8002da0 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000256:	f000 f92d 	bl	80004b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800025a:	2310      	movs	r3, #16
 800025c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800025e:	2300      	movs	r3, #0
 8000260:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f002 ff45 	bl	80030f4 <HAL_RCCEx_PeriphCLKConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000270:	f000 f920 	bl	80004b4 <Error_Handler>
  }
}
 8000274:	bf00      	nop
 8000276:	3750      	adds	r7, #80	@ 0x50
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000282:	f107 0310 	add.w	r3, r7, #16
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000290:	4b1e      	ldr	r3, [pc, #120]	@ (800030c <MX_GPIO_Init+0x90>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a1d      	ldr	r2, [pc, #116]	@ (800030c <MX_GPIO_Init+0x90>)
 8000296:	f043 0310 	orr.w	r3, r3, #16
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b1b      	ldr	r3, [pc, #108]	@ (800030c <MX_GPIO_Init+0x90>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0310 	and.w	r3, r3, #16
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a8:	4b18      	ldr	r3, [pc, #96]	@ (800030c <MX_GPIO_Init+0x90>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a17      	ldr	r2, [pc, #92]	@ (800030c <MX_GPIO_Init+0x90>)
 80002ae:	f043 0320 	orr.w	r3, r3, #32
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b15      	ldr	r3, [pc, #84]	@ (800030c <MX_GPIO_Init+0x90>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0320 	and.w	r3, r3, #32
 80002bc:	60bb      	str	r3, [r7, #8]
 80002be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c0:	4b12      	ldr	r3, [pc, #72]	@ (800030c <MX_GPIO_Init+0x90>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a11      	ldr	r2, [pc, #68]	@ (800030c <MX_GPIO_Init+0x90>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <MX_GPIO_Init+0x90>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0304 	and.w	r3, r3, #4
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002de:	480c      	ldr	r0, [pc, #48]	@ (8000310 <MX_GPIO_Init+0x94>)
 80002e0:	f000 fd56 	bl	8000d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ea:	2301      	movs	r3, #1
 80002ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002f6:	f107 0310 	add.w	r3, r7, #16
 80002fa:	4619      	mov	r1, r3
 80002fc:	4804      	ldr	r0, [pc, #16]	@ (8000310 <MX_GPIO_Init+0x94>)
 80002fe:	f000 fbc3 	bl	8000a88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000302:	bf00      	nop
 8000304:	3720      	adds	r7, #32
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000
 8000310:	40011000 	.word	0x40011000

08000314 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800031c:	f009 fe2e 	bl	8009f7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  CDC_Transmit_FS((uint8_t*)data, strlen(data));
 8000320:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <StartDefaultTask+0x34>)
 8000322:	681c      	ldr	r4, [r3, #0]
 8000324:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <StartDefaultTask+0x34>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff1b 	bl	8000164 <strlen>
 800032e:	4603      	mov	r3, r0
 8000330:	b29b      	uxth	r3, r3
 8000332:	4619      	mov	r1, r3
 8000334:	4620      	mov	r0, r4
 8000336:	f009 fef5 	bl	800a124 <CDC_Transmit_FS>
    osDelay(1000);
 800033a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800033e:	f007 f9ef 	bl	8007720 <osDelay>
	  CDC_Transmit_FS((uint8_t*)data, strlen(data));
 8000342:	bf00      	nop
 8000344:	e7ec      	b.n	8000320 <StartDefaultTask+0xc>
 8000346:	bf00      	nop
 8000348:	20000000 	.word	0x20000000

0800034c <StartUSBpars>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSBpars */
void StartUSBpars(void *argument)
{
 800034c:	b590      	push	{r4, r7, lr}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUSBpars */
  /* Infinite loop */
  for(;;)
  {
	  tok = strtok(buffer, s);
 8000354:	4945      	ldr	r1, [pc, #276]	@ (800046c <StartUSBpars+0x120>)
 8000356:	4846      	ldr	r0, [pc, #280]	@ (8000470 <StartUSBpars+0x124>)
 8000358:	f00a fbd0 	bl	800aafc <strtok>
 800035c:	4603      	mov	r3, r0
 800035e:	4a45      	ldr	r2, [pc, #276]	@ (8000474 <StartUSBpars+0x128>)
 8000360:	6013      	str	r3, [r2, #0]
  	  if(!strcmp((char*)tok,"led"))
 8000362:	4b44      	ldr	r3, [pc, #272]	@ (8000474 <StartUSBpars+0x128>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4944      	ldr	r1, [pc, #272]	@ (8000478 <StartUSBpars+0x12c>)
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff fef1 	bl	8000150 <strcmp>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d148      	bne.n	8000406 <StartUSBpars+0xba>
  	  {
  		  tok = strtok(0, s);
 8000374:	493d      	ldr	r1, [pc, #244]	@ (800046c <StartUSBpars+0x120>)
 8000376:	2000      	movs	r0, #0
 8000378:	f00a fbc0 	bl	800aafc <strtok>
 800037c:	4603      	mov	r3, r0
 800037e:	4a3d      	ldr	r2, [pc, #244]	@ (8000474 <StartUSBpars+0x128>)
 8000380:	6013      	str	r3, [r2, #0]
  		  if(!strcmp((char*)tok,"on"))
 8000382:	4b3c      	ldr	r3, [pc, #240]	@ (8000474 <StartUSBpars+0x128>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	493d      	ldr	r1, [pc, #244]	@ (800047c <StartUSBpars+0x130>)
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff fee1 	bl	8000150 <strcmp>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d117      	bne.n	80003c4 <StartUSBpars+0x78>
  		  	  {
  		  		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800039a:	4839      	ldr	r0, [pc, #228]	@ (8000480 <StartUSBpars+0x134>)
 800039c:	f000 fcf8 	bl	8000d90 <HAL_GPIO_WritePin>
  		  		  CDC_Transmit_FS((uint8_t*)tok, strlen(tok));
 80003a0:	4b34      	ldr	r3, [pc, #208]	@ (8000474 <StartUSBpars+0x128>)
 80003a2:	681c      	ldr	r4, [r3, #0]
 80003a4:	4b33      	ldr	r3, [pc, #204]	@ (8000474 <StartUSBpars+0x128>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff fedb 	bl	8000164 <strlen>
 80003ae:	4603      	mov	r3, r0
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	4619      	mov	r1, r3
 80003b4:	4620      	mov	r0, r4
 80003b6:	f009 feb5 	bl	800a124 <CDC_Transmit_FS>
  		  		  memset(buffer,'\0',64);
 80003ba:	2240      	movs	r2, #64	@ 0x40
 80003bc:	2100      	movs	r1, #0
 80003be:	482c      	ldr	r0, [pc, #176]	@ (8000470 <StartUSBpars+0x124>)
 80003c0:	f00a fb93 	bl	800aaea <memset>
  		  	  }

  		  if(!strcmp((char*)tok,"off"))
 80003c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000474 <StartUSBpars+0x128>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	492e      	ldr	r1, [pc, #184]	@ (8000484 <StartUSBpars+0x138>)
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff fec0 	bl	8000150 <strcmp>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d117      	bne.n	8000406 <StartUSBpars+0xba>
  		 	  {
  		 	  	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003dc:	4828      	ldr	r0, [pc, #160]	@ (8000480 <StartUSBpars+0x134>)
 80003de:	f000 fcd7 	bl	8000d90 <HAL_GPIO_WritePin>
  		 		  CDC_Transmit_FS((uint8_t*)tok, strlen(tok));
 80003e2:	4b24      	ldr	r3, [pc, #144]	@ (8000474 <StartUSBpars+0x128>)
 80003e4:	681c      	ldr	r4, [r3, #0]
 80003e6:	4b23      	ldr	r3, [pc, #140]	@ (8000474 <StartUSBpars+0x128>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff feba 	bl	8000164 <strlen>
 80003f0:	4603      	mov	r3, r0
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	4619      	mov	r1, r3
 80003f6:	4620      	mov	r0, r4
 80003f8:	f009 fe94 	bl	800a124 <CDC_Transmit_FS>
  		 	  	  memset(buffer,'\0',64);
 80003fc:	2240      	movs	r2, #64	@ 0x40
 80003fe:	2100      	movs	r1, #0
 8000400:	481b      	ldr	r0, [pc, #108]	@ (8000470 <StartUSBpars+0x124>)
 8000402:	f00a fb72 	bl	800aaea <memset>
  		 	  }
  	  }

  	  if(!strcmp((char*)tok,"duty"))
 8000406:	4b1b      	ldr	r3, [pc, #108]	@ (8000474 <StartUSBpars+0x128>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	491f      	ldr	r1, [pc, #124]	@ (8000488 <StartUSBpars+0x13c>)
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff fe9f 	bl	8000150 <strcmp>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d124      	bne.n	8000462 <StartUSBpars+0x116>
  	  {
  		  tok = strtok(0, s);
 8000418:	4914      	ldr	r1, [pc, #80]	@ (800046c <StartUSBpars+0x120>)
 800041a:	2000      	movs	r0, #0
 800041c:	f00a fb6e 	bl	800aafc <strtok>
 8000420:	4603      	mov	r3, r0
 8000422:	4a14      	ldr	r2, [pc, #80]	@ (8000474 <StartUSBpars+0x128>)
 8000424:	6013      	str	r3, [r2, #0]
  		  strcat(tok,"\n");
 8000426:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <StartUSBpars+0x128>)
 8000428:	681c      	ldr	r4, [r3, #0]
 800042a:	4620      	mov	r0, r4
 800042c:	f7ff fe9a 	bl	8000164 <strlen>
 8000430:	4603      	mov	r3, r0
 8000432:	4423      	add	r3, r4
 8000434:	4915      	ldr	r1, [pc, #84]	@ (800048c <StartUSBpars+0x140>)
 8000436:	461a      	mov	r2, r3
 8000438:	460b      	mov	r3, r1
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	8013      	strh	r3, [r2, #0]
  		  CDC_Transmit_FS((uint8_t*)tok, strlen(tok));
 800043e:	4b0d      	ldr	r3, [pc, #52]	@ (8000474 <StartUSBpars+0x128>)
 8000440:	681c      	ldr	r4, [r3, #0]
 8000442:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <StartUSBpars+0x128>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff fe8c 	bl	8000164 <strlen>
 800044c:	4603      	mov	r3, r0
 800044e:	b29b      	uxth	r3, r3
 8000450:	4619      	mov	r1, r3
 8000452:	4620      	mov	r0, r4
 8000454:	f009 fe66 	bl	800a124 <CDC_Transmit_FS>
  		  memset(buffer,'\0',64);
 8000458:	2240      	movs	r2, #64	@ 0x40
 800045a:	2100      	movs	r1, #0
 800045c:	4804      	ldr	r0, [pc, #16]	@ (8000470 <StartUSBpars+0x124>)
 800045e:	f00a fb44 	bl	800aaea <memset>
  	  }
    osDelay(1);
 8000462:	2001      	movs	r0, #1
 8000464:	f007 f95c 	bl	8007720 <osDelay>
	  tok = strtok(buffer, s);
 8000468:	e774      	b.n	8000354 <StartUSBpars+0x8>
 800046a:	bf00      	nop
 800046c:	0800baac 	.word	0x0800baac
 8000470:	20000204 	.word	0x20000204
 8000474:	20000244 	.word	0x20000244
 8000478:	0800b9f0 	.word	0x0800b9f0
 800047c:	0800b9f4 	.word	0x0800b9f4
 8000480:	40011000 	.word	0x40011000
 8000484:	0800b9f8 	.word	0x0800b9f8
 8000488:	0800b9fc 	.word	0x0800b9fc
 800048c:	0800ba04 	.word	0x0800ba04

08000490 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a04      	ldr	r2, [pc, #16]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d101      	bne.n	80004a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004a2:	f000 f9f5 	bl	8000890 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40000800 	.word	0x40000800

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b8:	b672      	cpsid	i
}
 80004ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <Error_Handler+0x8>

080004c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c6:	4b18      	ldr	r3, [pc, #96]	@ (8000528 <HAL_MspInit+0x68>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a17      	ldr	r2, [pc, #92]	@ (8000528 <HAL_MspInit+0x68>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <HAL_MspInit+0x68>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b12      	ldr	r3, [pc, #72]	@ (8000528 <HAL_MspInit+0x68>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a11      	ldr	r2, [pc, #68]	@ (8000528 <HAL_MspInit+0x68>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <HAL_MspInit+0x68>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	210f      	movs	r1, #15
 80004fa:	f06f 0001 	mvn.w	r0, #1
 80004fe:	f000 fa98 	bl	8000a32 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000502:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <HAL_MspInit+0x6c>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	4a04      	ldr	r2, [pc, #16]	@ (800052c <HAL_MspInit+0x6c>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	40010000 	.word	0x40010000

08000530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08e      	sub	sp, #56	@ 0x38
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000538:	2300      	movs	r3, #0
 800053a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800053c:	2300      	movs	r3, #0
 800053e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000540:	2300      	movs	r3, #0
 8000542:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000546:	4b34      	ldr	r3, [pc, #208]	@ (8000618 <HAL_InitTick+0xe8>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	4a33      	ldr	r2, [pc, #204]	@ (8000618 <HAL_InitTick+0xe8>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	61d3      	str	r3, [r2, #28]
 8000552:	4b31      	ldr	r3, [pc, #196]	@ (8000618 <HAL_InitTick+0xe8>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800055e:	f107 0210 	add.w	r2, r7, #16
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	4611      	mov	r1, r2
 8000568:	4618      	mov	r0, r3
 800056a:	f002 fd75 	bl	8003058 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800056e:	6a3b      	ldr	r3, [r7, #32]
 8000570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000574:	2b00      	cmp	r3, #0
 8000576:	d103      	bne.n	8000580 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000578:	f002 fd5a 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 800057c:	6378      	str	r0, [r7, #52]	@ 0x34
 800057e:	e004      	b.n	800058a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000580:	f002 fd56 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 8000584:	4603      	mov	r3, r0
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800058a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800058c:	4a23      	ldr	r2, [pc, #140]	@ (800061c <HAL_InitTick+0xec>)
 800058e:	fba2 2303 	umull	r2, r3, r2, r3
 8000592:	0c9b      	lsrs	r3, r3, #18
 8000594:	3b01      	subs	r3, #1
 8000596:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000598:	4b21      	ldr	r3, [pc, #132]	@ (8000620 <HAL_InitTick+0xf0>)
 800059a:	4a22      	ldr	r2, [pc, #136]	@ (8000624 <HAL_InitTick+0xf4>)
 800059c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800059e:	4b20      	ldr	r3, [pc, #128]	@ (8000620 <HAL_InitTick+0xf0>)
 80005a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005a4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000620 <HAL_InitTick+0xf0>)
 80005a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005aa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000620 <HAL_InitTick+0xf0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000620 <HAL_InitTick+0xf0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b8:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <HAL_InitTick+0xf0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80005be:	4818      	ldr	r0, [pc, #96]	@ (8000620 <HAL_InitTick+0xf0>)
 80005c0:	f002 fe4e 	bl	8003260 <HAL_TIM_Base_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80005ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d11b      	bne.n	800060a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80005d2:	4813      	ldr	r0, [pc, #76]	@ (8000620 <HAL_InitTick+0xf0>)
 80005d4:	f002 fe9c 	bl	8003310 <HAL_TIM_Base_Start_IT>
 80005d8:	4603      	mov	r3, r0
 80005da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80005de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d111      	bne.n	800060a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005e6:	201e      	movs	r0, #30
 80005e8:	f000 fa3f 	bl	8000a6a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b0f      	cmp	r3, #15
 80005f0:	d808      	bhi.n	8000604 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80005f2:	2200      	movs	r2, #0
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	201e      	movs	r0, #30
 80005f8:	f000 fa1b 	bl	8000a32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000628 <HAL_InitTick+0xf8>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6013      	str	r3, [r2, #0]
 8000602:	e002      	b.n	800060a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800060a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800060e:	4618      	mov	r0, r3
 8000610:	3738      	adds	r7, #56	@ 0x38
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000
 800061c:	431bde83 	.word	0x431bde83
 8000620:	20000248 	.word	0x20000248
 8000624:	40000800 	.word	0x40000800
 8000628:	20000008 	.word	0x20000008

0800062c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <NMI_Handler+0x4>

08000634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <HardFault_Handler+0x4>

0800063c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <MemManage_Handler+0x4>

08000644 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <BusFault_Handler+0x4>

0800064c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <UsageFault_Handler+0x4>

08000654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000664:	4802      	ldr	r0, [pc, #8]	@ (8000670 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000666:	f000 fcd0 	bl	800100a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20002940 	.word	0x20002940

08000674 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000678:	4802      	ldr	r0, [pc, #8]	@ (8000684 <TIM4_IRQHandler+0x10>)
 800067a:	f002 fe9b 	bl	80033b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000248 	.word	0x20000248

08000688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return 1;
 800068c:	2301      	movs	r3, #1
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <_kill>:

int _kill(int pid, int sig)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
 800069e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80006a0:	f00a fb24 	bl	800acec <__errno>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2216      	movs	r2, #22
 80006a8:	601a      	str	r2, [r3, #0]
  return -1;
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <_exit>:

void _exit (int status)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80006be:	f04f 31ff 	mov.w	r1, #4294967295
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff ffe7 	bl	8000696 <_kill>
  while (1) {}    /* Make sure we hang here */
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <_exit+0x12>

080006cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	e00a      	b.n	80006f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006de:	f3af 8000 	nop.w
 80006e2:	4601      	mov	r1, r0
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	60ba      	str	r2, [r7, #8]
 80006ea:	b2ca      	uxtb	r2, r1
 80006ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697a      	ldr	r2, [r7, #20]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	dbf0      	blt.n	80006de <_read+0x12>
  }

  return len;
 80006fc:	687b      	ldr	r3, [r7, #4]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b086      	sub	sp, #24
 800070a:	af00      	add	r7, sp, #0
 800070c:	60f8      	str	r0, [r7, #12]
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	e009      	b.n	800072c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	60ba      	str	r2, [r7, #8]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	3301      	adds	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697a      	ldr	r2, [r7, #20]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	429a      	cmp	r2, r3
 8000732:	dbf1      	blt.n	8000718 <_write+0x12>
  }
  return len;
 8000734:	687b      	ldr	r3, [r7, #4]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <_close>:

int _close(int file)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
}
 800074a:	4618      	mov	r0, r3
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000764:	605a      	str	r2, [r3, #4]
  return 0;
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <_isatty>:

int _isatty(int file)
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800077a:	2301      	movs	r3, #1
}
 800077c:	4618      	mov	r0, r3
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000786:	b480      	push	{r7}
 8000788:	b085      	sub	sp, #20
 800078a:	af00      	add	r7, sp, #0
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
	...

080007a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a8:	4a14      	ldr	r2, [pc, #80]	@ (80007fc <_sbrk+0x5c>)
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <_sbrk+0x60>)
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <_sbrk+0x64>)
 80007be:	4a12      	ldr	r2, [pc, #72]	@ (8000808 <_sbrk+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d207      	bcs.n	80007e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d0:	f00a fa8c 	bl	800acec <__errno>
 80007d4:	4603      	mov	r3, r0
 80007d6:	220c      	movs	r2, #12
 80007d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	e009      	b.n	80007f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e6:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	4a05      	ldr	r2, [pc, #20]	@ (8000804 <_sbrk+0x64>)
 80007f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007f2:	68fb      	ldr	r3, [r7, #12]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20005000 	.word	0x20005000
 8000800:	00000400 	.word	0x00000400
 8000804:	20000290 	.word	0x20000290
 8000808:	20002fa0 	.word	0x20002fa0

0800080c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000818:	f7ff fff8 	bl	800080c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800081e:	490c      	ldr	r1, [pc, #48]	@ (8000850 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000820:	4a0c      	ldr	r2, [pc, #48]	@ (8000854 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a09      	ldr	r2, [pc, #36]	@ (8000858 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000834:	4c09      	ldr	r4, [pc, #36]	@ (800085c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000842:	f00a fa59 	bl	800acf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff fc95 	bl	8000174 <main>
  bx lr
 800084a:	4770      	bx	lr
  ldr r0, =_sdata
 800084c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000850:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000854:	0800bbcc 	.word	0x0800bbcc
  ldr r2, =_sbss
 8000858:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800085c:	20002f9c 	.word	0x20002f9c

08000860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC1_2_IRQHandler>
	...

08000864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <HAL_Init+0x28>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	@ (800088c <HAL_Init+0x28>)
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f8d1 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087a:	200f      	movs	r0, #15
 800087c:	f7ff fe58 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000880:	f7ff fe1e 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40022000 	.word	0x40022000

08000890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <HAL_IncTick+0x1c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <HAL_IncTick+0x20>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	4a03      	ldr	r2, [pc, #12]	@ (80008b0 <HAL_IncTick+0x20>)
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	2000000c 	.word	0x2000000c
 80008b0:	20000294 	.word	0x20000294

080008b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b02      	ldr	r3, [pc, #8]	@ (80008c4 <HAL_GetTick+0x10>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000294 	.word	0x20000294

080008c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	@ (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	2b00      	cmp	r3, #0
 800093c:	db0b      	blt.n	8000956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	f003 021f 	and.w	r2, r3, #31
 8000944:	4906      	ldr	r1, [pc, #24]	@ (8000960 <__NVIC_EnableIRQ+0x34>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	095b      	lsrs	r3, r3, #5
 800094c:	2001      	movs	r0, #1
 800094e:	fa00 f202 	lsl.w	r2, r0, r2
 8000952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	e000e100 	.word	0xe000e100

08000964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db0a      	blt.n	800098e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	490c      	ldr	r1, [pc, #48]	@ (80009b0 <__NVIC_SetPriority+0x4c>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	0112      	lsls	r2, r2, #4
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	440b      	add	r3, r1
 8000988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800098c:	e00a      	b.n	80009a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4908      	ldr	r1, [pc, #32]	@ (80009b4 <__NVIC_SetPriority+0x50>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	3b04      	subs	r3, #4
 800099c:	0112      	lsls	r2, r2, #4
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	440b      	add	r3, r1
 80009a2:	761a      	strb	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	@ 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f1c3 0307 	rsb	r3, r3, #7
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	bf28      	it	cs
 80009d6:	2304      	movcs	r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3304      	adds	r3, #4
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d902      	bls.n	80009e8 <NVIC_EncodePriority+0x30>
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3b03      	subs	r3, #3
 80009e6:	e000      	b.n	80009ea <NVIC_EncodePriority+0x32>
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	f04f 32ff 	mov.w	r2, #4294967295
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43da      	mvns	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43d9      	mvns	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	4313      	orrs	r3, r2
         );
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3724      	adds	r7, #36	@ 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff4f 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a44:	f7ff ff64 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff ffb2 	bl	80009b8 <NVIC_EncodePriority>
 8000a54:	4602      	mov	r2, r0
 8000a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff81 	bl	8000964 <__NVIC_SetPriority>
}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff57 	bl	800092c <__NVIC_EnableIRQ>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b08b      	sub	sp, #44	@ 0x2c
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	e169      	b.n	8000d70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	f040 8158 	bne.w	8000d6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	4a9a      	ldr	r2, [pc, #616]	@ (8000d28 <HAL_GPIO_Init+0x2a0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d05e      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ac4:	4a98      	ldr	r2, [pc, #608]	@ (8000d28 <HAL_GPIO_Init+0x2a0>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d875      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000aca:	4a98      	ldr	r2, [pc, #608]	@ (8000d2c <HAL_GPIO_Init+0x2a4>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d058      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ad0:	4a96      	ldr	r2, [pc, #600]	@ (8000d2c <HAL_GPIO_Init+0x2a4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d86f      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000ad6:	4a96      	ldr	r2, [pc, #600]	@ (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d052      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000adc:	4a94      	ldr	r2, [pc, #592]	@ (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d869      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000ae2:	4a94      	ldr	r2, [pc, #592]	@ (8000d34 <HAL_GPIO_Init+0x2ac>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d04c      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ae8:	4a92      	ldr	r2, [pc, #584]	@ (8000d34 <HAL_GPIO_Init+0x2ac>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d863      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000aee:	4a92      	ldr	r2, [pc, #584]	@ (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d046      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000af4:	4a90      	ldr	r2, [pc, #576]	@ (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d85d      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000afa:	2b12      	cmp	r3, #18
 8000afc:	d82a      	bhi.n	8000b54 <HAL_GPIO_Init+0xcc>
 8000afe:	2b12      	cmp	r3, #18
 8000b00:	d859      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000b02:	a201      	add	r2, pc, #4	@ (adr r2, 8000b08 <HAL_GPIO_Init+0x80>)
 8000b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b08:	08000b83 	.word	0x08000b83
 8000b0c:	08000b5d 	.word	0x08000b5d
 8000b10:	08000b6f 	.word	0x08000b6f
 8000b14:	08000bb1 	.word	0x08000bb1
 8000b18:	08000bb7 	.word	0x08000bb7
 8000b1c:	08000bb7 	.word	0x08000bb7
 8000b20:	08000bb7 	.word	0x08000bb7
 8000b24:	08000bb7 	.word	0x08000bb7
 8000b28:	08000bb7 	.word	0x08000bb7
 8000b2c:	08000bb7 	.word	0x08000bb7
 8000b30:	08000bb7 	.word	0x08000bb7
 8000b34:	08000bb7 	.word	0x08000bb7
 8000b38:	08000bb7 	.word	0x08000bb7
 8000b3c:	08000bb7 	.word	0x08000bb7
 8000b40:	08000bb7 	.word	0x08000bb7
 8000b44:	08000bb7 	.word	0x08000bb7
 8000b48:	08000bb7 	.word	0x08000bb7
 8000b4c:	08000b65 	.word	0x08000b65
 8000b50:	08000b79 	.word	0x08000b79
 8000b54:	4a79      	ldr	r2, [pc, #484]	@ (8000d3c <HAL_GPIO_Init+0x2b4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d013      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b5a:	e02c      	b.n	8000bb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	623b      	str	r3, [r7, #32]
          break;
 8000b62:	e029      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	623b      	str	r3, [r7, #32]
          break;
 8000b6c:	e024      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	3308      	adds	r3, #8
 8000b74:	623b      	str	r3, [r7, #32]
          break;
 8000b76:	e01f      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	330c      	adds	r3, #12
 8000b7e:	623b      	str	r3, [r7, #32]
          break;
 8000b80:	e01a      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e013      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d105      	bne.n	8000ba4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b98:	2308      	movs	r3, #8
 8000b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69fa      	ldr	r2, [r7, #28]
 8000ba0:	611a      	str	r2, [r3, #16]
          break;
 8000ba2:	e009      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69fa      	ldr	r2, [r7, #28]
 8000bac:	615a      	str	r2, [r3, #20]
          break;
 8000bae:	e003      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
          break;
 8000bb4:	e000      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          break;
 8000bb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	2bff      	cmp	r3, #255	@ 0xff
 8000bbc:	d801      	bhi.n	8000bc2 <HAL_GPIO_Init+0x13a>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	e001      	b.n	8000bc6 <HAL_GPIO_Init+0x13e>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	2bff      	cmp	r3, #255	@ 0xff
 8000bcc:	d802      	bhi.n	8000bd4 <HAL_GPIO_Init+0x14c>
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_Init+0x152>
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd6:	3b08      	subs	r3, #8
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	210f      	movs	r1, #15
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	401a      	ands	r2, r3
 8000bec:	6a39      	ldr	r1, [r7, #32]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 80b1 	beq.w	8000d6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c08:	4b4d      	ldr	r3, [pc, #308]	@ (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b4a      	ldr	r3, [pc, #296]	@ (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c20:	4a48      	ldr	r2, [pc, #288]	@ (8000d44 <HAL_GPIO_Init+0x2bc>)
 8000c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3302      	adds	r3, #2
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a40      	ldr	r2, [pc, #256]	@ (8000d48 <HAL_GPIO_Init+0x2c0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d013      	beq.n	8000c74 <HAL_GPIO_Init+0x1ec>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d4c <HAL_GPIO_Init+0x2c4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d00d      	beq.n	8000c70 <HAL_GPIO_Init+0x1e8>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a3e      	ldr	r2, [pc, #248]	@ (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d007      	beq.n	8000c6c <HAL_GPIO_Init+0x1e4>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d101      	bne.n	8000c68 <HAL_GPIO_Init+0x1e0>
 8000c64:	2303      	movs	r3, #3
 8000c66:	e006      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c68:	2304      	movs	r3, #4
 8000c6a:	e004      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	e002      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c70:	2301      	movs	r3, #1
 8000c72:	e000      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c74:	2300      	movs	r3, #0
 8000c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c78:	f002 0203 	and.w	r2, r2, #3
 8000c7c:	0092      	lsls	r2, r2, #2
 8000c7e:	4093      	lsls	r3, r2
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c86:	492f      	ldr	r1, [pc, #188]	@ (8000d44 <HAL_GPIO_Init+0x2bc>)
 8000c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	492c      	ldr	r1, [pc, #176]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	608b      	str	r3, [r1, #8]
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cae:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	4928      	ldr	r1, [pc, #160]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d006      	beq.n	8000cd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cc8:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	4922      	ldr	r1, [pc, #136]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	60cb      	str	r3, [r1, #12]
 8000cd4:	e006      	b.n	8000ce4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	491e      	ldr	r1, [pc, #120]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cf0:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	685a      	ldr	r2, [r3, #4]
 8000cf4:	4918      	ldr	r1, [pc, #96]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	604b      	str	r3, [r1, #4]
 8000cfc:	e006      	b.n	8000d0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cfe:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	4914      	ldr	r1, [pc, #80]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d08:	4013      	ands	r3, r2
 8000d0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d021      	beq.n	8000d5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d18:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	490e      	ldr	r1, [pc, #56]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	600b      	str	r3, [r1, #0]
 8000d24:	e021      	b.n	8000d6a <HAL_GPIO_Init+0x2e2>
 8000d26:	bf00      	nop
 8000d28:	10320000 	.word	0x10320000
 8000d2c:	10310000 	.word	0x10310000
 8000d30:	10220000 	.word	0x10220000
 8000d34:	10210000 	.word	0x10210000
 8000d38:	10120000 	.word	0x10120000
 8000d3c:	10110000 	.word	0x10110000
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010000 	.word	0x40010000
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	40010c00 	.word	0x40010c00
 8000d50:	40011000 	.word	0x40011000
 8000d54:	40011400 	.word	0x40011400
 8000d58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <HAL_GPIO_Init+0x304>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	4909      	ldr	r1, [pc, #36]	@ (8000d8c <HAL_GPIO_Init+0x304>)
 8000d66:	4013      	ands	r3, r2
 8000d68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f47f ae8e 	bne.w	8000a9c <HAL_GPIO_Init+0x14>
  }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	372c      	adds	r7, #44	@ 0x2c
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	40010400 	.word	0x40010400

08000d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da0:	787b      	ldrb	r3, [r7, #1]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000da6:	887a      	ldrh	r2, [r7, #2]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dac:	e003      	b.n	8000db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dae:	887b      	ldrh	r3, [r7, #2]
 8000db0:	041a      	lsls	r2, r3, #16
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	611a      	str	r2, [r3, #16]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	b08b      	sub	sp, #44	@ 0x2c
 8000dc4:	af06      	add	r7, sp, #24
 8000dc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e0f1      	b.n	8000fb6 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d106      	bne.n	8000dec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f009 fad0 	bl	800a38c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2203      	movs	r2, #3
 8000df0:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 fca1 	bl	8003740 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	687e      	ldr	r6, [r7, #4]
 8000e06:	466d      	mov	r5, sp
 8000e08:	f106 0410 	add.w	r4, r6, #16
 8000e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	602b      	str	r3, [r5, #0]
 8000e14:	1d33      	adds	r3, r6, #4
 8000e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e18:	6838      	ldr	r0, [r7, #0]
 8000e1a:	f002 fc6b 	bl	80036f4 <USB_CoreInit>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d005      	beq.n	8000e30 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2202      	movs	r2, #2
 8000e28:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e0c2      	b.n	8000fb6 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fc9c 	bl	8003774 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]
 8000e40:	e040      	b.n	8000ec4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	440b      	add	r3, r1
 8000e52:	3301      	adds	r3, #1
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	440b      	add	r3, r1
 8000e68:	7bfa      	ldrb	r2, [r7, #15]
 8000e6a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	1c5a      	adds	r2, r3, #1
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	440b      	add	r3, r1
 8000e7c:	3303      	adds	r3, #3
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e82:	7bfa      	ldrb	r2, [r7, #15]
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	440b      	add	r3, r1
 8000e90:	3338      	adds	r3, #56	@ 0x38
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	440b      	add	r3, r1
 8000ea4:	333c      	adds	r3, #60	@ 0x3c
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000eaa:	7bfa      	ldrb	r2, [r7, #15]
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	440b      	add	r3, r1
 8000eb8:	3340      	adds	r3, #64	@ 0x40
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	7bfa      	ldrb	r2, [r7, #15]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d3b9      	bcc.n	8000e42 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]
 8000ed2:	e044      	b.n	8000f5e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ed4:	7bfa      	ldrb	r2, [r7, #15]
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	440b      	add	r3, r1
 8000ee2:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f00:	7bfa      	ldrb	r2, [r7, #15]
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	440b      	add	r3, r1
 8000f0e:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f16:	7bfa      	ldrb	r2, [r7, #15]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	440b      	add	r3, r1
 8000f24:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f2c:	7bfa      	ldrb	r2, [r7, #15]
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	440b      	add	r3, r1
 8000f3a:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	440b      	add	r3, r1
 8000f50:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d3b5      	bcc.n	8000ed4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	687e      	ldr	r6, [r7, #4]
 8000f70:	466d      	mov	r5, sp
 8000f72:	f106 0410 	add.w	r4, r6, #16
 8000f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	602b      	str	r3, [r5, #0]
 8000f7e:	1d33      	adds	r3, r6, #4
 8000f80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f82:	6838      	ldr	r0, [r7, #0]
 8000f84:	f002 fc02 	bl	800378c <USB_DevInit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d005      	beq.n	8000f9a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2202      	movs	r2, #2
 8000f92:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00d      	b.n	8000fb6 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f004 fe83 	bl	8005cba <USB_DevDisconnect>

  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fbe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d101      	bne.n	8000fd4 <HAL_PCD_Start+0x16>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e016      	b.n	8001002 <HAL_PCD_Start+0x44>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 fb97 	bl	8003714 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f009 fc42 	bl	800a872 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 fe57 	bl	8005ca6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b088      	sub	sp, #32
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f004 fe59 	bl	8005cce <USB_ReadInterrupts>
 800101c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 fb1b 	bl	8001664 <PCD_EP_ISR_Handler>

    return;
 800102e:	e119      	b.n	8001264 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001036:	2b00      	cmp	r3, #0
 8001038:	d013      	beq.n	8001062 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001042:	b29a      	uxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800104c:	b292      	uxth	r2, r2
 800104e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f009 fa15 	bl	800a482 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001058:	2100      	movs	r1, #0
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f905 	bl	800126a <HAL_PCD_SetAddress>

    return;
 8001060:	e100      	b.n	8001264 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00c      	beq.n	8001086 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001074:	b29a      	uxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800107e:	b292      	uxth	r2, r2
 8001080:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001084:	e0ee      	b.n	8001264 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00c      	beq.n	80010aa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001098:	b29a      	uxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80010a2:	b292      	uxth	r2, r2
 80010a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80010a8:	e0dc      	b.n	8001264 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d027      	beq.n	8001104 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80010bc:	b29a      	uxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0204 	bic.w	r2, r2, #4
 80010c6:	b292      	uxth	r2, r2
 80010c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0208 	bic.w	r2, r2, #8
 80010de:	b292      	uxth	r2, r2
 80010e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f009 fa05 	bl	800a4f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80010fc:	b292      	uxth	r2, r2
 80010fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001102:	e0af      	b.n	8001264 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 8083 	beq.w	8001216 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	77fb      	strb	r3, [r7, #31]
 8001114:	e010      	b.n	8001138 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	7ffb      	ldrb	r3, [r7, #31]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	441a      	add	r2, r3
 8001122:	7ffb      	ldrb	r3, [r7, #31]
 8001124:	8812      	ldrh	r2, [r2, #0]
 8001126:	b292      	uxth	r2, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	3320      	adds	r3, #32
 800112c:	443b      	add	r3, r7
 800112e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001132:	7ffb      	ldrb	r3, [r7, #31]
 8001134:	3301      	adds	r3, #1
 8001136:	77fb      	strb	r3, [r7, #31]
 8001138:	7ffb      	ldrb	r3, [r7, #31]
 800113a:	2b07      	cmp	r3, #7
 800113c:	d9eb      	bls.n	8001116 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001146:	b29a      	uxth	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0201 	orr.w	r2, r2, #1
 8001150:	b292      	uxth	r2, r2
 8001152:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800115e:	b29a      	uxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0201 	bic.w	r2, r2, #1
 8001168:	b292      	uxth	r2, r2
 800116a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800116e:	bf00      	nop
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001178:	b29b      	uxth	r3, r3
 800117a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f6      	beq.n	8001170 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800118a:	b29a      	uxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001194:	b292      	uxth	r2, r2
 8001196:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800119a:	2300      	movs	r3, #0
 800119c:	77fb      	strb	r3, [r7, #31]
 800119e:	e00f      	b.n	80011c0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80011a0:	7ffb      	ldrb	r3, [r7, #31]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	4611      	mov	r1, r2
 80011a8:	7ffa      	ldrb	r2, [r7, #31]
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	440a      	add	r2, r1
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	3320      	adds	r3, #32
 80011b2:	443b      	add	r3, r7
 80011b4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80011b8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80011ba:	7ffb      	ldrb	r3, [r7, #31]
 80011bc:	3301      	adds	r3, #1
 80011be:	77fb      	strb	r3, [r7, #31]
 80011c0:	7ffb      	ldrb	r3, [r7, #31]
 80011c2:	2b07      	cmp	r3, #7
 80011c4:	d9ec      	bls.n	80011a0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0208 	orr.w	r2, r2, #8
 80011d8:	b292      	uxth	r2, r2
 80011da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011f0:	b292      	uxth	r2, r2
 80011f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011fe:	b29a      	uxth	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 0204 	orr.w	r2, r2, #4
 8001208:	b292      	uxth	r2, r2
 800120a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f009 f956 	bl	800a4c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001214:	e026      	b.n	8001264 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00f      	beq.n	8001240 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001228:	b29a      	uxth	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001232:	b292      	uxth	r2, r2
 8001234:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f009 f914 	bl	800a466 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800123e:	e011      	b.n	8001264 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00c      	beq.n	8001264 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001252:	b29a      	uxth	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800125c:	b292      	uxth	r2, r2
 800125e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001262:	bf00      	nop
  }
}
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <HAL_PCD_SetAddress+0x1a>
 8001280:	2302      	movs	r3, #2
 8001282:	e013      	b.n	80012ac <HAL_PCD_SetAddress+0x42>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	78fa      	ldrb	r2, [r7, #3]
 8001290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	78fa      	ldrb	r2, [r7, #3]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f004 fcef 	bl	8005c80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	4608      	mov	r0, r1
 80012be:	4611      	mov	r1, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	70fb      	strb	r3, [r7, #3]
 80012c6:	460b      	mov	r3, r1
 80012c8:	803b      	strh	r3, [r7, #0]
 80012ca:	4613      	mov	r3, r2
 80012cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da0e      	bge.n	80012f8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2201      	movs	r2, #1
 80012f4:	705a      	strb	r2, [r3, #1]
 80012f6:	e00e      	b.n	8001316 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	f003 0207 	and.w	r2, r3, #7
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	b2da      	uxtb	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001322:	883a      	ldrh	r2, [r7, #0]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	78ba      	ldrb	r2, [r7, #2]
 800132c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800132e:	78bb      	ldrb	r3, [r7, #2]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d102      	bne.n	800133a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001340:	2b01      	cmp	r3, #1
 8001342:	d101      	bne.n	8001348 <HAL_PCD_EP_Open+0x94>
 8001344:	2302      	movs	r3, #2
 8001346:	e00e      	b.n	8001366 <HAL_PCD_EP_Open+0xb2>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68f9      	ldr	r1, [r7, #12]
 8001356:	4618      	mov	r0, r3
 8001358:	f002 fa38 	bl	80037cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8001364:	7afb      	ldrb	r3, [r7, #11]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800137a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800137e:	2b00      	cmp	r3, #0
 8001380:	da0e      	bge.n	80013a0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	1c5a      	adds	r2, r3, #1
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2201      	movs	r2, #1
 800139c:	705a      	strb	r2, [r3, #1]
 800139e:	e00e      	b.n	80013be <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	f003 0207 	and.w	r2, r3, #7
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <HAL_PCD_EP_Close+0x6a>
 80013d4:	2302      	movs	r3, #2
 80013d6:	e00e      	b.n	80013f6 <HAL_PCD_EP_Close+0x88>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68f9      	ldr	r1, [r7, #12]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fdb0 	bl	8003f4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	460b      	mov	r3, r1
 800140c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800140e:	7afb      	ldrb	r3, [r7, #11]
 8001410:	f003 0207 	and.w	r2, r3, #7
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2200      	movs	r2, #0
 800143c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800143e:	7afb      	ldrb	r3, [r7, #11]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	b2da      	uxtb	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6979      	ldr	r1, [r7, #20]
 8001450:	4618      	mov	r0, r3
 8001452:	f002 ff67 	bl	8004324 <USB_EPStartXfer>

  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	f003 0207 	and.w	r2, r3, #7
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	440b      	add	r3, r1
 800147e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	460b      	mov	r3, r1
 800149c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	4413      	add	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2201      	movs	r2, #1
 80014d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014da:	7afb      	ldrb	r3, [r7, #11]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6979      	ldr	r1, [r7, #20]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 ff19 	bl	8004324 <USB_EPStartXfer>

  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f003 0207 	and.w	r2, r3, #7
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	429a      	cmp	r2, r3
 8001514:	d901      	bls.n	800151a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e04c      	b.n	80015b4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800151a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800151e:	2b00      	cmp	r3, #0
 8001520:	da0e      	bge.n	8001540 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2201      	movs	r2, #1
 800153c:	705a      	strb	r2, [r3, #1]
 800153e:	e00c      	b.n	800155a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001540:	78fa      	ldrb	r2, [r7, #3]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2201      	movs	r2, #1
 800155e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	b2da      	uxtb	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_PCD_EP_SetStall+0x7e>
 8001576:	2302      	movs	r3, #2
 8001578:	e01c      	b.n	80015b4 <HAL_PCD_EP_SetStall+0xb8>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68f9      	ldr	r1, [r7, #12]
 8001588:	4618      	mov	r0, r3
 800158a:	f004 fa7c 	bl	8005a86 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	2b00      	cmp	r3, #0
 8001596:	d108      	bne.n	80015aa <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80015a2:	4619      	mov	r1, r3
 80015a4:	4610      	mov	r0, r2
 80015a6:	f004 fba1 	bl	8005cec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	f003 020f 	and.w	r2, r3, #15
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d901      	bls.n	80015da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e040      	b.n	800165c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	da0e      	bge.n	8001600 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2201      	movs	r2, #1
 80015fc:	705a      	strb	r2, [r3, #1]
 80015fe:	e00e      	b.n	800161e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	f003 0207 	and.w	r2, r3, #7
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	b2da      	uxtb	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_PCD_EP_ClrStall+0x82>
 800163a:	2302      	movs	r3, #2
 800163c:	e00e      	b.n	800165c <HAL_PCD_EP_ClrStall+0xa0>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68f9      	ldr	r1, [r7, #12]
 800164c:	4618      	mov	r0, r3
 800164e:	f004 fa6a 	bl	8005b26 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b096      	sub	sp, #88	@ 0x58
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800166c:	e3be      	b.n	8001dec <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001676:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800167a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001688:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800168c:	2b00      	cmp	r3, #0
 800168e:	f040 8178 	bne.w	8001982 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001692:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	2b00      	cmp	r3, #0
 800169c:	d151      	bne.n	8001742 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80016aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80016ae:	81fb      	strh	r3, [r7, #14]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	89fb      	ldrh	r3, [r7, #14]
 80016b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016be:	b29b      	uxth	r3, r3
 80016c0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3328      	adds	r3, #40	@ 0x28
 80016c6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	461a      	mov	r2, r3
 80016d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4413      	add	r3, r2
 80016dc:	3302      	adds	r3, #2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	4413      	add	r3, r2
 80016e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	441a      	add	r2, r3
 80016fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001700:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001702:	2100      	movs	r1, #0
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f008 fe94 	bl	800a432 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 836a 	beq.w	8001dec <PCD_EP_ISR_Handler+0x788>
 8001718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	f040 8365 	bne.w	8001dec <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800172e:	b2da      	uxtb	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001740:	e354      	b.n	8001dec <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001748:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001754:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800175c:	2b00      	cmp	r3, #0
 800175e:	d034      	beq.n	80017ca <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001768:	b29b      	uxth	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	3306      	adds	r3, #6
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	4413      	add	r3, r2
 800177e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800178a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8001796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001798:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800179a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800179c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800179e:	b29b      	uxth	r3, r3
 80017a0:	f004 faf4 	bl	8005d8c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80017b0:	4013      	ands	r3, r2
 80017b2:	823b      	strh	r3, [r7, #16]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	8a3a      	ldrh	r2, [r7, #16]
 80017ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017be:	b292      	uxth	r2, r2
 80017c0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f008 fe08 	bl	800a3d8 <HAL_PCD_SetupStageCallback>
 80017c8:	e310      	b.n	8001dec <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017ca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f280 830c 	bge.w	8001dec <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	b29a      	uxth	r2, r3
 80017dc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80017e0:	4013      	ands	r3, r2
 80017e2:	83fb      	strh	r3, [r7, #30]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	8bfa      	ldrh	r2, [r7, #30]
 80017ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017ee:	b292      	uxth	r2, r2
 80017f0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4413      	add	r3, r2
 8001806:	3306      	adds	r3, #6
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	4413      	add	r3, r2
 8001810:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800181a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800181c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800181e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d019      	beq.n	800185a <PCD_EP_ISR_Handler+0x1f6>
 8001826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d015      	beq.n	800185a <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001834:	6959      	ldr	r1, [r3, #20]
 8001836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001838:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800183a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800183c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800183e:	b29b      	uxth	r3, r3
 8001840:	f004 faa4 	bl	8005d8c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	441a      	add	r2, r3
 800184e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001850:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001852:	2100      	movs	r1, #0
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f008 fdd1 	bl	800a3fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001864:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001868:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800186c:	2b00      	cmp	r3, #0
 800186e:	f040 82bd 	bne.w	8001dec <PCD_EP_ISR_Handler+0x788>
 8001872:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001876:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800187a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800187e:	f000 82b5 	beq.w	8001dec <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001890:	b29b      	uxth	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	4413      	add	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	801a      	strh	r2, [r3, #0]
 80018b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80018b8:	d91d      	bls.n	80018f6 <PCD_EP_ISR_Handler+0x292>
 80018ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80018c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <PCD_EP_ISR_Handler+0x270>
 80018ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018d0:	3b01      	subs	r3, #1
 80018d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018dc:	b29b      	uxth	r3, r3
 80018de:	029b      	lsls	r3, r3, #10
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	801a      	strh	r2, [r3, #0]
 80018f4:	e026      	b.n	8001944 <PCD_EP_ISR_Handler+0x2e0>
 80018f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <PCD_EP_ISR_Handler+0x2b0>
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800190c:	b29a      	uxth	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	801a      	strh	r2, [r3, #0]
 8001912:	e017      	b.n	8001944 <PCD_EP_ISR_Handler+0x2e0>
 8001914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	085b      	lsrs	r3, r3, #1
 800191a:	647b      	str	r3, [r7, #68]	@ 0x44
 800191c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <PCD_EP_ISR_Handler+0x2ca>
 8001928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800192a:	3301      	adds	r3, #1
 800192c:	647b      	str	r3, [r7, #68]	@ 0x44
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	b29a      	uxth	r2, r3
 8001934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001936:	b29b      	uxth	r3, r3
 8001938:	029b      	lsls	r3, r3, #10
 800193a:	b29b      	uxth	r3, r3
 800193c:	4313      	orrs	r3, r2
 800193e:	b29a      	uxth	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	b29b      	uxth	r3, r3
 800194c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001954:	827b      	strh	r3, [r7, #18]
 8001956:	8a7b      	ldrh	r3, [r7, #18]
 8001958:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800195c:	827b      	strh	r3, [r7, #18]
 800195e:	8a7b      	ldrh	r3, [r7, #18]
 8001960:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001964:	827b      	strh	r3, [r7, #18]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	8a7b      	ldrh	r3, [r7, #18]
 800196c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001970:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800197c:	b29b      	uxth	r3, r3
 800197e:	8013      	strh	r3, [r2, #0]
 8001980:	e234      	b.n	8001dec <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001996:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800199a:	2b00      	cmp	r3, #0
 800199c:	f280 80fc 	bge.w	8001b98 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80019b6:	4013      	ands	r3, r2
 80019b8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80019ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019d2:	b292      	uxth	r2, r2
 80019d4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80019d6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80019ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ee:	7b1b      	ldrb	r3, [r3, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d125      	bne.n	8001a40 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4413      	add	r3, r2
 8001a08:	3306      	adds	r3, #6
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a1c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001a20:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8092 	beq.w	8001b4e <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a30:	6959      	ldr	r1, [r3, #20]
 8001a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a34:	88da      	ldrh	r2, [r3, #6]
 8001a36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001a3a:	f004 f9a7 	bl	8005d8c <USB_ReadPMA>
 8001a3e:	e086      	b.n	8001b4e <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a42:	78db      	ldrb	r3, [r3, #3]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d10a      	bne.n	8001a5e <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f9d9 	bl	8001e08 <HAL_PCD_EP_DB_Receive>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001a5c:	e077      	b.n	8001b4e <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a78:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	441a      	add	r2, r3
 8001a8a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001a8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d024      	beq.n	8001b06 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	4413      	add	r3, r2
 8001ada:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ae4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001ae8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d02e      	beq.n	8001b4e <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af6:	6959      	ldr	r1, [r3, #20]
 8001af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001afa:	891a      	ldrh	r2, [r3, #8]
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b00:	f004 f944 	bl	8005d8c <USB_ReadPMA>
 8001b04:	e023      	b.n	8001b4e <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	461a      	mov	r2, r3
 8001b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	3306      	adds	r3, #6
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b2e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001b32:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b40:	6959      	ldr	r1, [r3, #20]
 8001b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b44:	895a      	ldrh	r2, [r3, #10]
 8001b46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b4a:	f004 f91f 	bl	8005d8c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b50:	69da      	ldr	r2, [r3, #28]
 8001b52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b56:	441a      	add	r2, r3
 8001b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b5a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b64:	441a      	add	r2, r3
 8001b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b68:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <PCD_EP_ISR_Handler+0x51a>
 8001b72:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d206      	bcs.n	8001b8c <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f008 fc39 	bl	800a3fc <HAL_PCD_DataOutStageCallback>
 8001b8a:	e005      	b.n	8001b98 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 fbc6 	bl	8004324 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 8123 	beq.w	8001dec <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ba6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bd4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	441a      	add	r2, r3
 8001be6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf8:	78db      	ldrb	r3, [r3, #3]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	f040 80a2 	bne.w	8001d44 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8001c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c08:	7b1b      	ldrb	r3, [r3, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8093 	beq.w	8001d36 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d046      	beq.n	8001caa <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d126      	bne.n	8001c72 <PCD_EP_ISR_Handler+0x60e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	4413      	add	r3, r2
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	011a      	lsls	r2, r3, #4
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	4413      	add	r3, r2
 8001c46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001c4a:	623b      	str	r3, [r7, #32]
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	801a      	strh	r2, [r3, #0]
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	801a      	strh	r2, [r3, #0]
 8001c70:	e061      	b.n	8001d36 <PCD_EP_ISR_Handler+0x6d2>
 8001c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c74:	785b      	ldrb	r3, [r3, #1]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d15d      	bne.n	8001d36 <PCD_EP_ISR_Handler+0x6d2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8e:	4413      	add	r3, r2
 8001c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	011a      	lsls	r2, r3, #4
 8001c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	801a      	strh	r2, [r3, #0]
 8001ca8:	e045      	b.n	8001d36 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb2:	785b      	ldrb	r3, [r3, #1]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d126      	bne.n	8001d06 <PCD_EP_ISR_Handler+0x6a2>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ccc:	4413      	add	r3, r2
 8001cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	011a      	lsls	r2, r3, #4
 8001cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd8:	4413      	add	r3, r2
 8001cda:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001cde:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cee:	801a      	strh	r2, [r3, #0]
 8001cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d02:	801a      	strh	r2, [r3, #0]
 8001d04:	e017      	b.n	8001d36 <PCD_EP_ISR_Handler+0x6d2>
 8001d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d08:	785b      	ldrb	r3, [r3, #1]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d113      	bne.n	8001d36 <PCD_EP_ISR_Handler+0x6d2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d1c:	4413      	add	r3, r2
 8001d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	011a      	lsls	r2, r3, #4
 8001d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d28:	4413      	add	r3, r2
 8001d2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d32:	2200      	movs	r2, #0
 8001d34:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f008 fb78 	bl	800a432 <HAL_PCD_DataInStageCallback>
 8001d42:	e053      	b.n	8001dec <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d146      	bne.n	8001dde <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	3302      	adds	r3, #2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d78:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7e:	699a      	ldr	r2, [r3, #24]
 8001d80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d907      	bls.n	8001d98 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8001d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001d90:	1ad2      	subs	r2, r2, r3
 8001d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d94:	619a      	str	r2, [r3, #24]
 8001d96:	e002      	b.n	8001d9e <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	4619      	mov	r1, r3
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f008 fb40 	bl	800a432 <HAL_PCD_DataInStageCallback>
 8001db2:	e01b      	b.n	8001dec <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001dbc:	441a      	add	r2, r3
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc4:	69da      	ldr	r2, [r3, #28]
 8001dc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001dca:	441a      	add	r2, r3
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dce:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 faa4 	bl	8004324 <USB_EPStartXfer>
 8001ddc:	e006      	b.n	8001dec <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001dde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001de2:	461a      	mov	r2, r3
 8001de4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f91b 	bl	8002022 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f6ff ac38 	blt.w	800166e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3758      	adds	r7, #88	@ 0x58
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	4613      	mov	r3, r2
 8001e14:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d07e      	beq.n	8001f1e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	3302      	adds	r3, #2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e48:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	8b7b      	ldrh	r3, [r7, #26]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d306      	bcc.n	8001e62 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	699a      	ldr	r2, [r3, #24]
 8001e58:	8b7b      	ldrh	r3, [r7, #26]
 8001e5a:	1ad2      	subs	r2, r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	619a      	str	r2, [r3, #24]
 8001e60:	e002      	b.n	8001e68 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d123      	bne.n	8001eb8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e8a:	833b      	strh	r3, [r7, #24]
 8001e8c:	8b3b      	ldrh	r3, [r7, #24]
 8001e8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001e92:	833b      	strh	r3, [r7, #24]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	441a      	add	r2, r3
 8001ea2:	8b3b      	ldrh	r3, [r7, #24]
 8001ea4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ea8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001eac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01f      	beq.n	8001f02 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001edc:	82fb      	strh	r3, [r7, #22]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	441a      	add	r2, r3
 8001eec:	8afb      	ldrh	r3, [r7, #22]
 8001eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001efa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f02:	8b7b      	ldrh	r3, [r7, #26]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8087 	beq.w	8002018 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	6959      	ldr	r1, [r3, #20]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	891a      	ldrh	r2, [r3, #8]
 8001f16:	8b7b      	ldrh	r3, [r7, #26]
 8001f18:	f003 ff38 	bl	8005d8c <USB_ReadPMA>
 8001f1c:	e07c      	b.n	8002018 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	3306      	adds	r3, #6
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f46:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	699a      	ldr	r2, [r3, #24]
 8001f4c:	8b7b      	ldrh	r3, [r7, #26]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d306      	bcc.n	8001f60 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	8b7b      	ldrh	r3, [r7, #26]
 8001f58:	1ad2      	subs	r2, r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	619a      	str	r2, [r3, #24]
 8001f5e:	e002      	b.n	8001f66 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2200      	movs	r2, #0
 8001f64:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d123      	bne.n	8001fb6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f88:	83fb      	strh	r3, [r7, #30]
 8001f8a:	8bfb      	ldrh	r3, [r7, #30]
 8001f8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001f90:	83fb      	strh	r3, [r7, #30]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	441a      	add	r2, r3
 8001fa0:	8bfb      	ldrh	r3, [r7, #30]
 8001fa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001fa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d11f      	bne.n	8002000 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fda:	83bb      	strh	r3, [r7, #28]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	441a      	add	r2, r3
 8001fea:	8bbb      	ldrh	r3, [r7, #28]
 8001fec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ff0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ff4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ff8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002000:	8b7b      	ldrh	r3, [r7, #26]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d008      	beq.n	8002018 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	6959      	ldr	r1, [r3, #20]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	895a      	ldrh	r2, [r3, #10]
 8002012:	8b7b      	ldrh	r3, [r7, #26]
 8002014:	f003 feba 	bl	8005d8c <USB_ReadPMA>
    }
  }

  return count;
 8002018:	8b7b      	ldrh	r3, [r7, #26]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b0a4      	sub	sp, #144	@ 0x90
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	4613      	mov	r3, r2
 800202e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 81dd 	beq.w	80023f6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002044:	b29b      	uxth	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	3302      	adds	r3, #2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4413      	add	r3, r2
 800205a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002064:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	699a      	ldr	r2, [r3, #24]
 800206c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002070:	429a      	cmp	r2, r3
 8002072:	d907      	bls.n	8002084 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	699a      	ldr	r2, [r3, #24]
 8002078:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800207c:	1ad2      	subs	r2, r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	619a      	str	r2, [r3, #24]
 8002082:	e002      	b.n	800208a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2200      	movs	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 80b9 	bne.w	8002206 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d126      	bne.n	80020ea <HAL_PCD_EP_DB_Transmit+0xc8>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b0:	4413      	add	r3, r2
 80020b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	011a      	lsls	r2, r3, #4
 80020ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020bc:	4413      	add	r3, r2
 80020be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80020c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d2:	801a      	strh	r2, [r3, #0]
 80020d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e6:	801a      	strh	r2, [r3, #0]
 80020e8:	e01a      	b.n	8002120 <HAL_PCD_EP_DB_Transmit+0xfe>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	785b      	ldrb	r3, [r3, #1]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d116      	bne.n	8002120 <HAL_PCD_EP_DB_Transmit+0xfe>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002100:	b29b      	uxth	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002106:	4413      	add	r3, r2
 8002108:	637b      	str	r3, [r7, #52]	@ 0x34
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	011a      	lsls	r2, r3, #4
 8002110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002112:	4413      	add	r3, r2
 8002114:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002118:	633b      	str	r3, [r7, #48]	@ 0x30
 800211a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800211c:	2200      	movs	r2, #0
 800211e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	627b      	str	r3, [r7, #36]	@ 0x24
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	785b      	ldrb	r3, [r3, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d126      	bne.n	800217c <HAL_PCD_EP_DB_Transmit+0x15a>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800213c:	b29b      	uxth	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	4413      	add	r3, r2
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	011a      	lsls	r2, r3, #4
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	4413      	add	r3, r2
 8002150:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002160:	b29a      	uxth	r2, r3
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	801a      	strh	r2, [r3, #0]
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002174:	b29a      	uxth	r2, r3
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	801a      	strh	r2, [r3, #0]
 800217a:	e017      	b.n	80021ac <HAL_PCD_EP_DB_Transmit+0x18a>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	785b      	ldrb	r3, [r3, #1]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d113      	bne.n	80021ac <HAL_PCD_EP_DB_Transmit+0x18a>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800218c:	b29b      	uxth	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	4413      	add	r3, r2
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	011a      	lsls	r2, r3, #4
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	4413      	add	r3, r2
 80021a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80021a4:	623b      	str	r3, [r7, #32]
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	2200      	movs	r2, #0
 80021aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4619      	mov	r1, r3
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f008 f93d 	bl	800a432 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 82fc 	beq.w	80027bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021de:	82fb      	strh	r3, [r7, #22]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	441a      	add	r2, r3
 80021ee:	8afb      	ldrh	r3, [r7, #22]
 80021f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002200:	b29b      	uxth	r3, r3
 8002202:	8013      	strh	r3, [r2, #0]
 8002204:	e2da      	b.n	80027bc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d021      	beq.n	8002254 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800222a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	441a      	add	r2, r3
 800223c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002240:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002244:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002248:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800224c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002250:	b29b      	uxth	r3, r3
 8002252:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800225a:	2b01      	cmp	r3, #1
 800225c:	f040 82ae 	bne.w	80027bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002268:	441a      	add	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002276:	441a      	add	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	6a1a      	ldr	r2, [r3, #32]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d30b      	bcc.n	80022a0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6a1a      	ldr	r2, [r3, #32]
 8002294:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002298:	1ad2      	subs	r2, r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	621a      	str	r2, [r3, #32]
 800229e:	e017      	b.n	80022d0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d108      	bne.n	80022ba <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80022a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80022ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80022b8:	e00a      	b.n	80022d0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	785b      	ldrb	r3, [r3, #1]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d165      	bne.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x382>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ec:	4413      	add	r3, r2
 80022ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	011a      	lsls	r2, r3, #4
 80022f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f8:	4413      	add	r3, r2
 80022fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80022fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800230a:	b29a      	uxth	r2, r3
 800230c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800230e:	801a      	strh	r2, [r3, #0]
 8002310:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002314:	2b3e      	cmp	r3, #62	@ 0x3e
 8002316:	d91d      	bls.n	8002354 <HAL_PCD_EP_DB_Transmit+0x332>
 8002318:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002320:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <HAL_PCD_EP_DB_Transmit+0x310>
 800232c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800232e:	3b01      	subs	r3, #1
 8002330:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29a      	uxth	r2, r3
 8002338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800233a:	b29b      	uxth	r3, r3
 800233c:	029b      	lsls	r3, r3, #10
 800233e:	b29b      	uxth	r3, r3
 8002340:	4313      	orrs	r3, r2
 8002342:	b29b      	uxth	r3, r3
 8002344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800234c:	b29a      	uxth	r2, r3
 800234e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002350:	801a      	strh	r2, [r3, #0]
 8002352:	e044      	b.n	80023de <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002354:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <HAL_PCD_EP_DB_Transmit+0x350>
 800235c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	b29b      	uxth	r3, r3
 8002362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800236a:	b29a      	uxth	r2, r3
 800236c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800236e:	801a      	strh	r2, [r3, #0]
 8002370:	e035      	b.n	80023de <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002372:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002376:	085b      	lsrs	r3, r3, #1
 8002378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800237a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_PCD_EP_DB_Transmit+0x36a>
 8002386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002388:	3301      	adds	r3, #1
 800238a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800238c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b29a      	uxth	r2, r3
 8002392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002394:	b29b      	uxth	r3, r3
 8002396:	029b      	lsls	r3, r3, #10
 8002398:	b29b      	uxth	r3, r3
 800239a:	4313      	orrs	r3, r2
 800239c:	b29a      	uxth	r2, r3
 800239e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a0:	801a      	strh	r2, [r3, #0]
 80023a2:	e01c      	b.n	80023de <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	785b      	ldrb	r3, [r3, #1]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d118      	bne.n	80023de <HAL_PCD_EP_DB_Transmit+0x3bc>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023c0:	4413      	add	r3, r2
 80023c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	011a      	lsls	r2, r3, #4
 80023ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023cc:	4413      	add	r3, r2
 80023ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80023d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80023d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d8:	b29a      	uxth	r2, r3
 80023da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023dc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	6959      	ldr	r1, [r3, #20]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	891a      	ldrh	r2, [r3, #8]
 80023ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	f003 fc87 	bl	8005d02 <USB_WritePMA>
 80023f4:	e1e2      	b.n	80027bc <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023fe:	b29b      	uxth	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	3306      	adds	r3, #6
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800242a:	429a      	cmp	r2, r3
 800242c:	d307      	bcc.n	800243e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002436:	1ad2      	subs	r2, r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	619a      	str	r2, [r3, #24]
 800243c:	e002      	b.n	8002444 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 80c0 	bne.w	80025ce <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	785b      	ldrb	r3, [r3, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d126      	bne.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x482>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800246a:	4413      	add	r3, r2
 800246c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	011a      	lsls	r2, r3, #4
 8002474:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002476:	4413      	add	r3, r2
 8002478:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800247c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800247e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002488:	b29a      	uxth	r2, r3
 800248a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800248c:	801a      	strh	r2, [r3, #0]
 800248e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800249c:	b29a      	uxth	r2, r3
 800249e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024a0:	801a      	strh	r2, [r3, #0]
 80024a2:	e01a      	b.n	80024da <HAL_PCD_EP_DB_Transmit+0x4b8>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d116      	bne.n	80024da <HAL_PCD_EP_DB_Transmit+0x4b8>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024c0:	4413      	add	r3, r2
 80024c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	011a      	lsls	r2, r3, #4
 80024ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024cc:	4413      	add	r3, r2
 80024ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80024d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024d6:	2200      	movs	r2, #0
 80024d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	677b      	str	r3, [r7, #116]	@ 0x74
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	785b      	ldrb	r3, [r3, #1]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d12b      	bne.n	8002540 <HAL_PCD_EP_DB_Transmit+0x51e>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024fc:	4413      	add	r3, r2
 80024fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	011a      	lsls	r2, r3, #4
 8002506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002508:	4413      	add	r3, r2
 800250a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800250e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002512:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800251e:	b29a      	uxth	r2, r3
 8002520:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002524:	801a      	strh	r2, [r3, #0]
 8002526:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002536:	b29a      	uxth	r2, r3
 8002538:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800253c:	801a      	strh	r2, [r3, #0]
 800253e:	e017      	b.n	8002570 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	785b      	ldrb	r3, [r3, #1]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d113      	bne.n	8002570 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002550:	b29b      	uxth	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002556:	4413      	add	r3, r2
 8002558:	677b      	str	r3, [r7, #116]	@ 0x74
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	011a      	lsls	r2, r3, #4
 8002560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002562:	4413      	add	r3, r2
 8002564:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002568:	673b      	str	r3, [r7, #112]	@ 0x70
 800256a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800256c:	2200      	movs	r2, #0
 800256e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f007 ff5b 	bl	800a432 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 811a 	bne.w	80027bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	b29b      	uxth	r3, r3
 800259a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800259e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025a2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	441a      	add	r2, r3
 80025b4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	8013      	strh	r3, [r2, #0]
 80025cc:	e0f6      	b.n	80027bc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d121      	bne.n	800261c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	441a      	add	r2, r3
 8002604:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800260c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002610:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002618:	b29b      	uxth	r3, r3
 800261a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002622:	2b01      	cmp	r3, #1
 8002624:	f040 80ca 	bne.w	80027bc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002630:	441a      	add	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800263e:	441a      	add	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	6a1a      	ldr	r2, [r3, #32]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	429a      	cmp	r2, r3
 800264e:	d30b      	bcc.n	8002668 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	6a1a      	ldr	r2, [r3, #32]
 800265c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002660:	1ad2      	subs	r2, r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	621a      	str	r2, [r3, #32]
 8002666:	e017      	b.n	8002698 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d108      	bne.n	8002682 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002670:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002674:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002680:	e00a      	b.n	8002698 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2200      	movs	r2, #0
 800268e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	657b      	str	r3, [r7, #84]	@ 0x54
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	785b      	ldrb	r3, [r3, #1]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d165      	bne.n	8002772 <HAL_PCD_EP_DB_Transmit+0x750>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026ba:	4413      	add	r3, r2
 80026bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	011a      	lsls	r2, r3, #4
 80026c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026c6:	4413      	add	r3, r2
 80026c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d8:	b29a      	uxth	r2, r3
 80026da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026dc:	801a      	strh	r2, [r3, #0]
 80026de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80026e4:	d91d      	bls.n	8002722 <HAL_PCD_EP_DB_Transmit+0x700>
 80026e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_PCD_EP_DB_Transmit+0x6de>
 80026fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026fc:	3b01      	subs	r3, #1
 80026fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002700:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b29a      	uxth	r2, r3
 8002706:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002708:	b29b      	uxth	r3, r3
 800270a:	029b      	lsls	r3, r3, #10
 800270c:	b29b      	uxth	r3, r3
 800270e:	4313      	orrs	r3, r2
 8002710:	b29b      	uxth	r3, r3
 8002712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800271a:	b29a      	uxth	r2, r3
 800271c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800271e:	801a      	strh	r2, [r3, #0]
 8002720:	e041      	b.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <HAL_PCD_EP_DB_Transmit+0x71e>
 800272a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002738:	b29a      	uxth	r2, r3
 800273a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	e032      	b.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002744:	085b      	lsrs	r3, r3, #1
 8002746:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002748:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <HAL_PCD_EP_DB_Transmit+0x738>
 8002754:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002756:	3301      	adds	r3, #1
 8002758:	66bb      	str	r3, [r7, #104]	@ 0x68
 800275a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29a      	uxth	r2, r3
 8002760:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002762:	b29b      	uxth	r3, r3
 8002764:	029b      	lsls	r3, r3, #10
 8002766:	b29b      	uxth	r3, r3
 8002768:	4313      	orrs	r3, r2
 800276a:	b29a      	uxth	r2, r3
 800276c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800276e:	801a      	strh	r2, [r3, #0]
 8002770:	e019      	b.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	785b      	ldrb	r3, [r3, #1]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d115      	bne.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x784>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002782:	b29b      	uxth	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002788:	4413      	add	r3, r2
 800278a:	657b      	str	r3, [r7, #84]	@ 0x54
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	011a      	lsls	r2, r3, #4
 8002792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002794:	4413      	add	r3, r2
 8002796:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800279a:	653b      	str	r3, [r7, #80]	@ 0x50
 800279c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027a4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	6959      	ldr	r1, [r3, #20]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	895a      	ldrh	r2, [r3, #10]
 80027b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	f003 faa3 	bl	8005d02 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027d6:	82bb      	strh	r3, [r7, #20]
 80027d8:	8abb      	ldrh	r3, [r7, #20]
 80027da:	f083 0310 	eor.w	r3, r3, #16
 80027de:	82bb      	strh	r3, [r7, #20]
 80027e0:	8abb      	ldrh	r3, [r7, #20]
 80027e2:	f083 0320 	eor.w	r3, r3, #32
 80027e6:	82bb      	strh	r3, [r7, #20]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	441a      	add	r2, r3
 80027f6:	8abb      	ldrh	r3, [r7, #20]
 80027f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002808:	b29b      	uxth	r3, r3
 800280a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3790      	adds	r7, #144	@ 0x90
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002816:	b480      	push	{r7}
 8002818:	b087      	sub	sp, #28
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	817b      	strh	r3, [r7, #10]
 8002824:	4613      	mov	r3, r2
 8002826:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002828:	897b      	ldrh	r3, [r7, #10]
 800282a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002834:	897b      	ldrh	r3, [r7, #10]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e009      	b.n	8002860 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800284c:	897a      	ldrh	r2, [r7, #10]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4413      	add	r3, r2
 800285e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002860:	893b      	ldrh	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d107      	bne.n	8002876 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2200      	movs	r2, #0
 800286a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	b29a      	uxth	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	80da      	strh	r2, [r3, #6]
 8002874:	e00b      	b.n	800288e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2201      	movs	r2, #1
 800287a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	b29a      	uxth	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	0c1b      	lsrs	r3, r3, #16
 8002888:	b29a      	uxth	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
	...

0800289c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e272      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8087 	beq.w	80029ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028bc:	4b92      	ldr	r3, [pc, #584]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d00c      	beq.n	80028e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d112      	bne.n	80028fa <HAL_RCC_OscConfig+0x5e>
 80028d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e0:	d10b      	bne.n	80028fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e2:	4b89      	ldr	r3, [pc, #548]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d06c      	beq.n	80029c8 <HAL_RCC_OscConfig+0x12c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d168      	bne.n	80029c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e24c      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002902:	d106      	bne.n	8002912 <HAL_RCC_OscConfig+0x76>
 8002904:	4b80      	ldr	r3, [pc, #512]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a7f      	ldr	r2, [pc, #508]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800290a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	e02e      	b.n	8002970 <HAL_RCC_OscConfig+0xd4>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x98>
 800291a:	4b7b      	ldr	r3, [pc, #492]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a7a      	ldr	r2, [pc, #488]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002920:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b78      	ldr	r3, [pc, #480]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a77      	ldr	r2, [pc, #476]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800292c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e01d      	b.n	8002970 <HAL_RCC_OscConfig+0xd4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800293c:	d10c      	bne.n	8002958 <HAL_RCC_OscConfig+0xbc>
 800293e:	4b72      	ldr	r3, [pc, #456]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a71      	ldr	r2, [pc, #452]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002944:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4b6f      	ldr	r3, [pc, #444]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e00b      	b.n	8002970 <HAL_RCC_OscConfig+0xd4>
 8002958:	4b6b      	ldr	r3, [pc, #428]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a6a      	ldr	r2, [pc, #424]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800295e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b68      	ldr	r3, [pc, #416]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a67      	ldr	r2, [pc, #412]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 800296a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800296e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d013      	beq.n	80029a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fd ff9c 	bl	80008b4 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7fd ff98 	bl	80008b4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	@ 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e200      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	4b5d      	ldr	r3, [pc, #372]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0xe4>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fd ff88 	bl	80008b4 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a8:	f7fd ff84 	bl	80008b4 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	@ 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e1ec      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ba:	4b53      	ldr	r3, [pc, #332]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x10c>
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d063      	beq.n	8002a9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00b      	beq.n	80029fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029e2:	4b49      	ldr	r3, [pc, #292]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d11c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x18c>
 80029ee:	4b46      	ldr	r3, [pc, #280]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d116      	bne.n	8002a28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fa:	4b43      	ldr	r3, [pc, #268]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_RCC_OscConfig+0x176>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e1c0      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a12:	4b3d      	ldr	r3, [pc, #244]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4939      	ldr	r1, [pc, #228]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a26:	e03a      	b.n	8002a9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d020      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a30:	4b36      	ldr	r3, [pc, #216]	@ (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7fd ff3d 	bl	80008b4 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3e:	f7fd ff39 	bl	80008b4 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e1a1      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	4b2d      	ldr	r3, [pc, #180]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4927      	ldr	r1, [pc, #156]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	600b      	str	r3, [r1, #0]
 8002a70:	e015      	b.n	8002a9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a72:	4b26      	ldr	r3, [pc, #152]	@ (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7fd ff1c 	bl	80008b4 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a80:	f7fd ff18 	bl	80008b4 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e180      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	4b1d      	ldr	r3, [pc, #116]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d03a      	beq.n	8002b20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d019      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab2:	4b17      	ldr	r3, [pc, #92]	@ (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab8:	f7fd fefc 	bl	80008b4 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac0:	f7fd fef8 	bl	80008b4 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e160      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f000 faea 	bl	80030b8 <RCC_Delay>
 8002ae4:	e01c      	b.n	8002b20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aec:	f7fd fee2 	bl	80008b4 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af2:	e00f      	b.n	8002b14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af4:	f7fd fede 	bl	80008b4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d908      	bls.n	8002b14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e146      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	42420000 	.word	0x42420000
 8002b10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	4b92      	ldr	r3, [pc, #584]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1e9      	bne.n	8002af4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80a6 	beq.w	8002c7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b32:	4b8b      	ldr	r3, [pc, #556]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	4b88      	ldr	r3, [pc, #544]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	4a87      	ldr	r2, [pc, #540]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b48:	61d3      	str	r3, [r2, #28]
 8002b4a:	4b85      	ldr	r3, [pc, #532]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b56:	2301      	movs	r3, #1
 8002b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	4b82      	ldr	r3, [pc, #520]	@ (8002d64 <HAL_RCC_OscConfig+0x4c8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d118      	bne.n	8002b98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b66:	4b7f      	ldr	r3, [pc, #508]	@ (8002d64 <HAL_RCC_OscConfig+0x4c8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d64 <HAL_RCC_OscConfig+0x4c8>)
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b72:	f7fd fe9f 	bl	80008b4 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7a:	f7fd fe9b 	bl	80008b4 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b64      	cmp	r3, #100	@ 0x64
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e103      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	4b75      	ldr	r3, [pc, #468]	@ (8002d64 <HAL_RCC_OscConfig+0x4c8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x312>
 8002ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4a6e      	ldr	r2, [pc, #440]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6213      	str	r3, [r2, #32]
 8002bac:	e02d      	b.n	8002c0a <HAL_RCC_OscConfig+0x36e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x334>
 8002bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4a69      	ldr	r2, [pc, #420]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6213      	str	r3, [r2, #32]
 8002bc2:	4b67      	ldr	r3, [pc, #412]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	4a66      	ldr	r2, [pc, #408]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	f023 0304 	bic.w	r3, r3, #4
 8002bcc:	6213      	str	r3, [r2, #32]
 8002bce:	e01c      	b.n	8002c0a <HAL_RCC_OscConfig+0x36e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x356>
 8002bd8:	4b61      	ldr	r3, [pc, #388]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4a60      	ldr	r2, [pc, #384]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	6213      	str	r3, [r2, #32]
 8002be4:	4b5e      	ldr	r3, [pc, #376]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	4a5d      	ldr	r2, [pc, #372]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6213      	str	r3, [r2, #32]
 8002bf0:	e00b      	b.n	8002c0a <HAL_RCC_OscConfig+0x36e>
 8002bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4a5a      	ldr	r2, [pc, #360]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	6213      	str	r3, [r2, #32]
 8002bfe:	4b58      	ldr	r3, [pc, #352]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4a57      	ldr	r2, [pc, #348]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	f023 0304 	bic.w	r3, r3, #4
 8002c08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d015      	beq.n	8002c3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c12:	f7fd fe4f 	bl	80008b4 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c18:	e00a      	b.n	8002c30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1a:	f7fd fe4b 	bl	80008b4 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e0b1      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c30:	4b4b      	ldr	r3, [pc, #300]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0ee      	beq.n	8002c1a <HAL_RCC_OscConfig+0x37e>
 8002c3c:	e014      	b.n	8002c68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3e:	f7fd fe39 	bl	80008b4 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fd fe35 	bl	80008b4 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e09b      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5c:	4b40      	ldr	r3, [pc, #256]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1ee      	bne.n	8002c46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d105      	bne.n	8002c7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	4a3b      	ldr	r2, [pc, #236]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8087 	beq.w	8002d92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c84:	4b36      	ldr	r3, [pc, #216]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d061      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d146      	bne.n	8002d26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c98:	4b33      	ldr	r3, [pc, #204]	@ (8002d68 <HAL_RCC_OscConfig+0x4cc>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fd fe09 	bl	80008b4 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7fd fe05 	bl	80008b4 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e06d      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb8:	4b29      	ldr	r3, [pc, #164]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f0      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ccc:	d108      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cce:	4b24      	ldr	r3, [pc, #144]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	4921      	ldr	r1, [pc, #132]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a19      	ldr	r1, [r3, #32]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	491b      	ldr	r1, [pc, #108]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <HAL_RCC_OscConfig+0x4cc>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fd fdd9 	bl	80008b4 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fd fdd5 	bl	80008b4 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e03d      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d18:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x46a>
 8002d24:	e035      	b.n	8002d92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b10      	ldr	r3, [pc, #64]	@ (8002d68 <HAL_RCC_OscConfig+0x4cc>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fd fdc2 	bl	80008b4 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fd fdbe 	bl	80008b4 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e026      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d46:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x498>
 8002d52:	e01e      	b.n	8002d92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e019      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40007000 	.word	0x40007000
 8002d68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <HAL_RCC_OscConfig+0x500>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d106      	bne.n	8002d8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000

08002da0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0d0      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b6a      	ldr	r3, [pc, #424]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d910      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b67      	ldr	r3, [pc, #412]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 0207 	bic.w	r2, r3, #7
 8002dca:	4965      	ldr	r1, [pc, #404]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b63      	ldr	r3, [pc, #396]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0b8      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dfc:	4b59      	ldr	r3, [pc, #356]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a58      	ldr	r2, [pc, #352]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e14:	4b53      	ldr	r3, [pc, #332]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4a52      	ldr	r2, [pc, #328]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b50      	ldr	r3, [pc, #320]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	494d      	ldr	r1, [pc, #308]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d040      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b47      	ldr	r3, [pc, #284]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d115      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e07f      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5e:	4b41      	ldr	r3, [pc, #260]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e073      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e06b      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b39      	ldr	r3, [pc, #228]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4936      	ldr	r1, [pc, #216]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e90:	f7fd fd10 	bl	80008b4 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7fd fd0c 	bl	80008b4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e053      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b2d      	ldr	r3, [pc, #180]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 020c 	and.w	r2, r3, #12
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1eb      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b27      	ldr	r3, [pc, #156]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d210      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b24      	ldr	r3, [pc, #144]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 0207 	bic.w	r2, r3, #7
 8002ed6:	4922      	ldr	r1, [pc, #136]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b20      	ldr	r3, [pc, #128]	@ (8002f60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e032      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b19      	ldr	r3, [pc, #100]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4916      	ldr	r1, [pc, #88]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f1a:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	490e      	ldr	r1, [pc, #56]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f2e:	f000 f821 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f32:	4602      	mov	r2, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	490a      	ldr	r1, [pc, #40]	@ (8002f68 <HAL_RCC_ClockConfig+0x1c8>)
 8002f40:	5ccb      	ldrb	r3, [r1, r3]
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	4a09      	ldr	r2, [pc, #36]	@ (8002f6c <HAL_RCC_ClockConfig+0x1cc>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <HAL_RCC_ClockConfig+0x1d0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd faee 	bl	8000530 <HAL_InitTick>

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40022000 	.word	0x40022000
 8002f64:	40021000 	.word	0x40021000
 8002f68:	0800bab0 	.word	0x0800bab0
 8002f6c:	20000004 	.word	0x20000004
 8002f70:	20000008 	.word	0x20000008

08002f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	2300      	movs	r3, #0
 8002f88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d002      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x30>
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d003      	beq.n	8002faa <HAL_RCC_GetSysClockFreq+0x36>
 8002fa2:	e027      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fa4:	4b19      	ldr	r3, [pc, #100]	@ (800300c <HAL_RCC_GetSysClockFreq+0x98>)
 8002fa6:	613b      	str	r3, [r7, #16]
      break;
 8002fa8:	e027      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	0c9b      	lsrs	r3, r3, #18
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	4a17      	ldr	r2, [pc, #92]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fb4:	5cd3      	ldrb	r3, [r2, r3]
 8002fb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d010      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fc2:	4b11      	ldr	r3, [pc, #68]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	0c5b      	lsrs	r3, r3, #17
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	4a11      	ldr	r2, [pc, #68]	@ (8003014 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fce:	5cd3      	ldrb	r3, [r2, r3]
 8002fd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800300c <HAL_RCC_GetSysClockFreq+0x98>)
 8002fd6:	fb03 f202 	mul.w	r2, r3, r2
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	e004      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8003018 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	613b      	str	r3, [r7, #16]
      break;
 8002ff2:	e002      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ff4:	4b05      	ldr	r3, [pc, #20]	@ (800300c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ff6:	613b      	str	r3, [r7, #16]
      break;
 8002ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ffa:	693b      	ldr	r3, [r7, #16]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	007a1200 	.word	0x007a1200
 8003010:	0800bac8 	.word	0x0800bac8
 8003014:	0800bad8 	.word	0x0800bad8
 8003018:	003d0900 	.word	0x003d0900

0800301c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003020:	4b02      	ldr	r3, [pc, #8]	@ (800302c <HAL_RCC_GetHCLKFreq+0x10>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	20000004 	.word	0x20000004

08003030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003034:	f7ff fff2 	bl	800301c <HAL_RCC_GetHCLKFreq>
 8003038:	4602      	mov	r2, r0
 800303a:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	4903      	ldr	r1, [pc, #12]	@ (8003054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003046:	5ccb      	ldrb	r3, [r1, r3]
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800304c:	4618      	mov	r0, r3
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40021000 	.word	0x40021000
 8003054:	0800bac0 	.word	0x0800bac0

08003058 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	220f      	movs	r2, #15
 8003066:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003068:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <HAL_RCC_GetClockConfig+0x58>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0203 	and.w	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003074:	4b0e      	ldr	r3, [pc, #56]	@ (80030b0 <HAL_RCC_GetClockConfig+0x58>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003080:	4b0b      	ldr	r3, [pc, #44]	@ (80030b0 <HAL_RCC_GetClockConfig+0x58>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800308c:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <HAL_RCC_GetClockConfig+0x58>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	08db      	lsrs	r3, r3, #3
 8003092:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800309a:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_RCC_GetClockConfig+0x5c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0207 	and.w	r2, r3, #7
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40022000 	.word	0x40022000

080030b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030c0:	4b0a      	ldr	r3, [pc, #40]	@ (80030ec <RCC_Delay+0x34>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0a      	ldr	r2, [pc, #40]	@ (80030f0 <RCC_Delay+0x38>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	0a5b      	lsrs	r3, r3, #9
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	fb02 f303 	mul.w	r3, r2, r3
 80030d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030d4:	bf00      	nop
  }
  while (Delay --);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1e5a      	subs	r2, r3, #1
 80030da:	60fa      	str	r2, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f9      	bne.n	80030d4 <RCC_Delay+0x1c>
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	20000004 	.word	0x20000004
 80030f0:	10624dd3 	.word	0x10624dd3

080030f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d07d      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003114:	4b4f      	ldr	r3, [pc, #316]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10d      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003120:	4b4c      	ldr	r3, [pc, #304]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	4a4b      	ldr	r2, [pc, #300]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800312a:	61d3      	str	r3, [r2, #28]
 800312c:	4b49      	ldr	r3, [pc, #292]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003138:	2301      	movs	r3, #1
 800313a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	4b46      	ldr	r3, [pc, #280]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d118      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003148:	4b43      	ldr	r3, [pc, #268]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a42      	ldr	r2, [pc, #264]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800314e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003152:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003154:	f7fd fbae 	bl	80008b4 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315a:	e008      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315c:	f7fd fbaa 	bl	80008b4 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	@ 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e06d      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316e:	4b3a      	ldr	r3, [pc, #232]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800317a:	4b36      	ldr	r3, [pc, #216]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003182:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02e      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	429a      	cmp	r2, r3
 8003196:	d027      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003198:	4b2e      	ldr	r3, [pc, #184]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031a2:	4b2e      	ldr	r3, [pc, #184]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031a8:	4b2c      	ldr	r3, [pc, #176]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031ae:	4a29      	ldr	r2, [pc, #164]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d014      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7fd fb79 	bl	80008b4 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c4:	e00a      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c6:	f7fd fb75 	bl	80008b4 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e036      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0ee      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4917      	ldr	r1, [pc, #92]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003200:	4b14      	ldr	r3, [pc, #80]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	4a13      	ldr	r2, [pc, #76]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003218:	4b0e      	ldr	r3, [pc, #56]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	490b      	ldr	r1, [pc, #44]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003236:	4b07      	ldr	r3, [pc, #28]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	4904      	ldr	r1, [pc, #16]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40021000 	.word	0x40021000
 8003258:	40007000 	.word	0x40007000
 800325c:	42420440 	.word	0x42420440

08003260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e041      	b.n	80032f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f839 	bl	80032fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f000 f9b4 	bl	800360c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d001      	beq.n	8003328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e03a      	b.n	800339e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a18      	ldr	r2, [pc, #96]	@ (80033a8 <HAL_TIM_Base_Start_IT+0x98>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00e      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x58>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003352:	d009      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x58>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a14      	ldr	r2, [pc, #80]	@ (80033ac <HAL_TIM_Base_Start_IT+0x9c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d004      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x58>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a13      	ldr	r2, [pc, #76]	@ (80033b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d111      	bne.n	800338c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b06      	cmp	r3, #6
 8003378:	d010      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338a:	e007      	b.n	800339c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800

080033b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d122      	bne.n	8003410 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d11b      	bne.n	8003410 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0202 	mvn.w	r2, #2
 80033e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f8ed 	bl	80035d6 <HAL_TIM_IC_CaptureCallback>
 80033fc:	e005      	b.n	800340a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f8e0 	bl	80035c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f8ef 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b04      	cmp	r3, #4
 800341c:	d122      	bne.n	8003464 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b04      	cmp	r3, #4
 800342a:	d11b      	bne.n	8003464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0204 	mvn.w	r2, #4
 8003434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8c3 	bl	80035d6 <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f8b6 	bl	80035c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f8c5 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b08      	cmp	r3, #8
 8003470:	d122      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b08      	cmp	r3, #8
 800347e:	d11b      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0208 	mvn.w	r2, #8
 8003488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2204      	movs	r2, #4
 800348e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f899 	bl	80035d6 <HAL_TIM_IC_CaptureCallback>
 80034a4:	e005      	b.n	80034b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f88c 	bl	80035c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f89b 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d122      	bne.n	800350c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d11b      	bne.n	800350c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0210 	mvn.w	r2, #16
 80034dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2208      	movs	r2, #8
 80034e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f86f 	bl	80035d6 <HAL_TIM_IC_CaptureCallback>
 80034f8:	e005      	b.n	8003506 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f862 	bl	80035c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f871 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b01      	cmp	r3, #1
 8003518:	d10e      	bne.n	8003538 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d107      	bne.n	8003538 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0201 	mvn.w	r2, #1
 8003530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fc ffac 	bl	8000490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003542:	2b80      	cmp	r3, #128	@ 0x80
 8003544:	d10e      	bne.n	8003564 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003550:	2b80      	cmp	r3, #128	@ 0x80
 8003552:	d107      	bne.n	8003564 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800355c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8bf 	bl	80036e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356e:	2b40      	cmp	r3, #64	@ 0x40
 8003570:	d10e      	bne.n	8003590 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357c:	2b40      	cmp	r3, #64	@ 0x40
 800357e:	d107      	bne.n	8003590 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f835 	bl	80035fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b20      	cmp	r3, #32
 800359c:	d10e      	bne.n	80035bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d107      	bne.n	80035bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0220 	mvn.w	r2, #32
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f88a 	bl	80036d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a29      	ldr	r2, [pc, #164]	@ (80036c4 <TIM_Base_SetConfig+0xb8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00b      	beq.n	800363c <TIM_Base_SetConfig+0x30>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362a:	d007      	beq.n	800363c <TIM_Base_SetConfig+0x30>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a26      	ldr	r2, [pc, #152]	@ (80036c8 <TIM_Base_SetConfig+0xbc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <TIM_Base_SetConfig+0x30>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a25      	ldr	r2, [pc, #148]	@ (80036cc <TIM_Base_SetConfig+0xc0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d108      	bne.n	800364e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a1c      	ldr	r2, [pc, #112]	@ (80036c4 <TIM_Base_SetConfig+0xb8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00b      	beq.n	800366e <TIM_Base_SetConfig+0x62>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800365c:	d007      	beq.n	800366e <TIM_Base_SetConfig+0x62>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a19      	ldr	r2, [pc, #100]	@ (80036c8 <TIM_Base_SetConfig+0xbc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d003      	beq.n	800366e <TIM_Base_SetConfig+0x62>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a18      	ldr	r2, [pc, #96]	@ (80036cc <TIM_Base_SetConfig+0xc0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d108      	bne.n	8003680 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4313      	orrs	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a07      	ldr	r2, [pc, #28]	@ (80036c4 <TIM_Base_SetConfig+0xb8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d103      	bne.n	80036b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	615a      	str	r2, [r3, #20]
}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	40012c00 	.word	0x40012c00
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40000800 	.word	0x40000800

080036d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80036f4:	b084      	sub	sp, #16
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	f107 0014 	add.w	r0, r7, #20
 8003702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	b004      	add	sp, #16
 8003712:	4770      	bx	lr

08003714 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003724:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003728:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	b29a      	uxth	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003748:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800374c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	b29b      	uxth	r3, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	b29b      	uxth	r3, r3
 800375e:	4013      	ands	r3, r2
 8003760:	b29a      	uxth	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800378c:	b084      	sub	sp, #16
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	f107 0014 	add.w	r0, r7, #20
 800379a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	b004      	add	sp, #16
 80037ca:	4770      	bx	lr

080037cc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b09d      	sub	sp, #116	@ 0x74
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80037ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	78db      	ldrb	r3, [r3, #3]
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d81f      	bhi.n	800383e <USB_ActivateEndpoint+0x72>
 80037fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003804 <USB_ActivateEndpoint+0x38>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	08003815 	.word	0x08003815
 8003808:	08003831 	.word	0x08003831
 800380c:	08003847 	.word	0x08003847
 8003810:	08003823 	.word	0x08003823
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003814:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003818:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800381c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003820:	e012      	b.n	8003848 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003822:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003826:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800382a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800382e:	e00b      	b.n	8003848 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003830:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003834:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003838:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800383c:	e004      	b.n	8003848 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003844:	e000      	b.n	8003848 <USB_ActivateEndpoint+0x7c>
      break;
 8003846:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800385a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800385e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003866:	b29b      	uxth	r3, r3
 8003868:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800387c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003880:	b29b      	uxth	r3, r3
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	7812      	ldrb	r2, [r2, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800389a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800389e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	7b1b      	ldrb	r3, [r3, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 8178 	bne.w	8003ba8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	785b      	ldrb	r3, [r3, #1]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8084 	beq.w	80039ca <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	4413      	add	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	011a      	lsls	r2, r3, #4
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	88db      	ldrh	r3, [r3, #6]
 80038ea:	085b      	lsrs	r3, r3, #1
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	827b      	strh	r3, [r7, #18]
 8003904:	8a7b      	ldrh	r3, [r7, #18]
 8003906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01b      	beq.n	8003946 <USB_ActivateEndpoint+0x17a>
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003924:	823b      	strh	r3, [r7, #16]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	441a      	add	r2, r3
 8003930:	8a3b      	ldrh	r3, [r7, #16]
 8003932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800393a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800393e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003942:	b29b      	uxth	r3, r3
 8003944:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	78db      	ldrb	r3, [r3, #3]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d020      	beq.n	8003990 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	b29b      	uxth	r3, r3
 800395c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003964:	81bb      	strh	r3, [r7, #12]
 8003966:	89bb      	ldrh	r3, [r7, #12]
 8003968:	f083 0320 	eor.w	r3, r3, #32
 800396c:	81bb      	strh	r3, [r7, #12]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	441a      	add	r2, r3
 8003978:	89bb      	ldrh	r3, [r7, #12]
 800397a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800397e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800398a:	b29b      	uxth	r3, r3
 800398c:	8013      	strh	r3, [r2, #0]
 800398e:	e2d5      	b.n	8003f3c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039a6:	81fb      	strh	r3, [r7, #14]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	441a      	add	r2, r3
 80039b2:	89fb      	ldrh	r3, [r7, #14]
 80039b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	8013      	strh	r3, [r2, #0]
 80039c8:	e2b8      	b.n	8003f3c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	4413      	add	r3, r2
 80039dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	011a      	lsls	r2, r3, #4
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80039ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	88db      	ldrh	r3, [r3, #6]
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fc:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0e:	4413      	add	r3, r2
 8003a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	011a      	lsls	r2, r3, #4
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a30:	801a      	strh	r2, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a38:	d91d      	bls.n	8003a76 <USB_ActivateEndpoint+0x2aa>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d102      	bne.n	8003a54 <USB_ActivateEndpoint+0x288>
 8003a4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a50:	3b01      	subs	r3, #1
 8003a52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	029b      	lsls	r3, r3, #10
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	4313      	orrs	r3, r2
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a72:	801a      	strh	r2, [r3, #0]
 8003a74:	e026      	b.n	8003ac4 <USB_ActivateEndpoint+0x2f8>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <USB_ActivateEndpoint+0x2c8>
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	e017      	b.n	8003ac4 <USB_ActivateEndpoint+0x2f8>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <USB_ActivateEndpoint+0x2e2>
 8003aa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003aaa:	3301      	adds	r3, #1
 8003aac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	029b      	lsls	r3, r3, #10
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	4313      	orrs	r3, r2
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003ad2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003ad4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01b      	beq.n	8003b14 <USB_ActivateEndpoint+0x348>
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003af2:	843b      	strh	r3, [r7, #32]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	441a      	add	r2, r3
 8003afe:	8c3b      	ldrh	r3, [r7, #32]
 8003b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d124      	bne.n	8003b66 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b32:	83bb      	strh	r3, [r7, #28]
 8003b34:	8bbb      	ldrh	r3, [r7, #28]
 8003b36:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003b3a:	83bb      	strh	r3, [r7, #28]
 8003b3c:	8bbb      	ldrh	r3, [r7, #28]
 8003b3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b42:	83bb      	strh	r3, [r7, #28]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	441a      	add	r2, r3
 8003b4e:	8bbb      	ldrh	r3, [r7, #28]
 8003b50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	8013      	strh	r3, [r2, #0]
 8003b64:	e1ea      	b.n	8003f3c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b7c:	83fb      	strh	r3, [r7, #30]
 8003b7e:	8bfb      	ldrh	r3, [r7, #30]
 8003b80:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b84:	83fb      	strh	r3, [r7, #30]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	441a      	add	r2, r3
 8003b90:	8bfb      	ldrh	r3, [r7, #30]
 8003b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	8013      	strh	r3, [r2, #0]
 8003ba6:	e1c9      	b.n	8003f3c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	78db      	ldrb	r3, [r3, #3]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d11e      	bne.n	8003bee <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	441a      	add	r2, r3
 8003bd4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003bd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003be0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	8013      	strh	r3, [r2, #0]
 8003bec:	e01d      	b.n	8003c2a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c04:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	441a      	add	r2, r3
 8003c12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003c16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c3a:	4413      	add	r3, r2
 8003c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	011a      	lsls	r2, r3, #4
 8003c44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	891b      	ldrh	r3, [r3, #8]
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c5c:	801a      	strh	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c6e:	4413      	add	r3, r2
 8003c70:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	011a      	lsls	r2, r3, #4
 8003c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003c80:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	895b      	ldrh	r3, [r3, #10]
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c90:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f040 8093 	bne.w	8003dc2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003cac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003cb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01b      	beq.n	8003cf0 <USB_ActivateEndpoint+0x524>
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	441a      	add	r2, r3
 8003cda:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003cdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ce4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003cfe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01b      	beq.n	8003d40 <USB_ActivateEndpoint+0x574>
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	441a      	add	r2, r3
 8003d2a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003d2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d56:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003d58:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003d5a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003d5e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003d60:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003d62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003d66:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	441a      	add	r2, r3
 8003d72:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003d74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	441a      	add	r2, r3
 8003daa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003dac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003db0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003db4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	8013      	strh	r3, [r2, #0]
 8003dc0:	e0bc      	b.n	8003f3c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003dd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d01d      	beq.n	8003e1a <USB_ActivateEndpoint+0x64e>
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	441a      	add	r2, r3
 8003e02:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003e06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003e2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01d      	beq.n	8003e72 <USB_ActivateEndpoint+0x6a6>
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	441a      	add	r2, r3
 8003e5a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	78db      	ldrb	r3, [r3, #3]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d024      	beq.n	8003ec4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e90:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003e94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003e98:	f083 0320 	eor.w	r3, r3, #32
 8003e9c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	441a      	add	r2, r3
 8003eaa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003eae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003eb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	8013      	strh	r3, [r2, #0]
 8003ec2:	e01d      	b.n	8003f00 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ed6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eda:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	441a      	add	r2, r3
 8003ee8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003eec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ef0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ef4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f16:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	441a      	add	r2, r3
 8003f24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003f28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003f3c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3774      	adds	r7, #116	@ 0x74
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop

08003f4c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b08d      	sub	sp, #52	@ 0x34
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	7b1b      	ldrb	r3, [r3, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f040 808e 	bne.w	800407c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	785b      	ldrb	r3, [r3, #1]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d044      	beq.n	8003ff2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	81bb      	strh	r3, [r7, #12]
 8003f76:	89bb      	ldrh	r3, [r7, #12]
 8003f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01b      	beq.n	8003fb8 <USB_DeactivateEndpoint+0x6c>
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f96:	817b      	strh	r3, [r7, #10]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	897b      	ldrh	r3, [r7, #10]
 8003fa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fb0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fce:	813b      	strh	r3, [r7, #8]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	441a      	add	r2, r3
 8003fda:	893b      	ldrh	r3, [r7, #8]
 8003fdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fe0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fe4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	8013      	strh	r3, [r2, #0]
 8003ff0:	e192      	b.n	8004318 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	827b      	strh	r3, [r7, #18]
 8004000:	8a7b      	ldrh	r3, [r7, #18]
 8004002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d01b      	beq.n	8004042 <USB_DeactivateEndpoint+0xf6>
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	b29b      	uxth	r3, r3
 8004018:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800401c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004020:	823b      	strh	r3, [r7, #16]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	441a      	add	r2, r3
 800402c:	8a3b      	ldrh	r3, [r7, #16]
 800402e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004036:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800403a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800403e:	b29b      	uxth	r3, r3
 8004040:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	b29b      	uxth	r3, r3
 8004050:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004058:	81fb      	strh	r3, [r7, #14]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	441a      	add	r2, r3
 8004064:	89fb      	ldrh	r3, [r7, #14]
 8004066:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800406a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800406e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004076:	b29b      	uxth	r3, r3
 8004078:	8013      	strh	r3, [r2, #0]
 800407a:	e14d      	b.n	8004318 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	785b      	ldrb	r3, [r3, #1]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f040 80a5 	bne.w	80041d0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	843b      	strh	r3, [r7, #32]
 8004094:	8c3b      	ldrh	r3, [r7, #32]
 8004096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d01b      	beq.n	80040d6 <USB_DeactivateEndpoint+0x18a>
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b4:	83fb      	strh	r3, [r7, #30]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	441a      	add	r2, r3
 80040c0:	8bfb      	ldrh	r3, [r7, #30]
 80040c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	83bb      	strh	r3, [r7, #28]
 80040e4:	8bbb      	ldrh	r3, [r7, #28]
 80040e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01b      	beq.n	8004126 <USB_DeactivateEndpoint+0x1da>
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004104:	837b      	strh	r3, [r7, #26]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	441a      	add	r2, r3
 8004110:	8b7b      	ldrh	r3, [r7, #26]
 8004112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004116:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800411a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800411e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004122:	b29b      	uxth	r3, r3
 8004124:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800413c:	833b      	strh	r3, [r7, #24]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	441a      	add	r2, r3
 8004148:	8b3b      	ldrh	r3, [r7, #24]
 800414a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800414e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004156:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800415a:	b29b      	uxth	r3, r3
 800415c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004174:	82fb      	strh	r3, [r7, #22]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	8afb      	ldrh	r3, [r7, #22]
 8004182:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004186:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800418a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800418e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004192:	b29b      	uxth	r3, r3
 8004194:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041ac:	82bb      	strh	r3, [r7, #20]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	441a      	add	r2, r3
 80041b8:	8abb      	ldrh	r3, [r7, #20]
 80041ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	8013      	strh	r3, [r2, #0]
 80041ce:	e0a3      	b.n	8004318 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80041de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80041e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01b      	beq.n	8004220 <USB_DeactivateEndpoint+0x2d4>
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041fe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	441a      	add	r2, r3
 800420a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800420c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004210:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004214:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800421c:	b29b      	uxth	r3, r3
 800421e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800422e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01b      	beq.n	8004270 <USB_DeactivateEndpoint+0x324>
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800424a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800424e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	441a      	add	r2, r3
 800425a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800425c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004260:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004268:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800426c:	b29b      	uxth	r3, r3
 800426e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004286:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	441a      	add	r2, r3
 8004292:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004294:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004298:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800429c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042be:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	441a      	add	r2, r3
 80042ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042dc:	b29b      	uxth	r3, r3
 80042de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800430c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004314:	b29b      	uxth	r3, r3
 8004316:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3734      	adds	r7, #52	@ 0x34
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr

08004324 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b0c2      	sub	sp, #264	@ 0x108
 8004328:	af00      	add	r7, sp, #0
 800432a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800432e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004332:	6018      	str	r0, [r3, #0]
 8004334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800433c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800433e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	785b      	ldrb	r3, [r3, #1]
 800434a:	2b01      	cmp	r3, #1
 800434c:	f040 86b7 	bne.w	80050be <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	429a      	cmp	r2, r3
 800436a:	d908      	bls.n	800437e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800436c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800437c:	e007      	b.n	800438e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800437e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800438e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	7b1b      	ldrb	r3, [r3, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d13a      	bne.n	8004414 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800439e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6959      	ldr	r1, [r3, #20]
 80043aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	88da      	ldrh	r2, [r3, #6]
 80043b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80043c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80043c4:	6800      	ldr	r0, [r0, #0]
 80043c6:	f001 fc9c 	bl	8005d02 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80043ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4413      	add	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	011a      	lsls	r2, r3, #4
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4413      	add	r3, r2
 8004400:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	f000 be1f 	b.w	8005052 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	78db      	ldrb	r3, [r3, #3]
 8004420:	2b02      	cmp	r3, #2
 8004422:	f040 8462 	bne.w	8004cea <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800442a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6a1a      	ldr	r2, [r3, #32]
 8004432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	429a      	cmp	r2, r3
 8004440:	f240 83df 	bls.w	8004c02 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004448:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800446a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800446e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800447c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	441a      	add	r2, r3
 8004488:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800448c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004490:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004494:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800449c:	b29b      	uxth	r3, r3
 800449e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80044a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6a1a      	ldr	r2, [r3, #32]
 80044ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b0:	1ad2      	subs	r2, r2, r3
 80044b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80044be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 81c7 	beq.w	8004874 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80044e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	785b      	ldrb	r3, [r3, #1]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d177      	bne.n	80045f2 <USB_EPStartXfer+0x2ce>
 8004502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004506:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800450e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004512:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800451c:	b29b      	uxth	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	4413      	add	r3, r2
 8004524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800452a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	011a      	lsls	r2, r3, #4
 8004534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004536:	4413      	add	r3, r2
 8004538:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800453c:	627b      	str	r3, [r7, #36]	@ 0x24
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004548:	b29a      	uxth	r2, r3
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	801a      	strh	r2, [r3, #0]
 800454e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004552:	2b3e      	cmp	r3, #62	@ 0x3e
 8004554:	d921      	bls.n	800459a <USB_EPStartXfer+0x276>
 8004556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2b00      	cmp	r3, #0
 800456a:	d104      	bne.n	8004576 <USB_EPStartXfer+0x252>
 800456c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004570:	3b01      	subs	r3, #1
 8004572:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29a      	uxth	r2, r3
 800457c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004580:	b29b      	uxth	r3, r3
 8004582:	029b      	lsls	r3, r3, #10
 8004584:	b29b      	uxth	r3, r3
 8004586:	4313      	orrs	r3, r2
 8004588:	b29b      	uxth	r3, r3
 800458a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800458e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004592:	b29a      	uxth	r2, r3
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	801a      	strh	r2, [r3, #0]
 8004598:	e050      	b.n	800463c <USB_EPStartXfer+0x318>
 800459a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <USB_EPStartXfer+0x294>
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b4:	801a      	strh	r2, [r3, #0]
 80045b6:	e041      	b.n	800463c <USB_EPStartXfer+0x318>
 80045b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045bc:	085b      	lsrs	r3, r3, #1
 80045be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80045c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d004      	beq.n	80045d8 <USB_EPStartXfer+0x2b4>
 80045ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80045d2:	3301      	adds	r3, #1
 80045d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	029b      	lsls	r3, r3, #10
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	4313      	orrs	r3, r2
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ee:	801a      	strh	r2, [r3, #0]
 80045f0:	e024      	b.n	800463c <USB_EPStartXfer+0x318>
 80045f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	785b      	ldrb	r3, [r3, #1]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d11c      	bne.n	800463c <USB_EPStartXfer+0x318>
 8004602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004606:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004610:	b29b      	uxth	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004616:	4413      	add	r3, r2
 8004618:	633b      	str	r3, [r7, #48]	@ 0x30
 800461a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800461e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	011a      	lsls	r2, r3, #4
 8004628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462a:	4413      	add	r3, r2
 800462c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004630:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004636:	b29a      	uxth	r2, r3
 8004638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800463c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	895b      	ldrh	r3, [r3, #10]
 8004648:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800464c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6959      	ldr	r1, [r3, #20]
 8004658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800465c:	b29b      	uxth	r3, r3
 800465e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004662:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004666:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800466a:	6800      	ldr	r0, [r0, #0]
 800466c:	f001 fb49 	bl	8005d02 <USB_WritePMA>
            ep->xfer_buff += len;
 8004670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004680:	441a      	add	r2, r3
 8004682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800468e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6a1a      	ldr	r2, [r3, #32]
 800469a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800469e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d90f      	bls.n	80046ca <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80046aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6a1a      	ldr	r2, [r3, #32]
 80046b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046ba:	1ad2      	subs	r2, r2, r3
 80046bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	621a      	str	r2, [r3, #32]
 80046c8:	e00e      	b.n	80046e8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80046ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80046da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2200      	movs	r2, #0
 80046e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80046e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d177      	bne.n	80047e8 <USB_EPStartXfer+0x4c4>
 80046f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004708:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004712:	b29b      	uxth	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	4413      	add	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	011a      	lsls	r2, r3, #4
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	4413      	add	r3, r2
 800472e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800473e:	b29a      	uxth	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	801a      	strh	r2, [r3, #0]
 8004744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004748:	2b3e      	cmp	r3, #62	@ 0x3e
 800474a:	d921      	bls.n	8004790 <USB_EPStartXfer+0x46c>
 800474c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800475a:	f003 031f 	and.w	r3, r3, #31
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <USB_EPStartXfer+0x448>
 8004762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004766:	3b01      	subs	r3, #1
 8004768:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29a      	uxth	r2, r3
 8004772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004776:	b29b      	uxth	r3, r3
 8004778:	029b      	lsls	r3, r3, #10
 800477a:	b29b      	uxth	r3, r3
 800477c:	4313      	orrs	r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004788:	b29a      	uxth	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	801a      	strh	r2, [r3, #0]
 800478e:	e056      	b.n	800483e <USB_EPStartXfer+0x51a>
 8004790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <USB_EPStartXfer+0x48a>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b29b      	uxth	r3, r3
 800479e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	801a      	strh	r2, [r3, #0]
 80047ac:	e047      	b.n	800483e <USB_EPStartXfer+0x51a>
 80047ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b2:	085b      	lsrs	r3, r3, #1
 80047b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80047b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <USB_EPStartXfer+0x4aa>
 80047c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047c8:	3301      	adds	r3, #1
 80047ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d8:	b29b      	uxth	r3, r3
 80047da:	029b      	lsls	r3, r3, #10
 80047dc:	b29b      	uxth	r3, r3
 80047de:	4313      	orrs	r3, r2
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	801a      	strh	r2, [r3, #0]
 80047e6:	e02a      	b.n	800483e <USB_EPStartXfer+0x51a>
 80047e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d122      	bne.n	800483e <USB_EPStartXfer+0x51a>
 80047f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	623b      	str	r3, [r7, #32]
 8004804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004812:	b29b      	uxth	r3, r3
 8004814:	461a      	mov	r2, r3
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	4413      	add	r3, r2
 800481a:	623b      	str	r3, [r7, #32]
 800481c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	011a      	lsls	r2, r3, #4
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	4413      	add	r3, r2
 800482e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004832:	61fb      	str	r3, [r7, #28]
 8004834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004838:	b29a      	uxth	r2, r3
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800483e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	891b      	ldrh	r3, [r3, #8]
 800484a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800484e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6959      	ldr	r1, [r3, #20]
 800485a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800485e:	b29b      	uxth	r3, r3
 8004860:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004864:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004868:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800486c:	6800      	ldr	r0, [r0, #0]
 800486e:	f001 fa48 	bl	8005d02 <USB_WritePMA>
 8004872:	e3ee      	b.n	8005052 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d177      	bne.n	8004974 <USB_EPStartXfer+0x650>
 8004884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004888:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004894:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800489e:	b29b      	uxth	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a4:	4413      	add	r3, r2
 80048a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	011a      	lsls	r2, r3, #4
 80048b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048b8:	4413      	add	r3, r2
 80048ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80048be:	647b      	str	r3, [r7, #68]	@ 0x44
 80048c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ce:	801a      	strh	r2, [r3, #0]
 80048d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80048d6:	d921      	bls.n	800491c <USB_EPStartXfer+0x5f8>
 80048d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80048e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <USB_EPStartXfer+0x5d4>
 80048ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048f2:	3b01      	subs	r3, #1
 80048f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80048f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004902:	b29b      	uxth	r3, r3
 8004904:	029b      	lsls	r3, r3, #10
 8004906:	b29b      	uxth	r3, r3
 8004908:	4313      	orrs	r3, r2
 800490a:	b29b      	uxth	r3, r3
 800490c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004914:	b29a      	uxth	r2, r3
 8004916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004918:	801a      	strh	r2, [r3, #0]
 800491a:	e056      	b.n	80049ca <USB_EPStartXfer+0x6a6>
 800491c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <USB_EPStartXfer+0x616>
 8004924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	b29b      	uxth	r3, r3
 800492a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800492e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004932:	b29a      	uxth	r2, r3
 8004934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004936:	801a      	strh	r2, [r3, #0]
 8004938:	e047      	b.n	80049ca <USB_EPStartXfer+0x6a6>
 800493a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d004      	beq.n	800495a <USB_EPStartXfer+0x636>
 8004950:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004954:	3301      	adds	r3, #1
 8004956:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800495a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	b29a      	uxth	r2, r3
 8004960:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004964:	b29b      	uxth	r3, r3
 8004966:	029b      	lsls	r3, r3, #10
 8004968:	b29b      	uxth	r3, r3
 800496a:	4313      	orrs	r3, r2
 800496c:	b29a      	uxth	r2, r3
 800496e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	e02a      	b.n	80049ca <USB_EPStartXfer+0x6a6>
 8004974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	785b      	ldrb	r3, [r3, #1]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d122      	bne.n	80049ca <USB_EPStartXfer+0x6a6>
 8004984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004988:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004994:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800499e:	b29b      	uxth	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049a4:	4413      	add	r3, r2
 80049a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80049a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	011a      	lsls	r2, r3, #4
 80049b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049b8:	4413      	add	r3, r2
 80049ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80049be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80049ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	891b      	ldrh	r3, [r3, #8]
 80049d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6959      	ldr	r1, [r3, #20]
 80049e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80049f0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80049f4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80049f8:	6800      	ldr	r0, [r0, #0]
 80049fa:	f001 f982 	bl	8005d02 <USB_WritePMA>
            ep->xfer_buff += len;
 80049fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a0e:	441a      	add	r2, r3
 8004a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6a1a      	ldr	r2, [r3, #32]
 8004a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d90f      	bls.n	8004a58 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6a1a      	ldr	r2, [r3, #32]
 8004a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a48:	1ad2      	subs	r2, r2, r3
 8004a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	621a      	str	r2, [r3, #32]
 8004a56:	e00e      	b.n	8004a76 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	785b      	ldrb	r3, [r3, #1]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d177      	bne.n	8004b82 <USB_EPStartXfer+0x85e>
 8004a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab2:	4413      	add	r3, r2
 8004ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	011a      	lsls	r2, r3, #4
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004adc:	801a      	strh	r2, [r3, #0]
 8004ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ae2:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ae4:	d921      	bls.n	8004b2a <USB_EPStartXfer+0x806>
 8004ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d104      	bne.n	8004b06 <USB_EPStartXfer+0x7e2>
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b00:	3b01      	subs	r3, #1
 8004b02:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	029b      	lsls	r3, r3, #10
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	4313      	orrs	r3, r2
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b26:	801a      	strh	r2, [r3, #0]
 8004b28:	e050      	b.n	8004bcc <USB_EPStartXfer+0x8a8>
 8004b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <USB_EPStartXfer+0x824>
 8004b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b44:	801a      	strh	r2, [r3, #0]
 8004b46:	e041      	b.n	8004bcc <USB_EPStartXfer+0x8a8>
 8004b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d004      	beq.n	8004b68 <USB_EPStartXfer+0x844>
 8004b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b62:	3301      	adds	r3, #1
 8004b64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	029b      	lsls	r3, r3, #10
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	e024      	b.n	8004bcc <USB_EPStartXfer+0x8a8>
 8004b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d11c      	bne.n	8004bcc <USB_EPStartXfer+0x8a8>
 8004b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ba6:	4413      	add	r3, r2
 8004ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	011a      	lsls	r2, r3, #4
 8004bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bba:	4413      	add	r3, r2
 8004bbc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	895b      	ldrh	r3, [r3, #10]
 8004bd8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6959      	ldr	r1, [r3, #20]
 8004be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004bf2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004bf6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004bfa:	6800      	ldr	r0, [r0, #0]
 8004bfc:	f001 f881 	bl	8005d02 <USB_WritePMA>
 8004c00:	e227      	b.n	8005052 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c38:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004c5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c8e:	4413      	add	r3, r2
 8004c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	011a      	lsls	r2, r3, #4
 8004ca0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	891b      	ldrh	r3, [r3, #8]
 8004cc0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6959      	ldr	r1, [r3, #20]
 8004cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004cda:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004cde:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004ce2:	6800      	ldr	r0, [r0, #0]
 8004ce4:	f001 f80d 	bl	8005d02 <USB_WritePMA>
 8004ce8:	e1b3      	b.n	8005052 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6a1a      	ldr	r2, [r3, #32]
 8004cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cfa:	1ad2      	subs	r2, r2, r3
 8004cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 80c6 	beq.w	8004ebc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d177      	bne.n	8004e3c <USB_EPStartXfer+0xb18>
 8004d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d6c:	4413      	add	r3, r2
 8004d6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	011a      	lsls	r2, r3, #4
 8004d7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d80:	4413      	add	r3, r2
 8004d82:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d86:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d96:	801a      	strh	r2, [r3, #0]
 8004d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d9e:	d921      	bls.n	8004de4 <USB_EPStartXfer+0xac0>
 8004da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d104      	bne.n	8004dc0 <USB_EPStartXfer+0xa9c>
 8004db6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	029b      	lsls	r3, r3, #10
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	e050      	b.n	8004e86 <USB_EPStartXfer+0xb62>
 8004de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <USB_EPStartXfer+0xade>
 8004dec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dfe:	801a      	strh	r2, [r3, #0]
 8004e00:	e041      	b.n	8004e86 <USB_EPStartXfer+0xb62>
 8004e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <USB_EPStartXfer+0xafe>
 8004e18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004e22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	029b      	lsls	r3, r3, #10
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4313      	orrs	r3, r2
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	e024      	b.n	8004e86 <USB_EPStartXfer+0xb62>
 8004e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d11c      	bne.n	8004e86 <USB_EPStartXfer+0xb62>
 8004e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e60:	4413      	add	r3, r2
 8004e62:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	011a      	lsls	r2, r3, #4
 8004e72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e74:	4413      	add	r3, r2
 8004e76:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e84:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	895b      	ldrh	r3, [r3, #10]
 8004e92:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6959      	ldr	r1, [r3, #20]
 8004ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004eac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004eb0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004eb4:	6800      	ldr	r0, [r0, #0]
 8004eb6:	f000 ff24 	bl	8005d02 <USB_WritePMA>
 8004eba:	e0ca      	b.n	8005052 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d177      	bne.n	8004fbc <USB_EPStartXfer+0xc98>
 8004ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004edc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004eec:	4413      	add	r3, r2
 8004eee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	011a      	lsls	r2, r3, #4
 8004efe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f00:	4413      	add	r3, r2
 8004f02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f16:	801a      	strh	r2, [r3, #0]
 8004f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f1e:	d921      	bls.n	8004f64 <USB_EPStartXfer+0xc40>
 8004f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <USB_EPStartXfer+0xc1c>
 8004f36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004f40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	029b      	lsls	r3, r3, #10
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	4313      	orrs	r3, r2
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	e05c      	b.n	800501e <USB_EPStartXfer+0xcfa>
 8004f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <USB_EPStartXfer+0xc5e>
 8004f6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	e04d      	b.n	800501e <USB_EPStartXfer+0xcfa>
 8004f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f86:	085b      	lsrs	r3, r3, #1
 8004f88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d004      	beq.n	8004fa2 <USB_EPStartXfer+0xc7e>
 8004f98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004fa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	029b      	lsls	r3, r3, #10
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fb8:	801a      	strh	r2, [r3, #0]
 8004fba:	e030      	b.n	800501e <USB_EPStartXfer+0xcfa>
 8004fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	785b      	ldrb	r3, [r3, #1]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d128      	bne.n	800501e <USB_EPStartXfer+0xcfa>
 8004fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	011a      	lsls	r2, r3, #4
 8005004:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005008:	4413      	add	r3, r2
 800500a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800500e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005016:	b29a      	uxth	r2, r3
 8005018:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800501c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800501e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	891b      	ldrh	r3, [r3, #8]
 800502a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800502e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6959      	ldr	r1, [r3, #20]
 800503a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800503e:	b29b      	uxth	r3, r3
 8005040:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005044:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005048:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800504c:	6800      	ldr	r0, [r0, #0]
 800504e:	f000 fe58 	bl	8005d02 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005078:	817b      	strh	r3, [r7, #10]
 800507a:	897b      	ldrh	r3, [r7, #10]
 800507c:	f083 0310 	eor.w	r3, r3, #16
 8005080:	817b      	strh	r3, [r7, #10]
 8005082:	897b      	ldrh	r3, [r7, #10]
 8005084:	f083 0320 	eor.w	r3, r3, #32
 8005088:	817b      	strh	r3, [r7, #10]
 800508a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800508e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	441a      	add	r2, r3
 80050a4:	897b      	ldrh	r3, [r7, #10]
 80050a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	8013      	strh	r3, [r2, #0]
 80050ba:	f000 bcde 	b.w	8005a7a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80050be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	7b1b      	ldrb	r3, [r3, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 80bb 	bne.w	8005246 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80050d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699a      	ldr	r2, [r3, #24]
 80050dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d917      	bls.n	800511c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80050ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80050fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510c:	1ad2      	subs	r2, r2, r3
 800510e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	619a      	str	r2, [r3, #24]
 800511a:	e00e      	b.n	800513a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800511c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800512c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2200      	movs	r2, #0
 8005138:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800513a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800513e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800514c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005156:	b29b      	uxth	r3, r3
 8005158:	461a      	mov	r2, r3
 800515a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800515e:	4413      	add	r3, r2
 8005160:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	011a      	lsls	r2, r3, #4
 8005172:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005176:	4413      	add	r3, r2
 8005178:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800517c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005180:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800518c:	b29a      	uxth	r2, r3
 800518e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005198:	2b3e      	cmp	r3, #62	@ 0x3e
 800519a:	d924      	bls.n	80051e6 <USB_EPStartXfer+0xec2>
 800519c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d104      	bne.n	80051bc <USB_EPStartXfer+0xe98>
 80051b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80051b6:	3b01      	subs	r3, #1
 80051b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	029b      	lsls	r3, r3, #10
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	4313      	orrs	r3, r2
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051da:	b29a      	uxth	r2, r3
 80051dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	f000 bc10 	b.w	8005a06 <USB_EPStartXfer+0x16e2>
 80051e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10c      	bne.n	8005208 <USB_EPStartXfer+0xee4>
 80051ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051fe:	b29a      	uxth	r2, r3
 8005200:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005204:	801a      	strh	r2, [r3, #0]
 8005206:	e3fe      	b.n	8005a06 <USB_EPStartXfer+0x16e2>
 8005208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800520c:	085b      	lsrs	r3, r3, #1
 800520e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d004      	beq.n	8005228 <USB_EPStartXfer+0xf04>
 800521e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005222:	3301      	adds	r3, #1
 8005224:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005228:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	b29a      	uxth	r2, r3
 8005230:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005234:	b29b      	uxth	r3, r3
 8005236:	029b      	lsls	r3, r3, #10
 8005238:	b29b      	uxth	r3, r3
 800523a:	4313      	orrs	r3, r2
 800523c:	b29a      	uxth	r2, r3
 800523e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005242:	801a      	strh	r2, [r3, #0]
 8005244:	e3df      	b.n	8005a06 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	78db      	ldrb	r3, [r3, #3]
 8005252:	2b02      	cmp	r3, #2
 8005254:	f040 8218 	bne.w	8005688 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	785b      	ldrb	r3, [r3, #1]
 8005264:	2b00      	cmp	r3, #0
 8005266:	f040 809d 	bne.w	80053a4 <USB_EPStartXfer+0x1080>
 800526a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800526e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005286:	b29b      	uxth	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800528e:	4413      	add	r3, r2
 8005290:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	011a      	lsls	r2, r3, #4
 80052a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052a6:	4413      	add	r3, r2
 80052a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052bc:	b29a      	uxth	r2, r3
 80052be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052c2:	801a      	strh	r2, [r3, #0]
 80052c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80052d2:	d92b      	bls.n	800532c <USB_EPStartXfer+0x1008>
 80052d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 031f 	and.w	r3, r3, #31
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d104      	bne.n	8005304 <USB_EPStartXfer+0xfe0>
 80052fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052fe:	3b01      	subs	r3, #1
 8005300:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29a      	uxth	r2, r3
 800530c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005310:	b29b      	uxth	r3, r3
 8005312:	029b      	lsls	r3, r3, #10
 8005314:	b29b      	uxth	r3, r3
 8005316:	4313      	orrs	r3, r2
 8005318:	b29b      	uxth	r3, r3
 800531a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800531e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005322:	b29a      	uxth	r2, r3
 8005324:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005328:	801a      	strh	r2, [r3, #0]
 800532a:	e070      	b.n	800540e <USB_EPStartXfer+0x10ea>
 800532c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10c      	bne.n	8005356 <USB_EPStartXfer+0x1032>
 800533c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534c:	b29a      	uxth	r2, r3
 800534e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	e05b      	b.n	800540e <USB_EPStartXfer+0x10ea>
 8005356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	085b      	lsrs	r3, r3, #1
 8005364:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <USB_EPStartXfer+0x1062>
 800537c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005380:	3301      	adds	r3, #1
 8005382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29a      	uxth	r2, r3
 800538e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005392:	b29b      	uxth	r3, r3
 8005394:	029b      	lsls	r3, r3, #10
 8005396:	b29b      	uxth	r3, r3
 8005398:	4313      	orrs	r3, r2
 800539a:	b29a      	uxth	r2, r3
 800539c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053a0:	801a      	strh	r2, [r3, #0]
 80053a2:	e034      	b.n	800540e <USB_EPStartXfer+0x10ea>
 80053a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d12c      	bne.n	800540e <USB_EPStartXfer+0x10ea>
 80053b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053d8:	4413      	add	r3, r2
 80053da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	011a      	lsls	r2, r3, #4
 80053ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053f0:	4413      	add	r3, r2
 80053f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	b29a      	uxth	r2, r3
 8005408:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800540c:	801a      	strh	r2, [r3, #0]
 800540e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800541c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	2b00      	cmp	r3, #0
 800542a:	f040 809d 	bne.w	8005568 <USB_EPStartXfer+0x1244>
 800542e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005432:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800543c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005440:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800544a:	b29b      	uxth	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005452:	4413      	add	r3, r2
 8005454:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	011a      	lsls	r2, r3, #4
 8005466:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800546a:	4413      	add	r3, r2
 800546c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005474:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	b29b      	uxth	r3, r3
 800547c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005480:	b29a      	uxth	r2, r3
 8005482:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b3e      	cmp	r3, #62	@ 0x3e
 8005496:	d92b      	bls.n	80054f0 <USB_EPStartXfer+0x11cc>
 8005498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800549c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80054aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d104      	bne.n	80054c8 <USB_EPStartXfer+0x11a4>
 80054be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c2:	3b01      	subs	r3, #1
 80054c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80054c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	029b      	lsls	r3, r3, #10
 80054d8:	b29b      	uxth	r3, r3
 80054da:	4313      	orrs	r3, r2
 80054dc:	b29b      	uxth	r3, r3
 80054de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	e069      	b.n	80055c4 <USB_EPStartXfer+0x12a0>
 80054f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10c      	bne.n	800551a <USB_EPStartXfer+0x11f6>
 8005500:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b29b      	uxth	r3, r3
 8005508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005510:	b29a      	uxth	r2, r3
 8005512:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	e054      	b.n	80055c4 <USB_EPStartXfer+0x12a0>
 800551a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	085b      	lsrs	r3, r3, #1
 8005528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800552c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d004      	beq.n	800554a <USB_EPStartXfer+0x1226>
 8005540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005544:	3301      	adds	r3, #1
 8005546:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800554a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29a      	uxth	r2, r3
 8005552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005556:	b29b      	uxth	r3, r3
 8005558:	029b      	lsls	r3, r3, #10
 800555a:	b29b      	uxth	r3, r3
 800555c:	4313      	orrs	r3, r2
 800555e:	b29a      	uxth	r2, r3
 8005560:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005564:	801a      	strh	r2, [r3, #0]
 8005566:	e02d      	b.n	80055c4 <USB_EPStartXfer+0x12a0>
 8005568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d125      	bne.n	80055c4 <USB_EPStartXfer+0x12a0>
 8005578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005586:	b29b      	uxth	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800558e:	4413      	add	r3, r2
 8005590:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	011a      	lsls	r2, r3, #4
 80055a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80055a6:	4413      	add	r3, r2
 80055a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	b29a      	uxth	r2, r3
 80055be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055c2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80055c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8218 	beq.w	8005a06 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80055d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80055f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80055fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d005      	beq.n	800560e <USB_EPStartXfer+0x12ea>
 8005602:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10d      	bne.n	800562a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800560e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005616:	2b00      	cmp	r3, #0
 8005618:	f040 81f5 	bne.w	8005a06 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800561c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	f040 81ee 	bne.w	8005a06 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800562a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800564c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005650:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005658:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	441a      	add	r2, r3
 800566e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005672:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005676:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800567a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800567e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005682:	b29b      	uxth	r3, r3
 8005684:	8013      	strh	r3, [r2, #0]
 8005686:	e1be      	b.n	8005a06 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	78db      	ldrb	r3, [r3, #3]
 8005694:	2b01      	cmp	r3, #1
 8005696:	f040 81b4 	bne.w	8005a02 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800569a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800569e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d917      	bls.n	80056e6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80056b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80056c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d6:	1ad2      	subs	r2, r2, r3
 80056d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	619a      	str	r2, [r3, #24]
 80056e4:	e00e      	b.n	8005704 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80056e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80056f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2200      	movs	r2, #0
 8005702:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f040 8085 	bne.w	8005820 <USB_EPStartXfer+0x14fc>
 8005716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800571a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005728:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005732:	b29b      	uxth	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800573a:	4413      	add	r3, r2
 800573c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	011a      	lsls	r2, r3, #4
 800574e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005752:	4413      	add	r3, r2
 8005754:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005758:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800575c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005768:	b29a      	uxth	r2, r3
 800576a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800576e:	801a      	strh	r2, [r3, #0]
 8005770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005774:	2b3e      	cmp	r3, #62	@ 0x3e
 8005776:	d923      	bls.n	80057c0 <USB_EPStartXfer+0x149c>
 8005778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <USB_EPStartXfer+0x1474>
 800578e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005792:	3b01      	subs	r3, #1
 8005794:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29a      	uxth	r2, r3
 80057a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	029b      	lsls	r3, r3, #10
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	4313      	orrs	r3, r2
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	e060      	b.n	8005882 <USB_EPStartXfer+0x155e>
 80057c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10c      	bne.n	80057e2 <USB_EPStartXfer+0x14be>
 80057c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d8:	b29a      	uxth	r2, r3
 80057da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80057de:	801a      	strh	r2, [r3, #0]
 80057e0:	e04f      	b.n	8005882 <USB_EPStartXfer+0x155e>
 80057e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e6:	085b      	lsrs	r3, r3, #1
 80057e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80057ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <USB_EPStartXfer+0x14de>
 80057f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057fc:	3301      	adds	r3, #1
 80057fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005802:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29a      	uxth	r2, r3
 800580a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800580e:	b29b      	uxth	r3, r3
 8005810:	029b      	lsls	r3, r3, #10
 8005812:	b29b      	uxth	r3, r3
 8005814:	4313      	orrs	r3, r2
 8005816:	b29a      	uxth	r2, r3
 8005818:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800581c:	801a      	strh	r2, [r3, #0]
 800581e:	e030      	b.n	8005882 <USB_EPStartXfer+0x155e>
 8005820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d128      	bne.n	8005882 <USB_EPStartXfer+0x155e>
 8005830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005834:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800583e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005842:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800584c:	b29b      	uxth	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005854:	4413      	add	r3, r2
 8005856:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800585a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	011a      	lsls	r2, r3, #4
 8005868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800586c:	4413      	add	r3, r2
 800586e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005872:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587a:	b29a      	uxth	r2, r3
 800587c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005886:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	785b      	ldrb	r3, [r3, #1]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f040 8085 	bne.w	80059ac <USB_EPStartXfer+0x1688>
 80058a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80058b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058be:	b29b      	uxth	r3, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80058c6:	4413      	add	r3, r2
 80058c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80058cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	011a      	lsls	r2, r3, #4
 80058da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80058de:	4413      	add	r3, r2
 80058e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80058fa:	801a      	strh	r2, [r3, #0]
 80058fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005900:	2b3e      	cmp	r3, #62	@ 0x3e
 8005902:	d923      	bls.n	800594c <USB_EPStartXfer+0x1628>
 8005904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005912:	f003 031f 	and.w	r3, r3, #31
 8005916:	2b00      	cmp	r3, #0
 8005918:	d104      	bne.n	8005924 <USB_EPStartXfer+0x1600>
 800591a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800591e:	3b01      	subs	r3, #1
 8005920:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005924:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29a      	uxth	r2, r3
 800592c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005930:	b29b      	uxth	r3, r3
 8005932:	029b      	lsls	r3, r3, #10
 8005934:	b29b      	uxth	r3, r3
 8005936:	4313      	orrs	r3, r2
 8005938:	b29b      	uxth	r3, r3
 800593a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005942:	b29a      	uxth	r2, r3
 8005944:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	e05c      	b.n	8005a06 <USB_EPStartXfer+0x16e2>
 800594c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10c      	bne.n	800596e <USB_EPStartXfer+0x164a>
 8005954:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005964:	b29a      	uxth	r2, r3
 8005966:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800596a:	801a      	strh	r2, [r3, #0]
 800596c:	e04b      	b.n	8005a06 <USB_EPStartXfer+0x16e2>
 800596e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005972:	085b      	lsrs	r3, r3, #1
 8005974:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <USB_EPStartXfer+0x166a>
 8005984:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005988:	3301      	adds	r3, #1
 800598a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800598e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29a      	uxth	r2, r3
 8005996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800599a:	b29b      	uxth	r3, r3
 800599c:	029b      	lsls	r3, r3, #10
 800599e:	b29b      	uxth	r3, r3
 80059a0:	4313      	orrs	r3, r2
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	e02c      	b.n	8005a06 <USB_EPStartXfer+0x16e2>
 80059ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	785b      	ldrb	r3, [r3, #1]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d124      	bne.n	8005a06 <USB_EPStartXfer+0x16e2>
 80059bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059d2:	4413      	add	r3, r2
 80059d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	011a      	lsls	r2, r3, #4
 80059e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059ea:	4413      	add	r3, r2
 80059ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80059fe:	801a      	strh	r2, [r3, #0]
 8005a00:	e001      	b.n	8005a06 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e03a      	b.n	8005a7c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005a30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005a34:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005a38:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005a3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005a40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a44:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	441a      	add	r2, r3
 8005a62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d020      	beq.n	8005ada <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aae:	81bb      	strh	r3, [r7, #12]
 8005ab0:	89bb      	ldrh	r3, [r7, #12]
 8005ab2:	f083 0310 	eor.w	r3, r3, #16
 8005ab6:	81bb      	strh	r3, [r7, #12]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	441a      	add	r2, r3
 8005ac2:	89bb      	ldrh	r3, [r7, #12]
 8005ac4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ac8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005acc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	8013      	strh	r3, [r2, #0]
 8005ad8:	e01f      	b.n	8005b1a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005aec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af0:	81fb      	strh	r3, [r7, #14]
 8005af2:	89fb      	ldrh	r3, [r7, #14]
 8005af4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005af8:	81fb      	strh	r3, [r7, #14]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	441a      	add	r2, r3
 8005b04:	89fb      	ldrh	r3, [r7, #14]
 8005b06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr

08005b26 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b087      	sub	sp, #28
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	7b1b      	ldrb	r3, [r3, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f040 809d 	bne.w	8005c74 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d04c      	beq.n	8005bdc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	823b      	strh	r3, [r7, #16]
 8005b50:	8a3b      	ldrh	r3, [r7, #16]
 8005b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d01b      	beq.n	8005b92 <USB_EPClearStall+0x6c>
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b70:	81fb      	strh	r3, [r7, #14]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	441a      	add	r2, r3
 8005b7c:	89fb      	ldrh	r3, [r7, #14]
 8005b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	78db      	ldrb	r3, [r3, #3]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d06c      	beq.n	8005c74 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb0:	81bb      	strh	r3, [r7, #12]
 8005bb2:	89bb      	ldrh	r3, [r7, #12]
 8005bb4:	f083 0320 	eor.w	r3, r3, #32
 8005bb8:	81bb      	strh	r3, [r7, #12]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	89bb      	ldrh	r3, [r7, #12]
 8005bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	8013      	strh	r3, [r2, #0]
 8005bda:	e04b      	b.n	8005c74 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	82fb      	strh	r3, [r7, #22]
 8005bea:	8afb      	ldrh	r3, [r7, #22]
 8005bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01b      	beq.n	8005c2c <USB_EPClearStall+0x106>
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0a:	82bb      	strh	r3, [r7, #20]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	8abb      	ldrh	r3, [r7, #20]
 8005c18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c42:	827b      	strh	r3, [r7, #18]
 8005c44:	8a7b      	ldrh	r3, [r7, #18]
 8005c46:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005c4a:	827b      	strh	r3, [r7, #18]
 8005c4c:	8a7b      	ldrh	r3, [r7, #18]
 8005c4e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c52:	827b      	strh	r3, [r7, #18]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	441a      	add	r2, r3
 8005c5e:	8a7b      	ldrh	r3, [r7, #18]
 8005c60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr

08005c80 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d103      	bne.n	8005c9a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2280      	movs	r2, #128	@ 0x80
 8005c96:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr

08005ca6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	4770      	bx	lr

08005cba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr

08005cce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr

08005cec <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bc80      	pop	{r7}
 8005d00:	4770      	bx	lr

08005d02 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b08b      	sub	sp, #44	@ 0x2c
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	461a      	mov	r2, r3
 8005d10:	460b      	mov	r3, r1
 8005d12:	80fb      	strh	r3, [r7, #6]
 8005d14:	4613      	mov	r3, r2
 8005d16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005d18:	88bb      	ldrh	r3, [r7, #4]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	085b      	lsrs	r3, r3, #1
 8005d1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	005a      	lsls	r2, r3, #1
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d34:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d3a:	e01e      	b.n	8005d7a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	3301      	adds	r3, #1
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	021b      	lsls	r3, r3, #8
 8005d4a:	b21a      	sxth	r2, r3
 8005d4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	b21b      	sxth	r3, r3
 8005d54:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	8a7a      	ldrh	r2, [r7, #18]
 8005d5a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	3302      	adds	r3, #2
 8005d60:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	3302      	adds	r3, #2
 8005d66:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	3301      	adds	r3, #1
 8005d72:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	3b01      	subs	r3, #1
 8005d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1dd      	bne.n	8005d3c <USB_WritePMA+0x3a>
  }
}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	372c      	adds	r7, #44	@ 0x2c
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr

08005d8c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b08b      	sub	sp, #44	@ 0x2c
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	4611      	mov	r1, r2
 8005d98:	461a      	mov	r2, r3
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	80fb      	strh	r3, [r7, #6]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005da2:	88bb      	ldrh	r3, [r7, #4]
 8005da4:	085b      	lsrs	r3, r3, #1
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005db2:	88fb      	ldrh	r3, [r7, #6]
 8005db4:	005a      	lsls	r2, r3, #1
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dbe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dc4:	e01b      	b.n	8005dfe <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	3301      	adds	r3, #1
 8005de0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	0a1b      	lsrs	r3, r3, #8
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	3301      	adds	r3, #1
 8005df0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	3302      	adds	r3, #2
 8005df6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e0      	bne.n	8005dc6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005e04:	88bb      	ldrh	r3, [r7, #4]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d007      	beq.n	8005e20 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	701a      	strb	r2, [r3, #0]
  }
}
 8005e20:	bf00      	nop
 8005e22:	372c      	adds	r7, #44	@ 0x2c
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr

08005e2a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	460b      	mov	r3, r1
 8005e34:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	7c1b      	ldrb	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d115      	bne.n	8005e6e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e46:	2202      	movs	r2, #2
 8005e48:	2181      	movs	r1, #129	@ 0x81
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f004 fbd5 	bl	800a5fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f004 fbcb 	bl	800a5fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8005e6c:	e012      	b.n	8005e94 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e6e:	2340      	movs	r3, #64	@ 0x40
 8005e70:	2202      	movs	r2, #2
 8005e72:	2181      	movs	r1, #129	@ 0x81
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f004 fbc0 	bl	800a5fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e80:	2340      	movs	r3, #64	@ 0x40
 8005e82:	2202      	movs	r2, #2
 8005e84:	2101      	movs	r1, #1
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f004 fbb7 	bl	800a5fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e94:	2308      	movs	r3, #8
 8005e96:	2203      	movs	r2, #3
 8005e98:	2182      	movs	r1, #130	@ 0x82
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f004 fbad 	bl	800a5fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ea6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005eaa:	f004 fccd 	bl	800a848 <USBD_static_malloc>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d102      	bne.n	8005ec6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	73fb      	strb	r3, [r7, #15]
 8005ec4:	e026      	b.n	8005f14 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ecc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	7c1b      	ldrb	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d109      	bne.n	8005f04 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ef6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005efa:	2101      	movs	r1, #1
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f004 fc6d 	bl	800a7dc <USBD_LL_PrepareReceive>
 8005f02:	e007      	b.n	8005f14 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f0a:	2340      	movs	r3, #64	@ 0x40
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f004 fc64 	bl	800a7dc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f2e:	2181      	movs	r1, #129	@ 0x81
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f004 fb88 	bl	800a646 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f004 fb81 	bl	800a646 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f4c:	2182      	movs	r1, #130	@ 0x82
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f004 fb79 	bl	800a646 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00e      	beq.n	8005f82 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f74:	4618      	mov	r0, r3
 8005f76:	f004 fc73 	bl	800a860 <USBD_static_free>
    pdev->pClassData = NULL;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f9c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d039      	beq.n	800602a <USBD_CDC_Setup+0x9e>
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d17f      	bne.n	80060ba <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	88db      	ldrh	r3, [r3, #6]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d029      	beq.n	8006016 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b25b      	sxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	da11      	bge.n	8005ff0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005fd8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	88d2      	ldrh	r2, [r2, #6]
 8005fde:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005fe0:	6939      	ldr	r1, [r7, #16]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	88db      	ldrh	r3, [r3, #6]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f001 fa05 	bl	80073f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005fee:	e06b      	b.n	80060c8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	785a      	ldrb	r2, [r3, #1]
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	88db      	ldrh	r3, [r3, #6]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006006:	6939      	ldr	r1, [r7, #16]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	88db      	ldrh	r3, [r3, #6]
 800600c:	461a      	mov	r2, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f001 fa20 	bl	8007454 <USBD_CtlPrepareRx>
      break;
 8006014:	e058      	b.n	80060c8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	7850      	ldrb	r0, [r2, #1]
 8006022:	2200      	movs	r2, #0
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	4798      	blx	r3
      break;
 8006028:	e04e      	b.n	80060c8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	785b      	ldrb	r3, [r3, #1]
 800602e:	2b0b      	cmp	r3, #11
 8006030:	d02e      	beq.n	8006090 <USBD_CDC_Setup+0x104>
 8006032:	2b0b      	cmp	r3, #11
 8006034:	dc38      	bgt.n	80060a8 <USBD_CDC_Setup+0x11c>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <USBD_CDC_Setup+0xb4>
 800603a:	2b0a      	cmp	r3, #10
 800603c:	d014      	beq.n	8006068 <USBD_CDC_Setup+0xdc>
 800603e:	e033      	b.n	80060a8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006046:	2b03      	cmp	r3, #3
 8006048:	d107      	bne.n	800605a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800604a:	f107 030c 	add.w	r3, r7, #12
 800604e:	2202      	movs	r2, #2
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f001 f9d0 	bl	80073f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006058:	e02e      	b.n	80060b8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800605a:	6839      	ldr	r1, [r7, #0]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 f961 	bl	8007324 <USBD_CtlError>
            ret = USBD_FAIL;
 8006062:	2302      	movs	r3, #2
 8006064:	75fb      	strb	r3, [r7, #23]
          break;
 8006066:	e027      	b.n	80060b8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800606e:	2b03      	cmp	r3, #3
 8006070:	d107      	bne.n	8006082 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006072:	f107 030f 	add.w	r3, r7, #15
 8006076:	2201      	movs	r2, #1
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 f9bc 	bl	80073f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006080:	e01a      	b.n	80060b8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 f94d 	bl	8007324 <USBD_CtlError>
            ret = USBD_FAIL;
 800608a:	2302      	movs	r3, #2
 800608c:	75fb      	strb	r3, [r7, #23]
          break;
 800608e:	e013      	b.n	80060b8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006096:	2b03      	cmp	r3, #3
 8006098:	d00d      	beq.n	80060b6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800609a:	6839      	ldr	r1, [r7, #0]
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 f941 	bl	8007324 <USBD_CtlError>
            ret = USBD_FAIL;
 80060a2:	2302      	movs	r3, #2
 80060a4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80060a6:	e006      	b.n	80060b6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 f93a 	bl	8007324 <USBD_CtlError>
          ret = USBD_FAIL;
 80060b0:	2302      	movs	r3, #2
 80060b2:	75fb      	strb	r3, [r7, #23]
          break;
 80060b4:	e000      	b.n	80060b8 <USBD_CDC_Setup+0x12c>
          break;
 80060b6:	bf00      	nop
      }
      break;
 80060b8:	e006      	b.n	80060c8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 f931 	bl	8007324 <USBD_CtlError>
      ret = USBD_FAIL;
 80060c2:	2302      	movs	r3, #2
 80060c4:	75fb      	strb	r3, [r7, #23]
      break;
 80060c6:	bf00      	nop
  }

  return ret;
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	460b      	mov	r3, r1
 80060dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060e4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80060ec:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d03a      	beq.n	800616e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80060f8:	78fa      	ldrb	r2, [r7, #3]
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	331c      	adds	r3, #28
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d029      	beq.n	8006162 <USBD_CDC_DataIn+0x90>
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	4613      	mov	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	331c      	adds	r3, #28
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	78f9      	ldrb	r1, [r7, #3]
 8006122:	68b8      	ldr	r0, [r7, #8]
 8006124:	460b      	mov	r3, r1
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	440b      	add	r3, r1
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4403      	add	r3, r0
 800612e:	3338      	adds	r3, #56	@ 0x38
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	fbb2 f1f3 	udiv	r1, r2, r3
 8006136:	fb01 f303 	mul.w	r3, r1, r3
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d110      	bne.n	8006162 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	331c      	adds	r3, #28
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006154:	78f9      	ldrb	r1, [r7, #3]
 8006156:	2300      	movs	r3, #0
 8006158:	2200      	movs	r2, #0
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f004 fb1b 	bl	800a796 <USBD_LL_Transmit>
 8006160:	e003      	b.n	800616a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	e000      	b.n	8006170 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800616e:	2302      	movs	r3, #2
  }
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800618a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f004 fb46 	bl	800a822 <USBD_LL_GetRxDataSize>
 8006196:	4602      	mov	r2, r0
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00d      	beq.n	80061c4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80061bc:	4611      	mov	r1, r2
 80061be:	4798      	blx	r3

    return USBD_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	e000      	b.n	80061c6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80061c4:	2302      	movs	r3, #2
  }
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061dc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d014      	beq.n	8006212 <USBD_CDC_EP0_RxReady+0x44>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80061ee:	2bff      	cmp	r3, #255	@ 0xff
 80061f0:	d00f      	beq.n	8006212 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006200:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006208:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	22ff      	movs	r2, #255	@ 0xff
 800620e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2243      	movs	r2, #67	@ 0x43
 8006228:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800622a:	4b03      	ldr	r3, [pc, #12]	@ (8006238 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	bc80      	pop	{r7}
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	20000098 	.word	0x20000098

0800623c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2243      	movs	r2, #67	@ 0x43
 8006248:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800624a:	4b03      	ldr	r3, [pc, #12]	@ (8006258 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	20000054 	.word	0x20000054

0800625c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2243      	movs	r2, #67	@ 0x43
 8006268:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800626a:	4b03      	ldr	r3, [pc, #12]	@ (8006278 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	bc80      	pop	{r7}
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	200000dc 	.word	0x200000dc

0800627c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	220a      	movs	r2, #10
 8006288:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800628a:	4b03      	ldr	r3, [pc, #12]	@ (8006298 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	20000010 	.word	0x20000010

0800629c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80062a6:	2302      	movs	r3, #2
 80062a8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bc80      	pop	{r7}
 80062c6:	4770      	bx	lr

080062c8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062dc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80062e6:	88fa      	ldrh	r2, [r7, #6]
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr

080062fa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b085      	sub	sp, #20
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800630a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr

08006320 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800632e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006336:	2b00      	cmp	r3, #0
 8006338:	d01c      	beq.n	8006374 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006340:	2b00      	cmp	r3, #0
 8006342:	d115      	bne.n	8006370 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006362:	b29b      	uxth	r3, r3
 8006364:	2181      	movs	r1, #129	@ 0x81
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f004 fa15 	bl	800a796 <USBD_LL_Transmit>

      return USBD_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	e002      	b.n	8006376 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006374:	2302      	movs	r3, #2
  }
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800638c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d017      	beq.n	80063c8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	7c1b      	ldrb	r3, [r3, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d109      	bne.n	80063b4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80063a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063aa:	2101      	movs	r1, #1
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f004 fa15 	bl	800a7dc <USBD_LL_PrepareReceive>
 80063b2:	e007      	b.n	80063c4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80063ba:	2340      	movs	r3, #64	@ 0x40
 80063bc:	2101      	movs	r1, #1
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f004 fa0c 	bl	800a7dc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e000      	b.n	80063ca <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80063c8:	2302      	movs	r3, #2
  }
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	4613      	mov	r3, r2
 80063de:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063e6:	2302      	movs	r3, #2
 80063e8:	e01a      	b.n	8006420 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	79fa      	ldrb	r2, [r7, #7]
 8006416:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f004 f879 	bl	800a510 <USBD_LL_Init>

  return USBD_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d006      	beq.n	800644a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006444:	2300      	movs	r3, #0
 8006446:	73fb      	strb	r3, [r7, #15]
 8006448:	e001      	b.n	800644e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800644a:	2302      	movs	r3, #2
 800644c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800644e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	bc80      	pop	{r7}
 8006458:	4770      	bx	lr

0800645a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f004 f8ae 	bl	800a5c4 <USBD_LL_Start>

  return USBD_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr

08006486 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006492:	2302      	movs	r3, #2
 8006494:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00c      	beq.n	80064ba <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	78fa      	ldrb	r2, [r7, #3]
 80064aa:	4611      	mov	r1, r2
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	78fa      	ldrb	r2, [r7, #3]
 80064da:	4611      	mov	r1, r2
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	4798      	blx	r3

  return USBD_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fed8 	bl	80072b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006510:	461a      	mov	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800651e:	f003 031f 	and.w	r3, r3, #31
 8006522:	2b02      	cmp	r3, #2
 8006524:	d016      	beq.n	8006554 <USBD_LL_SetupStage+0x6a>
 8006526:	2b02      	cmp	r3, #2
 8006528:	d81c      	bhi.n	8006564 <USBD_LL_SetupStage+0x7a>
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <USBD_LL_SetupStage+0x4a>
 800652e:	2b01      	cmp	r3, #1
 8006530:	d008      	beq.n	8006544 <USBD_LL_SetupStage+0x5a>
 8006532:	e017      	b.n	8006564 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f9cb 	bl	80068d8 <USBD_StdDevReq>
      break;
 8006542:	e01a      	b.n	800657a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fa2d 	bl	80069ac <USBD_StdItfReq>
      break;
 8006552:	e012      	b.n	800657a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fa6d 	bl	8006a3c <USBD_StdEPReq>
      break;
 8006562:	e00a      	b.n	800657a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800656a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800656e:	b2db      	uxtb	r3, r3
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f004 f886 	bl	800a684 <USBD_LL_StallEP>
      break;
 8006578:	bf00      	nop
  }

  return USBD_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	460b      	mov	r3, r1
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006592:	7afb      	ldrb	r3, [r7, #11]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d14b      	bne.n	8006630 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800659e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d134      	bne.n	8006614 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d919      	bls.n	80065ea <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	1ad2      	subs	r2, r2, r3
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d203      	bcs.n	80065d8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	e002      	b.n	80065de <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80065dc:	b29b      	uxth	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 ff54 	bl	8007490 <USBD_CtlContinueRx>
 80065e8:	e038      	b.n	800665c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d105      	bne.n	800660c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 ff51 	bl	80074b4 <USBD_CtlSendStatus>
 8006612:	e023      	b.n	800665c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800661a:	2b05      	cmp	r3, #5
 800661c:	d11e      	bne.n	800665c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006626:	2100      	movs	r1, #0
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f004 f82b 	bl	800a684 <USBD_LL_StallEP>
 800662e:	e015      	b.n	800665c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00d      	beq.n	8006658 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006642:	2b03      	cmp	r3, #3
 8006644:	d108      	bne.n	8006658 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	7afa      	ldrb	r2, [r7, #11]
 8006650:	4611      	mov	r1, r2
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	4798      	blx	r3
 8006656:	e001      	b.n	800665c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006658:	2302      	movs	r3, #2
 800665a:	e000      	b.n	800665e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b086      	sub	sp, #24
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	460b      	mov	r3, r1
 8006670:	607a      	str	r2, [r7, #4]
 8006672:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006674:	7afb      	ldrb	r3, [r7, #11]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d17f      	bne.n	800677a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3314      	adds	r3, #20
 800667e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006686:	2b02      	cmp	r3, #2
 8006688:	d15c      	bne.n	8006744 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	429a      	cmp	r2, r3
 8006694:	d915      	bls.n	80066c2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	6879      	ldr	r1, [r7, #4]
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 febe 	bl	8007430 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066b4:	2300      	movs	r3, #0
 80066b6:	2200      	movs	r2, #0
 80066b8:	2100      	movs	r1, #0
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f004 f88e 	bl	800a7dc <USBD_LL_PrepareReceive>
 80066c0:	e04e      	b.n	8006760 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	6912      	ldr	r2, [r2, #16]
 80066ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80066ce:	fb01 f202 	mul.w	r2, r1, r2
 80066d2:	1a9b      	subs	r3, r3, r2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d11c      	bne.n	8006712 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d316      	bcc.n	8006712 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d20f      	bcs.n	8006712 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066f2:	2200      	movs	r2, #0
 80066f4:	2100      	movs	r1, #0
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 fe9a 	bl	8007430 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006704:	2300      	movs	r3, #0
 8006706:	2200      	movs	r2, #0
 8006708:	2100      	movs	r1, #0
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f004 f866 	bl	800a7dc <USBD_LL_PrepareReceive>
 8006710:	e026      	b.n	8006760 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006724:	2b03      	cmp	r3, #3
 8006726:	d105      	bne.n	8006734 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006734:	2180      	movs	r1, #128	@ 0x80
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f003 ffa4 	bl	800a684 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 fecc 	bl	80074da <USBD_CtlReceiveStatus>
 8006742:	e00d      	b.n	8006760 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800674a:	2b04      	cmp	r3, #4
 800674c:	d004      	beq.n	8006758 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006754:	2b00      	cmp	r3, #0
 8006756:	d103      	bne.n	8006760 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006758:	2180      	movs	r1, #128	@ 0x80
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f003 ff92 	bl	800a684 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006766:	2b01      	cmp	r3, #1
 8006768:	d11d      	bne.n	80067a6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7ff fe81 	bl	8006472 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006778:	e015      	b.n	80067a6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00d      	beq.n	80067a2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800678c:	2b03      	cmp	r3, #3
 800678e:	d108      	bne.n	80067a2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	7afa      	ldrb	r2, [r7, #11]
 800679a:	4611      	mov	r1, r2
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	4798      	blx	r3
 80067a0:	e001      	b.n	80067a6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80067a2:	2302      	movs	r3, #2
 80067a4:	e000      	b.n	80067a8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067b8:	2340      	movs	r3, #64	@ 0x40
 80067ba:	2200      	movs	r2, #0
 80067bc:	2100      	movs	r1, #0
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f003 ff1b 	bl	800a5fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2240      	movs	r2, #64	@ 0x40
 80067d0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067d4:	2340      	movs	r3, #64	@ 0x40
 80067d6:	2200      	movs	r2, #0
 80067d8:	2180      	movs	r1, #128	@ 0x80
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f003 ff0d 	bl	800a5fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2240      	movs	r2, #64	@ 0x40
 80067ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d009      	beq.n	8006828 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6852      	ldr	r2, [r2, #4]
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	4611      	mov	r1, r2
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	4798      	blx	r3
  }

  return USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	460b      	mov	r3, r1
 800683c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	78fa      	ldrb	r2, [r7, #3]
 8006842:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr

08006850 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2204      	movs	r2, #4
 8006868:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr

08006878 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006886:	2b04      	cmp	r3, #4
 8006888:	d105      	bne.n	8006896 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	bc80      	pop	{r7}
 80068a0:	4770      	bx	lr

080068a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b082      	sub	sp, #8
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d10b      	bne.n	80068cc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068ee:	2b40      	cmp	r3, #64	@ 0x40
 80068f0:	d005      	beq.n	80068fe <USBD_StdDevReq+0x26>
 80068f2:	2b40      	cmp	r3, #64	@ 0x40
 80068f4:	d84f      	bhi.n	8006996 <USBD_StdDevReq+0xbe>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d009      	beq.n	800690e <USBD_StdDevReq+0x36>
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	d14b      	bne.n	8006996 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
      break;
 800690c:	e048      	b.n	80069a0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	785b      	ldrb	r3, [r3, #1]
 8006912:	2b09      	cmp	r3, #9
 8006914:	d839      	bhi.n	800698a <USBD_StdDevReq+0xb2>
 8006916:	a201      	add	r2, pc, #4	@ (adr r2, 800691c <USBD_StdDevReq+0x44>)
 8006918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691c:	0800696d 	.word	0x0800696d
 8006920:	08006981 	.word	0x08006981
 8006924:	0800698b 	.word	0x0800698b
 8006928:	08006977 	.word	0x08006977
 800692c:	0800698b 	.word	0x0800698b
 8006930:	0800694f 	.word	0x0800694f
 8006934:	08006945 	.word	0x08006945
 8006938:	0800698b 	.word	0x0800698b
 800693c:	08006963 	.word	0x08006963
 8006940:	08006959 	.word	0x08006959
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f9dc 	bl	8006d04 <USBD_GetDescriptor>
          break;
 800694c:	e022      	b.n	8006994 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fb3f 	bl	8006fd4 <USBD_SetAddress>
          break;
 8006956:	e01d      	b.n	8006994 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fb7e 	bl	800705c <USBD_SetConfig>
          break;
 8006960:	e018      	b.n	8006994 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fc07 	bl	8007178 <USBD_GetConfig>
          break;
 800696a:	e013      	b.n	8006994 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fc37 	bl	80071e2 <USBD_GetStatus>
          break;
 8006974:	e00e      	b.n	8006994 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fc65 	bl	8007248 <USBD_SetFeature>
          break;
 800697e:	e009      	b.n	8006994 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fc74 	bl	8007270 <USBD_ClrFeature>
          break;
 8006988:	e004      	b.n	8006994 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fcc9 	bl	8007324 <USBD_CtlError>
          break;
 8006992:	bf00      	nop
      }
      break;
 8006994:	e004      	b.n	80069a0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fcc3 	bl	8007324 <USBD_CtlError>
      break;
 800699e:	bf00      	nop
  }

  return ret;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop

080069ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069c2:	2b40      	cmp	r3, #64	@ 0x40
 80069c4:	d005      	beq.n	80069d2 <USBD_StdItfReq+0x26>
 80069c6:	2b40      	cmp	r3, #64	@ 0x40
 80069c8:	d82e      	bhi.n	8006a28 <USBD_StdItfReq+0x7c>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <USBD_StdItfReq+0x26>
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d12a      	bne.n	8006a28 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069d8:	3b01      	subs	r3, #1
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d81d      	bhi.n	8006a1a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	889b      	ldrh	r3, [r3, #4]
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d813      	bhi.n	8006a10 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	4798      	blx	r3
 80069f6:	4603      	mov	r3, r0
 80069f8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	88db      	ldrh	r3, [r3, #6]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d110      	bne.n	8006a24 <USBD_StdItfReq+0x78>
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10d      	bne.n	8006a24 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fd53 	bl	80074b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a0e:	e009      	b.n	8006a24 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fc86 	bl	8007324 <USBD_CtlError>
          break;
 8006a18:	e004      	b.n	8006a24 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fc81 	bl	8007324 <USBD_CtlError>
          break;
 8006a22:	e000      	b.n	8006a26 <USBD_StdItfReq+0x7a>
          break;
 8006a24:	bf00      	nop
      }
      break;
 8006a26:	e004      	b.n	8006a32 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fc7a 	bl	8007324 <USBD_CtlError>
      break;
 8006a30:	bf00      	nop
  }

  return USBD_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	889b      	ldrh	r3, [r3, #4]
 8006a4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a58:	2b40      	cmp	r3, #64	@ 0x40
 8006a5a:	d007      	beq.n	8006a6c <USBD_StdEPReq+0x30>
 8006a5c:	2b40      	cmp	r3, #64	@ 0x40
 8006a5e:	f200 8146 	bhi.w	8006cee <USBD_StdEPReq+0x2b2>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <USBD_StdEPReq+0x40>
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	f040 8141 	bne.w	8006cee <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	4798      	blx	r3
      break;
 8006a7a:	e13d      	b.n	8006cf8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d10a      	bne.n	8006a9e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
 8006a96:	4603      	mov	r3, r0
 8006a98:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	e12d      	b.n	8006cfa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	d007      	beq.n	8006ab6 <USBD_StdEPReq+0x7a>
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	f300 811b 	bgt.w	8006ce2 <USBD_StdEPReq+0x2a6>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d072      	beq.n	8006b96 <USBD_StdEPReq+0x15a>
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d03a      	beq.n	8006b2a <USBD_StdEPReq+0xee>
 8006ab4:	e115      	b.n	8006ce2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d002      	beq.n	8006ac6 <USBD_StdEPReq+0x8a>
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	d015      	beq.n	8006af0 <USBD_StdEPReq+0xb4>
 8006ac4:	e02b      	b.n	8006b1e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00c      	beq.n	8006ae6 <USBD_StdEPReq+0xaa>
 8006acc:	7bbb      	ldrb	r3, [r7, #14]
 8006ace:	2b80      	cmp	r3, #128	@ 0x80
 8006ad0:	d009      	beq.n	8006ae6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ad2:	7bbb      	ldrb	r3, [r7, #14]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f003 fdd4 	bl	800a684 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006adc:	2180      	movs	r1, #128	@ 0x80
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f003 fdd0 	bl	800a684 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ae4:	e020      	b.n	8006b28 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fc1b 	bl	8007324 <USBD_CtlError>
              break;
 8006aee:	e01b      	b.n	8006b28 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	885b      	ldrh	r3, [r3, #2]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10e      	bne.n	8006b16 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00b      	beq.n	8006b16 <USBD_StdEPReq+0xda>
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
 8006b00:	2b80      	cmp	r3, #128	@ 0x80
 8006b02:	d008      	beq.n	8006b16 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	88db      	ldrh	r3, [r3, #6]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d104      	bne.n	8006b16 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006b0c:	7bbb      	ldrb	r3, [r7, #14]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f003 fdb7 	bl	800a684 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fccc 	bl	80074b4 <USBD_CtlSendStatus>

              break;
 8006b1c:	e004      	b.n	8006b28 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fbff 	bl	8007324 <USBD_CtlError>
              break;
 8006b26:	bf00      	nop
          }
          break;
 8006b28:	e0e0      	b.n	8006cec <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d002      	beq.n	8006b3a <USBD_StdEPReq+0xfe>
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d015      	beq.n	8006b64 <USBD_StdEPReq+0x128>
 8006b38:	e026      	b.n	8006b88 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00c      	beq.n	8006b5a <USBD_StdEPReq+0x11e>
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	2b80      	cmp	r3, #128	@ 0x80
 8006b44:	d009      	beq.n	8006b5a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f003 fd9a 	bl	800a684 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b50:	2180      	movs	r1, #128	@ 0x80
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f003 fd96 	bl	800a684 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b58:	e01c      	b.n	8006b94 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fbe1 	bl	8007324 <USBD_CtlError>
              break;
 8006b62:	e017      	b.n	8006b94 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	885b      	ldrh	r3, [r3, #2]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d112      	bne.n	8006b92 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d004      	beq.n	8006b80 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f003 fda1 	bl	800a6c2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fc97 	bl	80074b4 <USBD_CtlSendStatus>
              }
              break;
 8006b86:	e004      	b.n	8006b92 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fbca 	bl	8007324 <USBD_CtlError>
              break;
 8006b90:	e000      	b.n	8006b94 <USBD_StdEPReq+0x158>
              break;
 8006b92:	bf00      	nop
          }
          break;
 8006b94:	e0aa      	b.n	8006cec <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d002      	beq.n	8006ba6 <USBD_StdEPReq+0x16a>
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d032      	beq.n	8006c0a <USBD_StdEPReq+0x1ce>
 8006ba4:	e097      	b.n	8006cd6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d007      	beq.n	8006bbc <USBD_StdEPReq+0x180>
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	2b80      	cmp	r3, #128	@ 0x80
 8006bb0:	d004      	beq.n	8006bbc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fbb5 	bl	8007324 <USBD_CtlError>
                break;
 8006bba:	e091      	b.n	8006ce0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	da0b      	bge.n	8006bdc <USBD_StdEPReq+0x1a0>
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
 8006bc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	3310      	adds	r3, #16
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	3304      	adds	r3, #4
 8006bda:	e00b      	b.n	8006bf4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fbf8 	bl	80073f8 <USBD_CtlSendData>
              break;
 8006c08:	e06a      	b.n	8006ce0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	da11      	bge.n	8006c36 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	f003 020f 	and.w	r2, r3, #15
 8006c18:	6879      	ldr	r1, [r7, #4]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	440b      	add	r3, r1
 8006c24:	3318      	adds	r3, #24
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d117      	bne.n	8006c5c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fb78 	bl	8007324 <USBD_CtlError>
                  break;
 8006c34:	e054      	b.n	8006ce0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c36:	7bbb      	ldrb	r3, [r7, #14]
 8006c38:	f003 020f 	and.w	r2, r3, #15
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fb65 	bl	8007324 <USBD_CtlError>
                  break;
 8006c5a:	e041      	b.n	8006ce0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	da0b      	bge.n	8006c7c <USBD_StdEPReq+0x240>
 8006c64:	7bbb      	ldrb	r3, [r7, #14]
 8006c66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	3310      	adds	r3, #16
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	4413      	add	r3, r2
 8006c78:	3304      	adds	r3, #4
 8006c7a:	e00b      	b.n	8006c94 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
 8006c7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	4413      	add	r3, r2
 8006c92:	3304      	adds	r3, #4
 8006c94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <USBD_StdEPReq+0x266>
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	2b80      	cmp	r3, #128	@ 0x80
 8006ca0:	d103      	bne.n	8006caa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	e00e      	b.n	8006cc8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f003 fd26 	bl	800a700 <USBD_LL_IsStallEP>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	e002      	b.n	8006cc8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fb92 	bl	80073f8 <USBD_CtlSendData>
              break;
 8006cd4:	e004      	b.n	8006ce0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fb23 	bl	8007324 <USBD_CtlError>
              break;
 8006cde:	bf00      	nop
          }
          break;
 8006ce0:	e004      	b.n	8006cec <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fb1d 	bl	8007324 <USBD_CtlError>
          break;
 8006cea:	bf00      	nop
      }
      break;
 8006cec:	e004      	b.n	8006cf8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fb17 	bl	8007324 <USBD_CtlError>
      break;
 8006cf6:	bf00      	nop
  }

  return ret;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	885b      	ldrh	r3, [r3, #2]
 8006d1e:	0a1b      	lsrs	r3, r3, #8
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	2b06      	cmp	r3, #6
 8006d26:	f200 8128 	bhi.w	8006f7a <USBD_GetDescriptor+0x276>
 8006d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d30 <USBD_GetDescriptor+0x2c>)
 8006d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d30:	08006d4d 	.word	0x08006d4d
 8006d34:	08006d65 	.word	0x08006d65
 8006d38:	08006da5 	.word	0x08006da5
 8006d3c:	08006f7b 	.word	0x08006f7b
 8006d40:	08006f7b 	.word	0x08006f7b
 8006d44:	08006f1b 	.word	0x08006f1b
 8006d48:	08006f47 	.word	0x08006f47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	7c12      	ldrb	r2, [r2, #16]
 8006d58:	f107 0108 	add.w	r1, r7, #8
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4798      	blx	r3
 8006d60:	60f8      	str	r0, [r7, #12]
      break;
 8006d62:	e112      	b.n	8006f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	7c1b      	ldrb	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10d      	bne.n	8006d88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d74:	f107 0208 	add.w	r2, r7, #8
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4798      	blx	r3
 8006d7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3301      	adds	r3, #1
 8006d82:	2202      	movs	r2, #2
 8006d84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d86:	e100      	b.n	8006f8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d90:	f107 0208 	add.w	r2, r7, #8
 8006d94:	4610      	mov	r0, r2
 8006d96:	4798      	blx	r3
 8006d98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	2202      	movs	r2, #2
 8006da0:	701a      	strb	r2, [r3, #0]
      break;
 8006da2:	e0f2      	b.n	8006f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	885b      	ldrh	r3, [r3, #2]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b05      	cmp	r3, #5
 8006dac:	f200 80ac 	bhi.w	8006f08 <USBD_GetDescriptor+0x204>
 8006db0:	a201      	add	r2, pc, #4	@ (adr r2, 8006db8 <USBD_GetDescriptor+0xb4>)
 8006db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db6:	bf00      	nop
 8006db8:	08006dd1 	.word	0x08006dd1
 8006dbc:	08006e05 	.word	0x08006e05
 8006dc0:	08006e39 	.word	0x08006e39
 8006dc4:	08006e6d 	.word	0x08006e6d
 8006dc8:	08006ea1 	.word	0x08006ea1
 8006dcc:	08006ed5 	.word	0x08006ed5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00b      	beq.n	8006df4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	7c12      	ldrb	r2, [r2, #16]
 8006de8:	f107 0108 	add.w	r1, r7, #8
 8006dec:	4610      	mov	r0, r2
 8006dee:	4798      	blx	r3
 8006df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006df2:	e091      	b.n	8006f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fa94 	bl	8007324 <USBD_CtlError>
            err++;
 8006dfc:	7afb      	ldrb	r3, [r7, #11]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	72fb      	strb	r3, [r7, #11]
          break;
 8006e02:	e089      	b.n	8006f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	7c12      	ldrb	r2, [r2, #16]
 8006e1c:	f107 0108 	add.w	r1, r7, #8
 8006e20:	4610      	mov	r0, r2
 8006e22:	4798      	blx	r3
 8006e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e26:	e077      	b.n	8006f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fa7a 	bl	8007324 <USBD_CtlError>
            err++;
 8006e30:	7afb      	ldrb	r3, [r7, #11]
 8006e32:	3301      	adds	r3, #1
 8006e34:	72fb      	strb	r3, [r7, #11]
          break;
 8006e36:	e06f      	b.n	8006f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00b      	beq.n	8006e5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	7c12      	ldrb	r2, [r2, #16]
 8006e50:	f107 0108 	add.w	r1, r7, #8
 8006e54:	4610      	mov	r0, r2
 8006e56:	4798      	blx	r3
 8006e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e5a:	e05d      	b.n	8006f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa60 	bl	8007324 <USBD_CtlError>
            err++;
 8006e64:	7afb      	ldrb	r3, [r7, #11]
 8006e66:	3301      	adds	r3, #1
 8006e68:	72fb      	strb	r3, [r7, #11]
          break;
 8006e6a:	e055      	b.n	8006f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00b      	beq.n	8006e90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	7c12      	ldrb	r2, [r2, #16]
 8006e84:	f107 0108 	add.w	r1, r7, #8
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
 8006e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e8e:	e043      	b.n	8006f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fa46 	bl	8007324 <USBD_CtlError>
            err++;
 8006e98:	7afb      	ldrb	r3, [r7, #11]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e9e:	e03b      	b.n	8006f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00b      	beq.n	8006ec4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	7c12      	ldrb	r2, [r2, #16]
 8006eb8:	f107 0108 	add.w	r1, r7, #8
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4798      	blx	r3
 8006ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ec2:	e029      	b.n	8006f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fa2c 	bl	8007324 <USBD_CtlError>
            err++;
 8006ecc:	7afb      	ldrb	r3, [r7, #11]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ed2:	e021      	b.n	8006f18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	7c12      	ldrb	r2, [r2, #16]
 8006eec:	f107 0108 	add.w	r1, r7, #8
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ef6:	e00f      	b.n	8006f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fa12 	bl	8007324 <USBD_CtlError>
            err++;
 8006f00:	7afb      	ldrb	r3, [r7, #11]
 8006f02:	3301      	adds	r3, #1
 8006f04:	72fb      	strb	r3, [r7, #11]
          break;
 8006f06:	e007      	b.n	8006f18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa0a 	bl	8007324 <USBD_CtlError>
          err++;
 8006f10:	7afb      	ldrb	r3, [r7, #11]
 8006f12:	3301      	adds	r3, #1
 8006f14:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006f16:	e038      	b.n	8006f8a <USBD_GetDescriptor+0x286>
 8006f18:	e037      	b.n	8006f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	7c1b      	ldrb	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d109      	bne.n	8006f36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f2a:	f107 0208 	add.w	r2, r7, #8
 8006f2e:	4610      	mov	r0, r2
 8006f30:	4798      	blx	r3
 8006f32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f34:	e029      	b.n	8006f8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f9f3 	bl	8007324 <USBD_CtlError>
        err++;
 8006f3e:	7afb      	ldrb	r3, [r7, #11]
 8006f40:	3301      	adds	r3, #1
 8006f42:	72fb      	strb	r3, [r7, #11]
      break;
 8006f44:	e021      	b.n	8006f8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	7c1b      	ldrb	r3, [r3, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10d      	bne.n	8006f6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f56:	f107 0208 	add.w	r2, r7, #8
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	4798      	blx	r3
 8006f5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3301      	adds	r3, #1
 8006f64:	2207      	movs	r2, #7
 8006f66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f68:	e00f      	b.n	8006f8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f9d9 	bl	8007324 <USBD_CtlError>
        err++;
 8006f72:	7afb      	ldrb	r3, [r7, #11]
 8006f74:	3301      	adds	r3, #1
 8006f76:	72fb      	strb	r3, [r7, #11]
      break;
 8006f78:	e007      	b.n	8006f8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f9d1 	bl	8007324 <USBD_CtlError>
      err++;
 8006f82:	7afb      	ldrb	r3, [r7, #11]
 8006f84:	3301      	adds	r3, #1
 8006f86:	72fb      	strb	r3, [r7, #11]
      break;
 8006f88:	bf00      	nop
  }

  if (err != 0U)
 8006f8a:	7afb      	ldrb	r3, [r7, #11]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d11c      	bne.n	8006fca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006f90:	893b      	ldrh	r3, [r7, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d011      	beq.n	8006fba <USBD_GetDescriptor+0x2b6>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	88db      	ldrh	r3, [r3, #6]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00d      	beq.n	8006fba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	88da      	ldrh	r2, [r3, #6]
 8006fa2:	893b      	ldrh	r3, [r7, #8]
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	bf28      	it	cs
 8006fa8:	4613      	movcs	r3, r2
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fae:	893b      	ldrh	r3, [r7, #8]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	68f9      	ldr	r1, [r7, #12]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fa1f 	bl	80073f8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	88db      	ldrh	r3, [r3, #6]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fa76 	bl	80074b4 <USBD_CtlSendStatus>
 8006fc8:	e000      	b.n	8006fcc <USBD_GetDescriptor+0x2c8>
    return;
 8006fca:	bf00      	nop
    }
  }
}
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop

08006fd4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	889b      	ldrh	r3, [r3, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d130      	bne.n	8007048 <USBD_SetAddress+0x74>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	88db      	ldrh	r3, [r3, #6]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d12c      	bne.n	8007048 <USBD_SetAddress+0x74>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	885b      	ldrh	r3, [r3, #2]
 8006ff2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ff4:	d828      	bhi.n	8007048 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	885b      	ldrh	r3, [r3, #2]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007000:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007008:	2b03      	cmp	r3, #3
 800700a:	d104      	bne.n	8007016 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f988 	bl	8007324 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007014:	e01d      	b.n	8007052 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	7bfa      	ldrb	r2, [r7, #15]
 800701a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f003 fb98 	bl	800a758 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fa43 	bl	80074b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800702e:	7bfb      	ldrb	r3, [r7, #15]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d004      	beq.n	800703e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800703c:	e009      	b.n	8007052 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007046:	e004      	b.n	8007052 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f96a 	bl	8007324 <USBD_CtlError>
  }
}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	885b      	ldrh	r3, [r3, #2]
 800706a:	b2da      	uxtb	r2, r3
 800706c:	4b41      	ldr	r3, [pc, #260]	@ (8007174 <USBD_SetConfig+0x118>)
 800706e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007070:	4b40      	ldr	r3, [pc, #256]	@ (8007174 <USBD_SetConfig+0x118>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d904      	bls.n	8007082 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f952 	bl	8007324 <USBD_CtlError>
 8007080:	e075      	b.n	800716e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007088:	2b02      	cmp	r3, #2
 800708a:	d002      	beq.n	8007092 <USBD_SetConfig+0x36>
 800708c:	2b03      	cmp	r3, #3
 800708e:	d023      	beq.n	80070d8 <USBD_SetConfig+0x7c>
 8007090:	e062      	b.n	8007158 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007092:	4b38      	ldr	r3, [pc, #224]	@ (8007174 <USBD_SetConfig+0x118>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d01a      	beq.n	80070d0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800709a:	4b36      	ldr	r3, [pc, #216]	@ (8007174 <USBD_SetConfig+0x118>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2203      	movs	r2, #3
 80070a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80070ac:	4b31      	ldr	r3, [pc, #196]	@ (8007174 <USBD_SetConfig+0x118>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff f9e7 	bl	8006486 <USBD_SetClassConfig>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d104      	bne.n	80070c8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f92f 	bl	8007324 <USBD_CtlError>
            return;
 80070c6:	e052      	b.n	800716e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f9f3 	bl	80074b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80070ce:	e04e      	b.n	800716e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f9ef 	bl	80074b4 <USBD_CtlSendStatus>
        break;
 80070d6:	e04a      	b.n	800716e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80070d8:	4b26      	ldr	r3, [pc, #152]	@ (8007174 <USBD_SetConfig+0x118>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d112      	bne.n	8007106 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80070e8:	4b22      	ldr	r3, [pc, #136]	@ (8007174 <USBD_SetConfig+0x118>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	461a      	mov	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80070f2:	4b20      	ldr	r3, [pc, #128]	@ (8007174 <USBD_SetConfig+0x118>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff f9e3 	bl	80064c4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f9d8 	bl	80074b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007104:	e033      	b.n	800716e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007106:	4b1b      	ldr	r3, [pc, #108]	@ (8007174 <USBD_SetConfig+0x118>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	429a      	cmp	r2, r3
 8007112:	d01d      	beq.n	8007150 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff f9d1 	bl	80064c4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007122:	4b14      	ldr	r3, [pc, #80]	@ (8007174 <USBD_SetConfig+0x118>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800712c:	4b11      	ldr	r3, [pc, #68]	@ (8007174 <USBD_SetConfig+0x118>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff f9a7 	bl	8006486 <USBD_SetClassConfig>
 8007138:	4603      	mov	r3, r0
 800713a:	2b02      	cmp	r3, #2
 800713c:	d104      	bne.n	8007148 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f8ef 	bl	8007324 <USBD_CtlError>
            return;
 8007146:	e012      	b.n	800716e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f9b3 	bl	80074b4 <USBD_CtlSendStatus>
        break;
 800714e:	e00e      	b.n	800716e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f9af 	bl	80074b4 <USBD_CtlSendStatus>
        break;
 8007156:	e00a      	b.n	800716e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f8e2 	bl	8007324 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007160:	4b04      	ldr	r3, [pc, #16]	@ (8007174 <USBD_SetConfig+0x118>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7ff f9ac 	bl	80064c4 <USBD_ClrClassConfig>
        break;
 800716c:	bf00      	nop
    }
  }
}
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20000298 	.word	0x20000298

08007178 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	88db      	ldrh	r3, [r3, #6]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d004      	beq.n	8007194 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f8c9 	bl	8007324 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007192:	e022      	b.n	80071da <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800719a:	2b02      	cmp	r3, #2
 800719c:	dc02      	bgt.n	80071a4 <USBD_GetConfig+0x2c>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	dc03      	bgt.n	80071aa <USBD_GetConfig+0x32>
 80071a2:	e015      	b.n	80071d0 <USBD_GetConfig+0x58>
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d00b      	beq.n	80071c0 <USBD_GetConfig+0x48>
 80071a8:	e012      	b.n	80071d0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3308      	adds	r3, #8
 80071b4:	2201      	movs	r2, #1
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f91d 	bl	80073f8 <USBD_CtlSendData>
        break;
 80071be:	e00c      	b.n	80071da <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3304      	adds	r3, #4
 80071c4:	2201      	movs	r2, #1
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f915 	bl	80073f8 <USBD_CtlSendData>
        break;
 80071ce:	e004      	b.n	80071da <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f8a6 	bl	8007324 <USBD_CtlError>
        break;
 80071d8:	bf00      	nop
}
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b082      	sub	sp, #8
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071f2:	3b01      	subs	r3, #1
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d81e      	bhi.n	8007236 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	88db      	ldrh	r3, [r3, #6]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d004      	beq.n	800720a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f88e 	bl	8007324 <USBD_CtlError>
        break;
 8007208:	e01a      	b.n	8007240 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f043 0202 	orr.w	r2, r3, #2
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	330c      	adds	r3, #12
 800722a:	2202      	movs	r2, #2
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f8e2 	bl	80073f8 <USBD_CtlSendData>
      break;
 8007234:	e004      	b.n	8007240 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f873 	bl	8007324 <USBD_CtlError>
      break;
 800723e:	bf00      	nop
  }
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	885b      	ldrh	r3, [r3, #2]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d106      	bne.n	8007268 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f926 	bl	80074b4 <USBD_CtlSendStatus>
  }
}
 8007268:	bf00      	nop
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007280:	3b01      	subs	r3, #1
 8007282:	2b02      	cmp	r3, #2
 8007284:	d80b      	bhi.n	800729e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	885b      	ldrh	r3, [r3, #2]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d10c      	bne.n	80072a8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f90c 	bl	80074b4 <USBD_CtlSendStatus>
      }
      break;
 800729c:	e004      	b.n	80072a8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f83f 	bl	8007324 <USBD_CtlError>
      break;
 80072a6:	e000      	b.n	80072aa <USBD_ClrFeature+0x3a>
      break;
 80072a8:	bf00      	nop
  }
}
 80072aa:	bf00      	nop
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781a      	ldrb	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	785a      	ldrb	r2, [r3, #1]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	3302      	adds	r3, #2
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	3303      	adds	r3, #3
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	b29b      	uxth	r3, r3
 80072de:	4413      	add	r3, r2
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	3304      	adds	r3, #4
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	461a      	mov	r2, r3
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	3305      	adds	r3, #5
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	4413      	add	r3, r2
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	3306      	adds	r3, #6
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	3307      	adds	r3, #7
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	021b      	lsls	r3, r3, #8
 8007310:	b29b      	uxth	r3, r3
 8007312:	4413      	add	r3, r2
 8007314:	b29a      	uxth	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	80da      	strh	r2, [r3, #6]

}
 800731a:	bf00      	nop
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr

08007324 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800732e:	2180      	movs	r1, #128	@ 0x80
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f003 f9a7 	bl	800a684 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007336:	2100      	movs	r1, #0
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f003 f9a3 	bl	800a684 <USBD_LL_StallEP>
}
 800733e:	bf00      	nop
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d032      	beq.n	80073c2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 f834 	bl	80073ca <USBD_GetLen>
 8007362:	4603      	mov	r3, r0
 8007364:	3301      	adds	r3, #1
 8007366:	b29b      	uxth	r3, r3
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	b29a      	uxth	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	75fa      	strb	r2, [r7, #23]
 8007376:	461a      	mov	r2, r3
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4413      	add	r3, r2
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	7812      	ldrb	r2, [r2, #0]
 8007380:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	75fa      	strb	r2, [r7, #23]
 8007388:	461a      	mov	r2, r3
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	4413      	add	r3, r2
 800738e:	2203      	movs	r2, #3
 8007390:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007392:	e012      	b.n	80073ba <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	60fa      	str	r2, [r7, #12]
 800739a:	7dfa      	ldrb	r2, [r7, #23]
 800739c:	1c51      	adds	r1, r2, #1
 800739e:	75f9      	strb	r1, [r7, #23]
 80073a0:	4611      	mov	r1, r2
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	440a      	add	r2, r1
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	75fa      	strb	r2, [r7, #23]
 80073b0:	461a      	mov	r2, r3
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	4413      	add	r3, r2
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e8      	bne.n	8007394 <USBD_GetString+0x4e>
    }
  }
}
 80073c2:	bf00      	nop
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80073d6:	e005      	b.n	80073e4 <USBD_GetLen+0x1a>
  {
    len++;
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	3301      	adds	r3, #1
 80073dc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3301      	adds	r3, #1
 80073e2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1f5      	bne.n	80073d8 <USBD_GetLen+0xe>
  }

  return len;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr

080073f8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	4613      	mov	r3, r2
 8007404:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2202      	movs	r2, #2
 800740a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800740e:	88fa      	ldrh	r2, [r7, #6]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007414:	88fa      	ldrh	r2, [r7, #6]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	2100      	movs	r1, #0
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f003 f9b8 	bl	800a796 <USBD_LL_Transmit>

  return USBD_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	4613      	mov	r3, r2
 800743c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800743e:	88fb      	ldrh	r3, [r7, #6]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	2100      	movs	r1, #0
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f003 f9a6 	bl	800a796 <USBD_LL_Transmit>

  return USBD_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	4613      	mov	r3, r2
 8007460:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2203      	movs	r2, #3
 8007466:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800746a:	88fa      	ldrh	r2, [r7, #6]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007472:	88fa      	ldrh	r2, [r7, #6]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800747a:	88fb      	ldrh	r3, [r7, #6]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	2100      	movs	r1, #0
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f003 f9ab 	bl	800a7dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	4613      	mov	r3, r2
 800749c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	2100      	movs	r1, #0
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f003 f999 	bl	800a7dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2204      	movs	r2, #4
 80074c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074c4:	2300      	movs	r3, #0
 80074c6:	2200      	movs	r2, #0
 80074c8:	2100      	movs	r1, #0
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f003 f963 	bl	800a796 <USBD_LL_Transmit>

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2205      	movs	r2, #5
 80074e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074ea:	2300      	movs	r3, #0
 80074ec:	2200      	movs	r2, #0
 80074ee:	2100      	movs	r1, #0
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f003 f973 	bl	800a7dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007506:	f3ef 8305 	mrs	r3, IPSR
 800750a:	60bb      	str	r3, [r7, #8]
  return(result);
 800750c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10f      	bne.n	8007532 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007512:	f3ef 8310 	mrs	r3, PRIMASK
 8007516:	607b      	str	r3, [r7, #4]
  return(result);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d109      	bne.n	8007532 <osKernelInitialize+0x32>
 800751e:	4b10      	ldr	r3, [pc, #64]	@ (8007560 <osKernelInitialize+0x60>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b02      	cmp	r3, #2
 8007524:	d109      	bne.n	800753a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007526:	f3ef 8311 	mrs	r3, BASEPRI
 800752a:	603b      	str	r3, [r7, #0]
  return(result);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007532:	f06f 0305 	mvn.w	r3, #5
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	e00c      	b.n	8007554 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800753a:	4b09      	ldr	r3, [pc, #36]	@ (8007560 <osKernelInitialize+0x60>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d105      	bne.n	800754e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007542:	4b07      	ldr	r3, [pc, #28]	@ (8007560 <osKernelInitialize+0x60>)
 8007544:	2201      	movs	r2, #1
 8007546:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007548:	2300      	movs	r3, #0
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	e002      	b.n	8007554 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800754e:	f04f 33ff 	mov.w	r3, #4294967295
 8007552:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007554:	68fb      	ldr	r3, [r7, #12]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	bc80      	pop	{r7}
 800755e:	4770      	bx	lr
 8007560:	2000029c 	.word	0x2000029c

08007564 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800756a:	f3ef 8305 	mrs	r3, IPSR
 800756e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007570:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10f      	bne.n	8007596 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007576:	f3ef 8310 	mrs	r3, PRIMASK
 800757a:	607b      	str	r3, [r7, #4]
  return(result);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d109      	bne.n	8007596 <osKernelStart+0x32>
 8007582:	4b11      	ldr	r3, [pc, #68]	@ (80075c8 <osKernelStart+0x64>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b02      	cmp	r3, #2
 8007588:	d109      	bne.n	800759e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800758a:	f3ef 8311 	mrs	r3, BASEPRI
 800758e:	603b      	str	r3, [r7, #0]
  return(result);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007596:	f06f 0305 	mvn.w	r3, #5
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	e00e      	b.n	80075bc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800759e:	4b0a      	ldr	r3, [pc, #40]	@ (80075c8 <osKernelStart+0x64>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d107      	bne.n	80075b6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80075a6:	4b08      	ldr	r3, [pc, #32]	@ (80075c8 <osKernelStart+0x64>)
 80075a8:	2202      	movs	r2, #2
 80075aa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80075ac:	f001 f8a8 	bl	8008700 <vTaskStartScheduler>
      stat = osOK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	e002      	b.n	80075bc <osKernelStart+0x58>
    } else {
      stat = osError;
 80075b6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80075bc:	68fb      	ldr	r3, [r7, #12]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	2000029c 	.word	0x2000029c

080075cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b092      	sub	sp, #72	@ 0x48
 80075d0:	af04      	add	r7, sp, #16
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075d8:	2300      	movs	r3, #0
 80075da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075dc:	f3ef 8305 	mrs	r3, IPSR
 80075e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f040 8094 	bne.w	8007712 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ea:	f3ef 8310 	mrs	r3, PRIMASK
 80075ee:	623b      	str	r3, [r7, #32]
  return(result);
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f040 808d 	bne.w	8007712 <osThreadNew+0x146>
 80075f8:	4b48      	ldr	r3, [pc, #288]	@ (800771c <osThreadNew+0x150>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d106      	bne.n	800760e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007600:	f3ef 8311 	mrs	r3, BASEPRI
 8007604:	61fb      	str	r3, [r7, #28]
  return(result);
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	2b00      	cmp	r3, #0
 800760a:	f040 8082 	bne.w	8007712 <osThreadNew+0x146>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d07e      	beq.n	8007712 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007614:	2380      	movs	r3, #128	@ 0x80
 8007616:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007618:	2318      	movs	r3, #24
 800761a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 800761c:	2300      	movs	r3, #0
 800761e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007620:	f107 031b 	add.w	r3, r7, #27
 8007624:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8007626:	f04f 33ff 	mov.w	r3, #4294967295
 800762a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d045      	beq.n	80076be <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <osThreadNew+0x74>
        name = attr->name;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800764e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007650:	2b00      	cmp	r3, #0
 8007652:	d008      	beq.n	8007666 <osThreadNew+0x9a>
 8007654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007656:	2b38      	cmp	r3, #56	@ 0x38
 8007658:	d805      	bhi.n	8007666 <osThreadNew+0x9a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <osThreadNew+0x9e>
        return (NULL);
 8007666:	2300      	movs	r3, #0
 8007668:	e054      	b.n	8007714 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	089b      	lsrs	r3, r3, #2
 8007678:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00e      	beq.n	80076a0 <osThreadNew+0xd4>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	2ba7      	cmp	r3, #167	@ 0xa7
 8007688:	d90a      	bls.n	80076a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800768e:	2b00      	cmp	r3, #0
 8007690:	d006      	beq.n	80076a0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <osThreadNew+0xd4>
        mem = 1;
 800769a:	2301      	movs	r3, #1
 800769c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800769e:	e010      	b.n	80076c2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10c      	bne.n	80076c2 <osThreadNew+0xf6>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d108      	bne.n	80076c2 <osThreadNew+0xf6>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <osThreadNew+0xf6>
          mem = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076bc:	e001      	b.n	80076c2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80076c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d110      	bne.n	80076ea <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076d0:	9202      	str	r2, [sp, #8]
 80076d2:	9301      	str	r3, [sp, #4]
 80076d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076dc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fe24 	bl	800832c <xTaskCreateStatic>
 80076e4:	4603      	mov	r3, r0
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	e013      	b.n	8007712 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80076ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d110      	bne.n	8007712 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80076f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	f107 0314 	add.w	r3, r7, #20
 80076f8:	9301      	str	r3, [sp, #4]
 80076fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 fe71 	bl	80083ea <xTaskCreate>
 8007708:	4603      	mov	r3, r0
 800770a:	2b01      	cmp	r3, #1
 800770c:	d001      	beq.n	8007712 <osThreadNew+0x146>
          hTask = NULL;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007712:	697b      	ldr	r3, [r7, #20]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3738      	adds	r7, #56	@ 0x38
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	2000029c 	.word	0x2000029c

08007720 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007728:	f3ef 8305 	mrs	r3, IPSR
 800772c:	613b      	str	r3, [r7, #16]
  return(result);
 800772e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10f      	bne.n	8007754 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007734:	f3ef 8310 	mrs	r3, PRIMASK
 8007738:	60fb      	str	r3, [r7, #12]
  return(result);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d109      	bne.n	8007754 <osDelay+0x34>
 8007740:	4b0d      	ldr	r3, [pc, #52]	@ (8007778 <osDelay+0x58>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b02      	cmp	r3, #2
 8007746:	d109      	bne.n	800775c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007748:	f3ef 8311 	mrs	r3, BASEPRI
 800774c:	60bb      	str	r3, [r7, #8]
  return(result);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <osDelay+0x3c>
    stat = osErrorISR;
 8007754:	f06f 0305 	mvn.w	r3, #5
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	e007      	b.n	800776c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800775c:	2300      	movs	r3, #0
 800775e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 ff94 	bl	8008694 <vTaskDelay>
    }
  }

  return (stat);
 800776c:	697b      	ldr	r3, [r7, #20]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3718      	adds	r7, #24
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	2000029c 	.word	0x2000029c

0800777c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4a06      	ldr	r2, [pc, #24]	@ (80077a4 <vApplicationGetIdleTaskMemory+0x28>)
 800778c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	4a05      	ldr	r2, [pc, #20]	@ (80077a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007792:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2280      	movs	r2, #128	@ 0x80
 8007798:	601a      	str	r2, [r3, #0]
}
 800779a:	bf00      	nop
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	bc80      	pop	{r7}
 80077a2:	4770      	bx	lr
 80077a4:	200002a0 	.word	0x200002a0
 80077a8:	20000348 	.word	0x20000348

080077ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4a07      	ldr	r2, [pc, #28]	@ (80077d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80077bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	4a06      	ldr	r2, [pc, #24]	@ (80077dc <vApplicationGetTimerTaskMemory+0x30>)
 80077c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077ca:	601a      	str	r2, [r3, #0]
}
 80077cc:	bf00      	nop
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bc80      	pop	{r7}
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	20000548 	.word	0x20000548
 80077dc:	200005f0 	.word	0x200005f0

080077e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f103 0208 	add.w	r2, r3, #8
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f04f 32ff 	mov.w	r2, #4294967295
 80077f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f103 0208 	add.w	r2, r3, #8
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f103 0208 	add.w	r2, r3, #8
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	bc80      	pop	{r7}
 800781c:	4770      	bx	lr

0800781e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	bc80      	pop	{r7}
 8007834:	4770      	bx	lr

08007836 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007836:	b480      	push	{r7}
 8007838:	b085      	sub	sp, #20
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	601a      	str	r2, [r3, #0]
}
 8007872:	bf00      	nop
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	bc80      	pop	{r7}
 800787a:	4770      	bx	lr

0800787c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007892:	d103      	bne.n	800789c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	e00c      	b.n	80078b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3308      	adds	r3, #8
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	e002      	b.n	80078aa <vListInsert+0x2e>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d2f6      	bcs.n	80078a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	601a      	str	r2, [r3, #0]
}
 80078e2:	bf00      	nop
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bc80      	pop	{r7}
 80078ea:	4770      	bx	lr

080078ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	6892      	ldr	r2, [r2, #8]
 8007902:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	6852      	ldr	r2, [r2, #4]
 800790c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	429a      	cmp	r2, r3
 8007916:	d103      	bne.n	8007920 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689a      	ldr	r2, [r3, #8]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	1e5a      	subs	r2, r3, #1
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	bc80      	pop	{r7}
 800793c:	4770      	bx	lr
	...

08007940 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10b      	bne.n	800796c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007966:	bf00      	nop
 8007968:	bf00      	nop
 800796a:	e7fd      	b.n	8007968 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800796c:	f002 f826 	bl	80099bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007978:	68f9      	ldr	r1, [r7, #12]
 800797a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800797c:	fb01 f303 	mul.w	r3, r1, r3
 8007980:	441a      	add	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799c:	3b01      	subs	r3, #1
 800799e:	68f9      	ldr	r1, [r7, #12]
 80079a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80079a2:	fb01 f303 	mul.w	r3, r1, r3
 80079a6:	441a      	add	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	22ff      	movs	r2, #255	@ 0xff
 80079b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	22ff      	movs	r2, #255	@ 0xff
 80079b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d114      	bne.n	80079ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d01a      	beq.n	8007a00 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3310      	adds	r3, #16
 80079ce:	4618      	mov	r0, r3
 80079d0:	f001 f936 	bl	8008c40 <xTaskRemoveFromEventList>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d012      	beq.n	8007a00 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079da:	4b0d      	ldr	r3, [pc, #52]	@ (8007a10 <xQueueGenericReset+0xd0>)
 80079dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	e009      	b.n	8007a00 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3310      	adds	r3, #16
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff fef5 	bl	80077e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3324      	adds	r3, #36	@ 0x24
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff fef0 	bl	80077e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a00:	f002 f80c 	bl	8009a1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a04:	2301      	movs	r3, #1
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	e000ed04 	.word	0xe000ed04

08007a14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08e      	sub	sp, #56	@ 0x38
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10b      	bne.n	8007a40 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a3a:	bf00      	nop
 8007a3c:	bf00      	nop
 8007a3e:	e7fd      	b.n	8007a3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10b      	bne.n	8007a5e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a58:	bf00      	nop
 8007a5a:	bf00      	nop
 8007a5c:	e7fd      	b.n	8007a5a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <xQueueGenericCreateStatic+0x56>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <xQueueGenericCreateStatic+0x5a>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <xQueueGenericCreateStatic+0x5c>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10b      	bne.n	8007a8c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	623b      	str	r3, [r7, #32]
}
 8007a86:	bf00      	nop
 8007a88:	bf00      	nop
 8007a8a:	e7fd      	b.n	8007a88 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d102      	bne.n	8007a98 <xQueueGenericCreateStatic+0x84>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <xQueueGenericCreateStatic+0x88>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e000      	b.n	8007a9e <xQueueGenericCreateStatic+0x8a>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10b      	bne.n	8007aba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	61fb      	str	r3, [r7, #28]
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	e7fd      	b.n	8007ab6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007aba:	2350      	movs	r3, #80	@ 0x50
 8007abc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2b50      	cmp	r3, #80	@ 0x50
 8007ac2:	d00b      	beq.n	8007adc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	61bb      	str	r3, [r7, #24]
}
 8007ad6:	bf00      	nop
 8007ad8:	bf00      	nop
 8007ada:	e7fd      	b.n	8007ad8 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00d      	beq.n	8007b02 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007aee:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	4613      	mov	r3, r2
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 f805 	bl	8007b0c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3730      	adds	r7, #48	@ 0x30
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d103      	bne.n	8007b28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	e002      	b.n	8007b2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	69b8      	ldr	r0, [r7, #24]
 8007b3e:	f7ff feff 	bl	8007940 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	78fa      	ldrb	r2, [r7, #3]
 8007b46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b4a:	bf00      	nop
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08e      	sub	sp, #56	@ 0x38
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b62:	2300      	movs	r3, #0
 8007b64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10b      	bne.n	8007b88 <xQueueGenericSend+0x34>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b82:	bf00      	nop
 8007b84:	bf00      	nop
 8007b86:	e7fd      	b.n	8007b84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d103      	bne.n	8007b96 <xQueueGenericSend+0x42>
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <xQueueGenericSend+0x46>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <xQueueGenericSend+0x48>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10b      	bne.n	8007bb8 <xQueueGenericSend+0x64>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007bb2:	bf00      	nop
 8007bb4:	bf00      	nop
 8007bb6:	e7fd      	b.n	8007bb4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d103      	bne.n	8007bc6 <xQueueGenericSend+0x72>
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d101      	bne.n	8007bca <xQueueGenericSend+0x76>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e000      	b.n	8007bcc <xQueueGenericSend+0x78>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10b      	bne.n	8007be8 <xQueueGenericSend+0x94>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	623b      	str	r3, [r7, #32]
}
 8007be2:	bf00      	nop
 8007be4:	bf00      	nop
 8007be6:	e7fd      	b.n	8007be4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007be8:	f001 f9f4 	bl	8008fd4 <xTaskGetSchedulerState>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d102      	bne.n	8007bf8 <xQueueGenericSend+0xa4>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d101      	bne.n	8007bfc <xQueueGenericSend+0xa8>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e000      	b.n	8007bfe <xQueueGenericSend+0xaa>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10b      	bne.n	8007c1a <xQueueGenericSend+0xc6>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	61fb      	str	r3, [r7, #28]
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop
 8007c18:	e7fd      	b.n	8007c16 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c1a:	f001 fecf 	bl	80099bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d302      	bcc.n	8007c30 <xQueueGenericSend+0xdc>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d129      	bne.n	8007c84 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	68b9      	ldr	r1, [r7, #8]
 8007c34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c36:	f000 fa0d 	bl	8008054 <prvCopyDataToQueue>
 8007c3a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d010      	beq.n	8007c66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c46:	3324      	adds	r3, #36	@ 0x24
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fff9 	bl	8008c40 <xTaskRemoveFromEventList>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d013      	beq.n	8007c7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c54:	4b3f      	ldr	r3, [pc, #252]	@ (8007d54 <xQueueGenericSend+0x200>)
 8007c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	e00a      	b.n	8007c7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d007      	beq.n	8007c7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c6c:	4b39      	ldr	r3, [pc, #228]	@ (8007d54 <xQueueGenericSend+0x200>)
 8007c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c7c:	f001 fece 	bl	8009a1c <vPortExitCritical>
				return pdPASS;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e063      	b.n	8007d4c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d103      	bne.n	8007c92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c8a:	f001 fec7 	bl	8009a1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e05c      	b.n	8007d4c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d106      	bne.n	8007ca6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c98:	f107 0314 	add.w	r3, r7, #20
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f001 f833 	bl	8008d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ca6:	f001 feb9 	bl	8009a1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007caa:	f000 fd99 	bl	80087e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cae:	f001 fe85 	bl	80099bc <vPortEnterCritical>
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cb8:	b25b      	sxtb	r3, r3
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbe:	d103      	bne.n	8007cc8 <xQueueGenericSend+0x174>
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cce:	b25b      	sxtb	r3, r3
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d103      	bne.n	8007cde <xQueueGenericSend+0x18a>
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cde:	f001 fe9d 	bl	8009a1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ce2:	1d3a      	adds	r2, r7, #4
 8007ce4:	f107 0314 	add.w	r3, r7, #20
 8007ce8:	4611      	mov	r1, r2
 8007cea:	4618      	mov	r0, r3
 8007cec:	f001 f822 	bl	8008d34 <xTaskCheckForTimeOut>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d124      	bne.n	8007d40 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007cf6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cf8:	f000 faa4 	bl	8008244 <prvIsQueueFull>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d018      	beq.n	8007d34 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d04:	3310      	adds	r3, #16
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 ff46 	bl	8008b9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d12:	f000 fa2f 	bl	8008174 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d16:	f000 fd71 	bl	80087fc <xTaskResumeAll>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f47f af7c 	bne.w	8007c1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007d22:	4b0c      	ldr	r3, [pc, #48]	@ (8007d54 <xQueueGenericSend+0x200>)
 8007d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	e772      	b.n	8007c1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d36:	f000 fa1d 	bl	8008174 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d3a:	f000 fd5f 	bl	80087fc <xTaskResumeAll>
 8007d3e:	e76c      	b.n	8007c1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d42:	f000 fa17 	bl	8008174 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d46:	f000 fd59 	bl	80087fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d4a:	2300      	movs	r3, #0
		}
	}
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3738      	adds	r7, #56	@ 0x38
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	e000ed04 	.word	0xe000ed04

08007d58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08e      	sub	sp, #56	@ 0x38
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10b      	bne.n	8007d88 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d82:	bf00      	nop
 8007d84:	bf00      	nop
 8007d86:	e7fd      	b.n	8007d84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d103      	bne.n	8007d96 <xQueueGenericSendFromISR+0x3e>
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <xQueueGenericSendFromISR+0x42>
 8007d96:	2301      	movs	r3, #1
 8007d98:	e000      	b.n	8007d9c <xQueueGenericSendFromISR+0x44>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10b      	bne.n	8007db8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	623b      	str	r3, [r7, #32]
}
 8007db2:	bf00      	nop
 8007db4:	bf00      	nop
 8007db6:	e7fd      	b.n	8007db4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d103      	bne.n	8007dc6 <xQueueGenericSendFromISR+0x6e>
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d101      	bne.n	8007dca <xQueueGenericSendFromISR+0x72>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e000      	b.n	8007dcc <xQueueGenericSendFromISR+0x74>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10b      	bne.n	8007de8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	61fb      	str	r3, [r7, #28]
}
 8007de2:	bf00      	nop
 8007de4:	bf00      	nop
 8007de6:	e7fd      	b.n	8007de4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007de8:	f001 feaa 	bl	8009b40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007dec:	f3ef 8211 	mrs	r2, BASEPRI
 8007df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	61ba      	str	r2, [r7, #24]
 8007e02:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e04:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d302      	bcc.n	8007e1a <xQueueGenericSendFromISR+0xc2>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d12c      	bne.n	8007e74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	68b9      	ldr	r1, [r7, #8]
 8007e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e2a:	f000 f913 	bl	8008054 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e2e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e36:	d112      	bne.n	8007e5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d016      	beq.n	8007e6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e42:	3324      	adds	r3, #36	@ 0x24
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 fefb 	bl	8008c40 <xTaskRemoveFromEventList>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00e      	beq.n	8007e6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00b      	beq.n	8007e6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	e007      	b.n	8007e6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e62:	3301      	adds	r3, #1
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	b25a      	sxtb	r2, r3
 8007e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007e72:	e001      	b.n	8007e78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e74:	2300      	movs	r3, #0
 8007e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3738      	adds	r7, #56	@ 0x38
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08c      	sub	sp, #48	@ 0x30
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10b      	bne.n	8007ec2 <xQueueReceive+0x32>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	623b      	str	r3, [r7, #32]
}
 8007ebc:	bf00      	nop
 8007ebe:	bf00      	nop
 8007ec0:	e7fd      	b.n	8007ebe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d103      	bne.n	8007ed0 <xQueueReceive+0x40>
 8007ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <xQueueReceive+0x44>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e000      	b.n	8007ed6 <xQueueReceive+0x46>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10b      	bne.n	8007ef2 <xQueueReceive+0x62>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	61fb      	str	r3, [r7, #28]
}
 8007eec:	bf00      	nop
 8007eee:	bf00      	nop
 8007ef0:	e7fd      	b.n	8007eee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ef2:	f001 f86f 	bl	8008fd4 <xTaskGetSchedulerState>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d102      	bne.n	8007f02 <xQueueReceive+0x72>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <xQueueReceive+0x76>
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <xQueueReceive+0x78>
 8007f06:	2300      	movs	r3, #0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10b      	bne.n	8007f24 <xQueueReceive+0x94>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	61bb      	str	r3, [r7, #24]
}
 8007f1e:	bf00      	nop
 8007f20:	bf00      	nop
 8007f22:	e7fd      	b.n	8007f20 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f24:	f001 fd4a 	bl	80099bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01f      	beq.n	8007f74 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f34:	68b9      	ldr	r1, [r7, #8]
 8007f36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f38:	f000 f8f6 	bl	8008128 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3e:	1e5a      	subs	r2, r3, #1
 8007f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f42:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00f      	beq.n	8007f6c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4e:	3310      	adds	r3, #16
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 fe75 	bl	8008c40 <xTaskRemoveFromEventList>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d007      	beq.n	8007f6c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8008050 <xQueueReceive+0x1c0>)
 8007f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f6c:	f001 fd56 	bl	8009a1c <vPortExitCritical>
				return pdPASS;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e069      	b.n	8008048 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d103      	bne.n	8007f82 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f7a:	f001 fd4f 	bl	8009a1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	e062      	b.n	8008048 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d106      	bne.n	8007f96 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f88:	f107 0310 	add.w	r3, r7, #16
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 febb 	bl	8008d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f92:	2301      	movs	r3, #1
 8007f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f96:	f001 fd41 	bl	8009a1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f9a:	f000 fc21 	bl	80087e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f9e:	f001 fd0d 	bl	80099bc <vPortEnterCritical>
 8007fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fa8:	b25b      	sxtb	r3, r3
 8007faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fae:	d103      	bne.n	8007fb8 <xQueueReceive+0x128>
 8007fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fbe:	b25b      	sxtb	r3, r3
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc4:	d103      	bne.n	8007fce <xQueueReceive+0x13e>
 8007fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fce:	f001 fd25 	bl	8009a1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fd2:	1d3a      	adds	r2, r7, #4
 8007fd4:	f107 0310 	add.w	r3, r7, #16
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 feaa 	bl	8008d34 <xTaskCheckForTimeOut>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d123      	bne.n	800802e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fe8:	f000 f916 	bl	8008218 <prvIsQueueEmpty>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d017      	beq.n	8008022 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff4:	3324      	adds	r3, #36	@ 0x24
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 fdce 	bl	8008b9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008000:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008002:	f000 f8b7 	bl	8008174 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008006:	f000 fbf9 	bl	80087fc <xTaskResumeAll>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d189      	bne.n	8007f24 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008010:	4b0f      	ldr	r3, [pc, #60]	@ (8008050 <xQueueReceive+0x1c0>)
 8008012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	e780      	b.n	8007f24 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008024:	f000 f8a6 	bl	8008174 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008028:	f000 fbe8 	bl	80087fc <xTaskResumeAll>
 800802c:	e77a      	b.n	8007f24 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800802e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008030:	f000 f8a0 	bl	8008174 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008034:	f000 fbe2 	bl	80087fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800803a:	f000 f8ed 	bl	8008218 <prvIsQueueEmpty>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	f43f af6f 	beq.w	8007f24 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008046:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008048:	4618      	mov	r0, r3
 800804a:	3730      	adds	r7, #48	@ 0x30
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	e000ed04 	.word	0xe000ed04

08008054 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008060:	2300      	movs	r3, #0
 8008062:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10d      	bne.n	800808e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d14d      	bne.n	8008116 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	4618      	mov	r0, r3
 8008080:	f000 ffc6 	bl	8009010 <xTaskPriorityDisinherit>
 8008084:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	605a      	str	r2, [r3, #4]
 800808c:	e043      	b.n	8008116 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d119      	bne.n	80080c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6898      	ldr	r0, [r3, #8]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809c:	461a      	mov	r2, r3
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	f002 fe51 	bl	800ad46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ac:	441a      	add	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	689a      	ldr	r2, [r3, #8]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d32b      	bcc.n	8008116 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	609a      	str	r2, [r3, #8]
 80080c6:	e026      	b.n	8008116 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	68d8      	ldr	r0, [r3, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d0:	461a      	mov	r2, r3
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	f002 fe37 	bl	800ad46 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e0:	425b      	negs	r3, r3
 80080e2:	441a      	add	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	68da      	ldr	r2, [r3, #12]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d207      	bcs.n	8008104 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fc:	425b      	negs	r3, r3
 80080fe:	441a      	add	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b02      	cmp	r3, #2
 8008108:	d105      	bne.n	8008116 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	3b01      	subs	r3, #1
 8008114:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800811e:	697b      	ldr	r3, [r7, #20]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008136:	2b00      	cmp	r3, #0
 8008138:	d018      	beq.n	800816c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008142:	441a      	add	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	429a      	cmp	r2, r3
 8008152:	d303      	bcc.n	800815c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68d9      	ldr	r1, [r3, #12]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008164:	461a      	mov	r2, r3
 8008166:	6838      	ldr	r0, [r7, #0]
 8008168:	f002 fded 	bl	800ad46 <memcpy>
	}
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800817c:	f001 fc1e 	bl	80099bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008186:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008188:	e011      	b.n	80081ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800818e:	2b00      	cmp	r3, #0
 8008190:	d012      	beq.n	80081b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3324      	adds	r3, #36	@ 0x24
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fd52 	bl	8008c40 <xTaskRemoveFromEventList>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081a2:	f000 fe2b 	bl	8008dfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	dce9      	bgt.n	800818a <prvUnlockQueue+0x16>
 80081b6:	e000      	b.n	80081ba <prvUnlockQueue+0x46>
					break;
 80081b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	22ff      	movs	r2, #255	@ 0xff
 80081be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80081c2:	f001 fc2b 	bl	8009a1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081c6:	f001 fbf9 	bl	80099bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081d2:	e011      	b.n	80081f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d012      	beq.n	8008202 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3310      	adds	r3, #16
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 fd2d 	bl	8008c40 <xTaskRemoveFromEventList>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081ec:	f000 fe06 	bl	8008dfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	dce9      	bgt.n	80081d4 <prvUnlockQueue+0x60>
 8008200:	e000      	b.n	8008204 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008202:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	22ff      	movs	r2, #255	@ 0xff
 8008208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800820c:	f001 fc06 	bl	8009a1c <vPortExitCritical>
}
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008220:	f001 fbcc 	bl	80099bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800822c:	2301      	movs	r3, #1
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	e001      	b.n	8008236 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008232:	2300      	movs	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008236:	f001 fbf1 	bl	8009a1c <vPortExitCritical>

	return xReturn;
 800823a:	68fb      	ldr	r3, [r7, #12]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800824c:	f001 fbb6 	bl	80099bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008258:	429a      	cmp	r2, r3
 800825a:	d102      	bne.n	8008262 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800825c:	2301      	movs	r3, #1
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	e001      	b.n	8008266 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008262:	2300      	movs	r3, #0
 8008264:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008266:	f001 fbd9 	bl	8009a1c <vPortExitCritical>

	return xReturn;
 800826a:	68fb      	ldr	r3, [r7, #12]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]
 8008282:	e014      	b.n	80082ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008284:	4a0e      	ldr	r2, [pc, #56]	@ (80082c0 <vQueueAddToRegistry+0x4c>)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10b      	bne.n	80082a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008290:	490b      	ldr	r1, [pc, #44]	@ (80082c0 <vQueueAddToRegistry+0x4c>)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800829a:	4a09      	ldr	r2, [pc, #36]	@ (80082c0 <vQueueAddToRegistry+0x4c>)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	4413      	add	r3, r2
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082a6:	e006      	b.n	80082b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	3301      	adds	r3, #1
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b07      	cmp	r3, #7
 80082b2:	d9e7      	bls.n	8008284 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr
 80082c0:	200009f0 	.word	0x200009f0

080082c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082d4:	f001 fb72 	bl	80099bc <vPortEnterCritical>
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082de:	b25b      	sxtb	r3, r3
 80082e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e4:	d103      	bne.n	80082ee <vQueueWaitForMessageRestricted+0x2a>
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082f4:	b25b      	sxtb	r3, r3
 80082f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fa:	d103      	bne.n	8008304 <vQueueWaitForMessageRestricted+0x40>
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008304:	f001 fb8a 	bl	8009a1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830c:	2b00      	cmp	r3, #0
 800830e:	d106      	bne.n	800831e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	3324      	adds	r3, #36	@ 0x24
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	68b9      	ldr	r1, [r7, #8]
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fc65 	bl	8008be8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800831e:	6978      	ldr	r0, [r7, #20]
 8008320:	f7ff ff28 	bl	8008174 <prvUnlockQueue>
	}
 8008324:	bf00      	nop
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800832c:	b580      	push	{r7, lr}
 800832e:	b08e      	sub	sp, #56	@ 0x38
 8008330:	af04      	add	r7, sp, #16
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800833a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10b      	bne.n	8008358 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	623b      	str	r3, [r7, #32]
}
 8008352:	bf00      	nop
 8008354:	bf00      	nop
 8008356:	e7fd      	b.n	8008354 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10b      	bne.n	8008376 <xTaskCreateStatic+0x4a>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	61fb      	str	r3, [r7, #28]
}
 8008370:	bf00      	nop
 8008372:	bf00      	nop
 8008374:	e7fd      	b.n	8008372 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008376:	23a8      	movs	r3, #168	@ 0xa8
 8008378:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	2ba8      	cmp	r3, #168	@ 0xa8
 800837e:	d00b      	beq.n	8008398 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	61bb      	str	r3, [r7, #24]
}
 8008392:	bf00      	nop
 8008394:	bf00      	nop
 8008396:	e7fd      	b.n	8008394 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839a:	2b00      	cmp	r3, #0
 800839c:	d01e      	beq.n	80083dc <xTaskCreateStatic+0xb0>
 800839e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d01b      	beq.n	80083dc <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083ac:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	2202      	movs	r2, #2
 80083b2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083b6:	2300      	movs	r3, #0
 80083b8:	9303      	str	r3, [sp, #12]
 80083ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083bc:	9302      	str	r3, [sp, #8]
 80083be:	f107 0314 	add.w	r3, r7, #20
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	68b9      	ldr	r1, [r7, #8]
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 f850 	bl	8008474 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80083d6:	f000 f8ed 	bl	80085b4 <prvAddNewTaskToReadyList>
 80083da:	e001      	b.n	80083e0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80083dc:	2300      	movs	r3, #0
 80083de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083e0:	697b      	ldr	r3, [r7, #20]
	}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3728      	adds	r7, #40	@ 0x28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b08c      	sub	sp, #48	@ 0x30
 80083ee:	af04      	add	r7, sp, #16
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	603b      	str	r3, [r7, #0]
 80083f6:	4613      	mov	r3, r2
 80083f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083fa:	88fb      	ldrh	r3, [r7, #6]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4618      	mov	r0, r3
 8008400:	f001 fbde 	bl	8009bc0 <pvPortMalloc>
 8008404:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00e      	beq.n	800842a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800840c:	20a8      	movs	r0, #168	@ 0xa8
 800840e:	f001 fbd7 	bl	8009bc0 <pvPortMalloc>
 8008412:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008420:	e005      	b.n	800842e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008422:	6978      	ldr	r0, [r7, #20]
 8008424:	f001 fc94 	bl	8009d50 <vPortFree>
 8008428:	e001      	b.n	800842e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800842a:	2300      	movs	r3, #0
 800842c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d017      	beq.n	8008464 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800843c:	88fa      	ldrh	r2, [r7, #6]
 800843e:	2300      	movs	r3, #0
 8008440:	9303      	str	r3, [sp, #12]
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	9302      	str	r3, [sp, #8]
 8008446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008448:	9301      	str	r3, [sp, #4]
 800844a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	68b9      	ldr	r1, [r7, #8]
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 f80e 	bl	8008474 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008458:	69f8      	ldr	r0, [r7, #28]
 800845a:	f000 f8ab 	bl	80085b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800845e:	2301      	movs	r3, #1
 8008460:	61bb      	str	r3, [r7, #24]
 8008462:	e002      	b.n	800846a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008464:	f04f 33ff 	mov.w	r3, #4294967295
 8008468:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800846a:	69bb      	ldr	r3, [r7, #24]
	}
 800846c:	4618      	mov	r0, r3
 800846e:	3720      	adds	r7, #32
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008484:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	461a      	mov	r2, r3
 800848c:	21a5      	movs	r1, #165	@ 0xa5
 800848e:	f002 fb2c 	bl	800aaea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800849c:	3b01      	subs	r3, #1
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	f023 0307 	bic.w	r3, r3, #7
 80084aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00b      	beq.n	80084ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	617b      	str	r3, [r7, #20]
}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	e7fd      	b.n	80084ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084ce:	2300      	movs	r3, #0
 80084d0:	61fb      	str	r3, [r7, #28]
 80084d2:	e012      	b.n	80084fa <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	4413      	add	r3, r2
 80084da:	7819      	ldrb	r1, [r3, #0]
 80084dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	4413      	add	r3, r2
 80084e2:	3334      	adds	r3, #52	@ 0x34
 80084e4:	460a      	mov	r2, r1
 80084e6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	4413      	add	r3, r2
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d006      	beq.n	8008502 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	3301      	adds	r3, #1
 80084f8:	61fb      	str	r3, [r7, #28]
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	2b0f      	cmp	r3, #15
 80084fe:	d9e9      	bls.n	80084d4 <prvInitialiseNewTask+0x60>
 8008500:	e000      	b.n	8008504 <prvInitialiseNewTask+0x90>
		{
			break;
 8008502:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800850c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850e:	2b37      	cmp	r3, #55	@ 0x37
 8008510:	d901      	bls.n	8008516 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008512:	2337      	movs	r3, #55	@ 0x37
 8008514:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008518:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800851a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800851c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008520:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008524:	2200      	movs	r2, #0
 8008526:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852a:	3304      	adds	r3, #4
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff f976 	bl	800781e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008534:	3318      	adds	r3, #24
 8008536:	4618      	mov	r0, r3
 8008538:	f7ff f971 	bl	800781e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800853c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008540:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008544:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800854c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008550:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008554:	2200      	movs	r2, #0
 8008556:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	2200      	movs	r2, #0
 800855e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008564:	3354      	adds	r3, #84	@ 0x54
 8008566:	224c      	movs	r2, #76	@ 0x4c
 8008568:	2100      	movs	r1, #0
 800856a:	4618      	mov	r0, r3
 800856c:	f002 fabd 	bl	800aaea <memset>
 8008570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008572:	4a0d      	ldr	r2, [pc, #52]	@ (80085a8 <prvInitialiseNewTask+0x134>)
 8008574:	659a      	str	r2, [r3, #88]	@ 0x58
 8008576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008578:	4a0c      	ldr	r2, [pc, #48]	@ (80085ac <prvInitialiseNewTask+0x138>)
 800857a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800857c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857e:	4a0c      	ldr	r2, [pc, #48]	@ (80085b0 <prvInitialiseNewTask+0x13c>)
 8008580:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	68f9      	ldr	r1, [r7, #12]
 8008586:	69b8      	ldr	r0, [r7, #24]
 8008588:	f001 f926 	bl	80097d8 <pxPortInitialiseStack>
 800858c:	4602      	mov	r2, r0
 800858e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008590:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800859a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800859c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800859e:	bf00      	nop
 80085a0:	3720      	adds	r7, #32
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20002e50 	.word	0x20002e50
 80085ac:	20002eb8 	.word	0x20002eb8
 80085b0:	20002f20 	.word	0x20002f20

080085b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085bc:	f001 f9fe 	bl	80099bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085c0:	4b2d      	ldr	r3, [pc, #180]	@ (8008678 <prvAddNewTaskToReadyList+0xc4>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3301      	adds	r3, #1
 80085c6:	4a2c      	ldr	r2, [pc, #176]	@ (8008678 <prvAddNewTaskToReadyList+0xc4>)
 80085c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085ca:	4b2c      	ldr	r3, [pc, #176]	@ (800867c <prvAddNewTaskToReadyList+0xc8>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d109      	bne.n	80085e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085d2:	4a2a      	ldr	r2, [pc, #168]	@ (800867c <prvAddNewTaskToReadyList+0xc8>)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085d8:	4b27      	ldr	r3, [pc, #156]	@ (8008678 <prvAddNewTaskToReadyList+0xc4>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d110      	bne.n	8008602 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085e0:	f000 fc30 	bl	8008e44 <prvInitialiseTaskLists>
 80085e4:	e00d      	b.n	8008602 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085e6:	4b26      	ldr	r3, [pc, #152]	@ (8008680 <prvAddNewTaskToReadyList+0xcc>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d109      	bne.n	8008602 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085ee:	4b23      	ldr	r3, [pc, #140]	@ (800867c <prvAddNewTaskToReadyList+0xc8>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d802      	bhi.n	8008602 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085fc:	4a1f      	ldr	r2, [pc, #124]	@ (800867c <prvAddNewTaskToReadyList+0xc8>)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008602:	4b20      	ldr	r3, [pc, #128]	@ (8008684 <prvAddNewTaskToReadyList+0xd0>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3301      	adds	r3, #1
 8008608:	4a1e      	ldr	r2, [pc, #120]	@ (8008684 <prvAddNewTaskToReadyList+0xd0>)
 800860a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800860c:	4b1d      	ldr	r3, [pc, #116]	@ (8008684 <prvAddNewTaskToReadyList+0xd0>)
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008618:	4b1b      	ldr	r3, [pc, #108]	@ (8008688 <prvAddNewTaskToReadyList+0xd4>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d903      	bls.n	8008628 <prvAddNewTaskToReadyList+0x74>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008624:	4a18      	ldr	r2, [pc, #96]	@ (8008688 <prvAddNewTaskToReadyList+0xd4>)
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4a15      	ldr	r2, [pc, #84]	@ (800868c <prvAddNewTaskToReadyList+0xd8>)
 8008636:	441a      	add	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3304      	adds	r3, #4
 800863c:	4619      	mov	r1, r3
 800863e:	4610      	mov	r0, r2
 8008640:	f7ff f8f9 	bl	8007836 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008644:	f001 f9ea 	bl	8009a1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008648:	4b0d      	ldr	r3, [pc, #52]	@ (8008680 <prvAddNewTaskToReadyList+0xcc>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00e      	beq.n	800866e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008650:	4b0a      	ldr	r3, [pc, #40]	@ (800867c <prvAddNewTaskToReadyList+0xc8>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865a:	429a      	cmp	r2, r3
 800865c:	d207      	bcs.n	800866e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800865e:	4b0c      	ldr	r3, [pc, #48]	@ (8008690 <prvAddNewTaskToReadyList+0xdc>)
 8008660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008664:	601a      	str	r2, [r3, #0]
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800866e:	bf00      	nop
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20000f04 	.word	0x20000f04
 800867c:	20000a30 	.word	0x20000a30
 8008680:	20000f10 	.word	0x20000f10
 8008684:	20000f20 	.word	0x20000f20
 8008688:	20000f0c 	.word	0x20000f0c
 800868c:	20000a34 	.word	0x20000a34
 8008690:	e000ed04 	.word	0xe000ed04

08008694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800869c:	2300      	movs	r3, #0
 800869e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d018      	beq.n	80086d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80086a6:	4b14      	ldr	r3, [pc, #80]	@ (80086f8 <vTaskDelay+0x64>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <vTaskDelay+0x32>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	60bb      	str	r3, [r7, #8]
}
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	e7fd      	b.n	80086c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80086c6:	f000 f88b 	bl	80087e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086ca:	2100      	movs	r1, #0
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fd0f 	bl	80090f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086d2:	f000 f893 	bl	80087fc <xTaskResumeAll>
 80086d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d107      	bne.n	80086ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80086de:	4b07      	ldr	r3, [pc, #28]	@ (80086fc <vTaskDelay+0x68>)
 80086e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086ee:	bf00      	nop
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20000f2c 	.word	0x20000f2c
 80086fc:	e000ed04 	.word	0xe000ed04

08008700 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b08a      	sub	sp, #40	@ 0x28
 8008704:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008706:	2300      	movs	r3, #0
 8008708:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800870a:	2300      	movs	r3, #0
 800870c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800870e:	463a      	mov	r2, r7
 8008710:	1d39      	adds	r1, r7, #4
 8008712:	f107 0308 	add.w	r3, r7, #8
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff f830 	bl	800777c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	9202      	str	r2, [sp, #8]
 8008724:	9301      	str	r3, [sp, #4]
 8008726:	2300      	movs	r3, #0
 8008728:	9300      	str	r3, [sp, #0]
 800872a:	2300      	movs	r3, #0
 800872c:	460a      	mov	r2, r1
 800872e:	4924      	ldr	r1, [pc, #144]	@ (80087c0 <vTaskStartScheduler+0xc0>)
 8008730:	4824      	ldr	r0, [pc, #144]	@ (80087c4 <vTaskStartScheduler+0xc4>)
 8008732:	f7ff fdfb 	bl	800832c <xTaskCreateStatic>
 8008736:	4603      	mov	r3, r0
 8008738:	4a23      	ldr	r2, [pc, #140]	@ (80087c8 <vTaskStartScheduler+0xc8>)
 800873a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800873c:	4b22      	ldr	r3, [pc, #136]	@ (80087c8 <vTaskStartScheduler+0xc8>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008744:	2301      	movs	r3, #1
 8008746:	617b      	str	r3, [r7, #20]
 8008748:	e001      	b.n	800874e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800874a:	2300      	movs	r3, #0
 800874c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d102      	bne.n	800875a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008754:	f000 fd20 	bl	8009198 <xTimerCreateTimerTask>
 8008758:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d11b      	bne.n	8008798 <vTaskStartScheduler+0x98>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	613b      	str	r3, [r7, #16]
}
 8008772:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008774:	4b15      	ldr	r3, [pc, #84]	@ (80087cc <vTaskStartScheduler+0xcc>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3354      	adds	r3, #84	@ 0x54
 800877a:	4a15      	ldr	r2, [pc, #84]	@ (80087d0 <vTaskStartScheduler+0xd0>)
 800877c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800877e:	4b15      	ldr	r3, [pc, #84]	@ (80087d4 <vTaskStartScheduler+0xd4>)
 8008780:	f04f 32ff 	mov.w	r2, #4294967295
 8008784:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008786:	4b14      	ldr	r3, [pc, #80]	@ (80087d8 <vTaskStartScheduler+0xd8>)
 8008788:	2201      	movs	r2, #1
 800878a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800878c:	4b13      	ldr	r3, [pc, #76]	@ (80087dc <vTaskStartScheduler+0xdc>)
 800878e:	2200      	movs	r2, #0
 8008790:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008792:	f001 f8a1 	bl	80098d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008796:	e00f      	b.n	80087b8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879e:	d10b      	bne.n	80087b8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	60fb      	str	r3, [r7, #12]
}
 80087b2:	bf00      	nop
 80087b4:	bf00      	nop
 80087b6:	e7fd      	b.n	80087b4 <vTaskStartScheduler+0xb4>
}
 80087b8:	bf00      	nop
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	0800ba08 	.word	0x0800ba08
 80087c4:	08008e15 	.word	0x08008e15
 80087c8:	20000f28 	.word	0x20000f28
 80087cc:	20000a30 	.word	0x20000a30
 80087d0:	20000190 	.word	0x20000190
 80087d4:	20000f24 	.word	0x20000f24
 80087d8:	20000f10 	.word	0x20000f10
 80087dc:	20000f08 	.word	0x20000f08

080087e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80087e4:	4b04      	ldr	r3, [pc, #16]	@ (80087f8 <vTaskSuspendAll+0x18>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3301      	adds	r3, #1
 80087ea:	4a03      	ldr	r2, [pc, #12]	@ (80087f8 <vTaskSuspendAll+0x18>)
 80087ec:	6013      	str	r3, [r2, #0]
}
 80087ee:	bf00      	nop
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bc80      	pop	{r7}
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	20000f2c 	.word	0x20000f2c

080087fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008806:	2300      	movs	r3, #0
 8008808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800880a:	4b42      	ldr	r3, [pc, #264]	@ (8008914 <xTaskResumeAll+0x118>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10b      	bne.n	800882a <xTaskResumeAll+0x2e>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	603b      	str	r3, [r7, #0]
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	e7fd      	b.n	8008826 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800882a:	f001 f8c7 	bl	80099bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800882e:	4b39      	ldr	r3, [pc, #228]	@ (8008914 <xTaskResumeAll+0x118>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3b01      	subs	r3, #1
 8008834:	4a37      	ldr	r2, [pc, #220]	@ (8008914 <xTaskResumeAll+0x118>)
 8008836:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008838:	4b36      	ldr	r3, [pc, #216]	@ (8008914 <xTaskResumeAll+0x118>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d162      	bne.n	8008906 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008840:	4b35      	ldr	r3, [pc, #212]	@ (8008918 <xTaskResumeAll+0x11c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d05e      	beq.n	8008906 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008848:	e02f      	b.n	80088aa <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800884a:	4b34      	ldr	r3, [pc, #208]	@ (800891c <xTaskResumeAll+0x120>)
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	3318      	adds	r3, #24
 8008856:	4618      	mov	r0, r3
 8008858:	f7ff f848 	bl	80078ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3304      	adds	r3, #4
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff f843 	bl	80078ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800886a:	4b2d      	ldr	r3, [pc, #180]	@ (8008920 <xTaskResumeAll+0x124>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d903      	bls.n	800887a <xTaskResumeAll+0x7e>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008876:	4a2a      	ldr	r2, [pc, #168]	@ (8008920 <xTaskResumeAll+0x124>)
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4a27      	ldr	r2, [pc, #156]	@ (8008924 <xTaskResumeAll+0x128>)
 8008888:	441a      	add	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3304      	adds	r3, #4
 800888e:	4619      	mov	r1, r3
 8008890:	4610      	mov	r0, r2
 8008892:	f7fe ffd0 	bl	8007836 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800889a:	4b23      	ldr	r3, [pc, #140]	@ (8008928 <xTaskResumeAll+0x12c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d302      	bcc.n	80088aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80088a4:	4b21      	ldr	r3, [pc, #132]	@ (800892c <xTaskResumeAll+0x130>)
 80088a6:	2201      	movs	r2, #1
 80088a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088aa:	4b1c      	ldr	r3, [pc, #112]	@ (800891c <xTaskResumeAll+0x120>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1cb      	bne.n	800884a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088b8:	f000 fb68 	bl	8008f8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80088bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008930 <xTaskResumeAll+0x134>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d010      	beq.n	80088ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088c8:	f000 f844 	bl	8008954 <xTaskIncrementTick>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d002      	beq.n	80088d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80088d2:	4b16      	ldr	r3, [pc, #88]	@ (800892c <xTaskResumeAll+0x130>)
 80088d4:	2201      	movs	r2, #1
 80088d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3b01      	subs	r3, #1
 80088dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1f1      	bne.n	80088c8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80088e4:	4b12      	ldr	r3, [pc, #72]	@ (8008930 <xTaskResumeAll+0x134>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088ea:	4b10      	ldr	r3, [pc, #64]	@ (800892c <xTaskResumeAll+0x130>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d009      	beq.n	8008906 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088f2:	2301      	movs	r3, #1
 80088f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80088f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008934 <xTaskResumeAll+0x138>)
 80088f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008906:	f001 f889 	bl	8009a1c <vPortExitCritical>

	return xAlreadyYielded;
 800890a:	68bb      	ldr	r3, [r7, #8]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	20000f2c 	.word	0x20000f2c
 8008918:	20000f04 	.word	0x20000f04
 800891c:	20000ec4 	.word	0x20000ec4
 8008920:	20000f0c 	.word	0x20000f0c
 8008924:	20000a34 	.word	0x20000a34
 8008928:	20000a30 	.word	0x20000a30
 800892c:	20000f18 	.word	0x20000f18
 8008930:	20000f14 	.word	0x20000f14
 8008934:	e000ed04 	.word	0xe000ed04

08008938 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800893e:	4b04      	ldr	r3, [pc, #16]	@ (8008950 <xTaskGetTickCount+0x18>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008944:	687b      	ldr	r3, [r7, #4]
}
 8008946:	4618      	mov	r0, r3
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	bc80      	pop	{r7}
 800894e:	4770      	bx	lr
 8008950:	20000f08 	.word	0x20000f08

08008954 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800895a:	2300      	movs	r3, #0
 800895c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800895e:	4b52      	ldr	r3, [pc, #328]	@ (8008aa8 <xTaskIncrementTick+0x154>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	f040 808f 	bne.w	8008a86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008968:	4b50      	ldr	r3, [pc, #320]	@ (8008aac <xTaskIncrementTick+0x158>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3301      	adds	r3, #1
 800896e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008970:	4a4e      	ldr	r2, [pc, #312]	@ (8008aac <xTaskIncrementTick+0x158>)
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d121      	bne.n	80089c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800897c:	4b4c      	ldr	r3, [pc, #304]	@ (8008ab0 <xTaskIncrementTick+0x15c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00b      	beq.n	800899e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	603b      	str	r3, [r7, #0]
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	e7fd      	b.n	800899a <xTaskIncrementTick+0x46>
 800899e:	4b44      	ldr	r3, [pc, #272]	@ (8008ab0 <xTaskIncrementTick+0x15c>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	4b43      	ldr	r3, [pc, #268]	@ (8008ab4 <xTaskIncrementTick+0x160>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a41      	ldr	r2, [pc, #260]	@ (8008ab0 <xTaskIncrementTick+0x15c>)
 80089aa:	6013      	str	r3, [r2, #0]
 80089ac:	4a41      	ldr	r2, [pc, #260]	@ (8008ab4 <xTaskIncrementTick+0x160>)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	4b41      	ldr	r3, [pc, #260]	@ (8008ab8 <xTaskIncrementTick+0x164>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3301      	adds	r3, #1
 80089b8:	4a3f      	ldr	r2, [pc, #252]	@ (8008ab8 <xTaskIncrementTick+0x164>)
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	f000 fae6 	bl	8008f8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089c0:	4b3e      	ldr	r3, [pc, #248]	@ (8008abc <xTaskIncrementTick+0x168>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d34e      	bcc.n	8008a68 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089ca:	4b39      	ldr	r3, [pc, #228]	@ (8008ab0 <xTaskIncrementTick+0x15c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <xTaskIncrementTick+0x84>
 80089d4:	2301      	movs	r3, #1
 80089d6:	e000      	b.n	80089da <xTaskIncrementTick+0x86>
 80089d8:	2300      	movs	r3, #0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d004      	beq.n	80089e8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089de:	4b37      	ldr	r3, [pc, #220]	@ (8008abc <xTaskIncrementTick+0x168>)
 80089e0:	f04f 32ff 	mov.w	r2, #4294967295
 80089e4:	601a      	str	r2, [r3, #0]
					break;
 80089e6:	e03f      	b.n	8008a68 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80089e8:	4b31      	ldr	r3, [pc, #196]	@ (8008ab0 <xTaskIncrementTick+0x15c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d203      	bcs.n	8008a08 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a00:	4a2e      	ldr	r2, [pc, #184]	@ (8008abc <xTaskIncrementTick+0x168>)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6013      	str	r3, [r2, #0]
						break;
 8008a06:	e02f      	b.n	8008a68 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe ff6d 	bl	80078ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d004      	beq.n	8008a24 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	3318      	adds	r3, #24
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe ff64 	bl	80078ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a28:	4b25      	ldr	r3, [pc, #148]	@ (8008ac0 <xTaskIncrementTick+0x16c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d903      	bls.n	8008a38 <xTaskIncrementTick+0xe4>
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a34:	4a22      	ldr	r2, [pc, #136]	@ (8008ac0 <xTaskIncrementTick+0x16c>)
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4a1f      	ldr	r2, [pc, #124]	@ (8008ac4 <xTaskIncrementTick+0x170>)
 8008a46:	441a      	add	r2, r3
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4610      	mov	r0, r2
 8008a50:	f7fe fef1 	bl	8007836 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a58:	4b1b      	ldr	r3, [pc, #108]	@ (8008ac8 <xTaskIncrementTick+0x174>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d3b3      	bcc.n	80089ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008a62:	2301      	movs	r3, #1
 8008a64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a66:	e7b0      	b.n	80089ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a68:	4b17      	ldr	r3, [pc, #92]	@ (8008ac8 <xTaskIncrementTick+0x174>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a6e:	4915      	ldr	r1, [pc, #84]	@ (8008ac4 <xTaskIncrementTick+0x170>)
 8008a70:	4613      	mov	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	440b      	add	r3, r1
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d907      	bls.n	8008a90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	e004      	b.n	8008a90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008a86:	4b11      	ldr	r3, [pc, #68]	@ (8008acc <xTaskIncrementTick+0x178>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	4a0f      	ldr	r2, [pc, #60]	@ (8008acc <xTaskIncrementTick+0x178>)
 8008a8e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008a90:	4b0f      	ldr	r3, [pc, #60]	@ (8008ad0 <xTaskIncrementTick+0x17c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008a9c:	697b      	ldr	r3, [r7, #20]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20000f2c 	.word	0x20000f2c
 8008aac:	20000f08 	.word	0x20000f08
 8008ab0:	20000ebc 	.word	0x20000ebc
 8008ab4:	20000ec0 	.word	0x20000ec0
 8008ab8:	20000f1c 	.word	0x20000f1c
 8008abc:	20000f24 	.word	0x20000f24
 8008ac0:	20000f0c 	.word	0x20000f0c
 8008ac4:	20000a34 	.word	0x20000a34
 8008ac8:	20000a30 	.word	0x20000a30
 8008acc:	20000f14 	.word	0x20000f14
 8008ad0:	20000f18 	.word	0x20000f18

08008ad4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ada:	4b2a      	ldr	r3, [pc, #168]	@ (8008b84 <vTaskSwitchContext+0xb0>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ae2:	4b29      	ldr	r3, [pc, #164]	@ (8008b88 <vTaskSwitchContext+0xb4>)
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ae8:	e047      	b.n	8008b7a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008aea:	4b27      	ldr	r3, [pc, #156]	@ (8008b88 <vTaskSwitchContext+0xb4>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008af0:	4b26      	ldr	r3, [pc, #152]	@ (8008b8c <vTaskSwitchContext+0xb8>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	e011      	b.n	8008b1c <vTaskSwitchContext+0x48>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10b      	bne.n	8008b16 <vTaskSwitchContext+0x42>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	607b      	str	r3, [r7, #4]
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	e7fd      	b.n	8008b12 <vTaskSwitchContext+0x3e>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	491c      	ldr	r1, [pc, #112]	@ (8008b90 <vTaskSwitchContext+0xbc>)
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	4613      	mov	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	440b      	add	r3, r1
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0e3      	beq.n	8008af8 <vTaskSwitchContext+0x24>
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4a15      	ldr	r2, [pc, #84]	@ (8008b90 <vTaskSwitchContext+0xbc>)
 8008b3c:	4413      	add	r3, r2
 8008b3e:	60bb      	str	r3, [r7, #8]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	605a      	str	r2, [r3, #4]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	3308      	adds	r3, #8
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d104      	bne.n	8008b60 <vTaskSwitchContext+0x8c>
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	605a      	str	r2, [r3, #4]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	4a0b      	ldr	r2, [pc, #44]	@ (8008b94 <vTaskSwitchContext+0xc0>)
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	4a08      	ldr	r2, [pc, #32]	@ (8008b8c <vTaskSwitchContext+0xb8>)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b70:	4b08      	ldr	r3, [pc, #32]	@ (8008b94 <vTaskSwitchContext+0xc0>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3354      	adds	r3, #84	@ 0x54
 8008b76:	4a08      	ldr	r2, [pc, #32]	@ (8008b98 <vTaskSwitchContext+0xc4>)
 8008b78:	6013      	str	r3, [r2, #0]
}
 8008b7a:	bf00      	nop
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bc80      	pop	{r7}
 8008b82:	4770      	bx	lr
 8008b84:	20000f2c 	.word	0x20000f2c
 8008b88:	20000f18 	.word	0x20000f18
 8008b8c:	20000f0c 	.word	0x20000f0c
 8008b90:	20000a34 	.word	0x20000a34
 8008b94:	20000a30 	.word	0x20000a30
 8008b98:	20000190 	.word	0x20000190

08008b9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10b      	bne.n	8008bc4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	60fb      	str	r3, [r7, #12]
}
 8008bbe:	bf00      	nop
 8008bc0:	bf00      	nop
 8008bc2:	e7fd      	b.n	8008bc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bc4:	4b07      	ldr	r3, [pc, #28]	@ (8008be4 <vTaskPlaceOnEventList+0x48>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3318      	adds	r3, #24
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7fe fe55 	bl	800787c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	6838      	ldr	r0, [r7, #0]
 8008bd6:	f000 fa8b 	bl	80090f0 <prvAddCurrentTaskToDelayedList>
}
 8008bda:	bf00      	nop
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000a30 	.word	0x20000a30

08008be8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10b      	bne.n	8008c12 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	617b      	str	r3, [r7, #20]
}
 8008c0c:	bf00      	nop
 8008c0e:	bf00      	nop
 8008c10:	e7fd      	b.n	8008c0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c12:	4b0a      	ldr	r3, [pc, #40]	@ (8008c3c <vTaskPlaceOnEventListRestricted+0x54>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3318      	adds	r3, #24
 8008c18:	4619      	mov	r1, r3
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f7fe fe0b 	bl	8007836 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d002      	beq.n	8008c2c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008c26:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	68b8      	ldr	r0, [r7, #8]
 8008c30:	f000 fa5e 	bl	80090f0 <prvAddCurrentTaskToDelayedList>
	}
 8008c34:	bf00      	nop
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	20000a30 	.word	0x20000a30

08008c40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10b      	bne.n	8008c6e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	60fb      	str	r3, [r7, #12]
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	e7fd      	b.n	8008c6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	3318      	adds	r3, #24
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe fe3a 	bl	80078ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c78:	4b1d      	ldr	r3, [pc, #116]	@ (8008cf0 <xTaskRemoveFromEventList+0xb0>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d11d      	bne.n	8008cbc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	3304      	adds	r3, #4
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fe fe31 	bl	80078ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c8e:	4b19      	ldr	r3, [pc, #100]	@ (8008cf4 <xTaskRemoveFromEventList+0xb4>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d903      	bls.n	8008c9e <xTaskRemoveFromEventList+0x5e>
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9a:	4a16      	ldr	r2, [pc, #88]	@ (8008cf4 <xTaskRemoveFromEventList+0xb4>)
 8008c9c:	6013      	str	r3, [r2, #0]
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4a13      	ldr	r2, [pc, #76]	@ (8008cf8 <xTaskRemoveFromEventList+0xb8>)
 8008cac:	441a      	add	r2, r3
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	f7fe fdbe 	bl	8007836 <vListInsertEnd>
 8008cba:	e005      	b.n	8008cc8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	3318      	adds	r3, #24
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	480e      	ldr	r0, [pc, #56]	@ (8008cfc <xTaskRemoveFromEventList+0xbc>)
 8008cc4:	f7fe fdb7 	bl	8007836 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8008d00 <xTaskRemoveFromEventList+0xc0>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d905      	bls.n	8008ce2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008cda:	4b0a      	ldr	r3, [pc, #40]	@ (8008d04 <xTaskRemoveFromEventList+0xc4>)
 8008cdc:	2201      	movs	r2, #1
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	e001      	b.n	8008ce6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008ce6:	697b      	ldr	r3, [r7, #20]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20000f2c 	.word	0x20000f2c
 8008cf4:	20000f0c 	.word	0x20000f0c
 8008cf8:	20000a34 	.word	0x20000a34
 8008cfc:	20000ec4 	.word	0x20000ec4
 8008d00:	20000a30 	.word	0x20000a30
 8008d04:	20000f18 	.word	0x20000f18

08008d08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d10:	4b06      	ldr	r3, [pc, #24]	@ (8008d2c <vTaskInternalSetTimeOutState+0x24>)
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d18:	4b05      	ldr	r3, [pc, #20]	@ (8008d30 <vTaskInternalSetTimeOutState+0x28>)
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	605a      	str	r2, [r3, #4]
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bc80      	pop	{r7}
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	20000f1c 	.word	0x20000f1c
 8008d30:	20000f08 	.word	0x20000f08

08008d34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b088      	sub	sp, #32
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10b      	bne.n	8008d5c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	613b      	str	r3, [r7, #16]
}
 8008d56:	bf00      	nop
 8008d58:	bf00      	nop
 8008d5a:	e7fd      	b.n	8008d58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10b      	bne.n	8008d7a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	60fb      	str	r3, [r7, #12]
}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop
 8008d78:	e7fd      	b.n	8008d76 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008d7a:	f000 fe1f 	bl	80099bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8008df4 <xTaskCheckForTimeOut+0xc0>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d96:	d102      	bne.n	8008d9e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61fb      	str	r3, [r7, #28]
 8008d9c:	e023      	b.n	8008de6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	4b15      	ldr	r3, [pc, #84]	@ (8008df8 <xTaskCheckForTimeOut+0xc4>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d007      	beq.n	8008dba <xTaskCheckForTimeOut+0x86>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d302      	bcc.n	8008dba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008db4:	2301      	movs	r3, #1
 8008db6:	61fb      	str	r3, [r7, #28]
 8008db8:	e015      	b.n	8008de6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d20b      	bcs.n	8008ddc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	1ad2      	subs	r2, r2, r3
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7ff ff99 	bl	8008d08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	61fb      	str	r3, [r7, #28]
 8008dda:	e004      	b.n	8008de6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	2200      	movs	r2, #0
 8008de0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008de2:	2301      	movs	r3, #1
 8008de4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008de6:	f000 fe19 	bl	8009a1c <vPortExitCritical>

	return xReturn;
 8008dea:	69fb      	ldr	r3, [r7, #28]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3720      	adds	r7, #32
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	20000f08 	.word	0x20000f08
 8008df8:	20000f1c 	.word	0x20000f1c

08008dfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e00:	4b03      	ldr	r3, [pc, #12]	@ (8008e10 <vTaskMissedYield+0x14>)
 8008e02:	2201      	movs	r2, #1
 8008e04:	601a      	str	r2, [r3, #0]
}
 8008e06:	bf00      	nop
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bc80      	pop	{r7}
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	20000f18 	.word	0x20000f18

08008e14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e1c:	f000 f852 	bl	8008ec4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e20:	4b06      	ldr	r3, [pc, #24]	@ (8008e3c <prvIdleTask+0x28>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d9f9      	bls.n	8008e1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e28:	4b05      	ldr	r3, [pc, #20]	@ (8008e40 <prvIdleTask+0x2c>)
 8008e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e38:	e7f0      	b.n	8008e1c <prvIdleTask+0x8>
 8008e3a:	bf00      	nop
 8008e3c:	20000a34 	.word	0x20000a34
 8008e40:	e000ed04 	.word	0xe000ed04

08008e44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	607b      	str	r3, [r7, #4]
 8008e4e:	e00c      	b.n	8008e6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	4613      	mov	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4a12      	ldr	r2, [pc, #72]	@ (8008ea4 <prvInitialiseTaskLists+0x60>)
 8008e5c:	4413      	add	r3, r2
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe fcbe 	bl	80077e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3301      	adds	r3, #1
 8008e68:	607b      	str	r3, [r7, #4]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2b37      	cmp	r3, #55	@ 0x37
 8008e6e:	d9ef      	bls.n	8008e50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e70:	480d      	ldr	r0, [pc, #52]	@ (8008ea8 <prvInitialiseTaskLists+0x64>)
 8008e72:	f7fe fcb5 	bl	80077e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e76:	480d      	ldr	r0, [pc, #52]	@ (8008eac <prvInitialiseTaskLists+0x68>)
 8008e78:	f7fe fcb2 	bl	80077e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e7c:	480c      	ldr	r0, [pc, #48]	@ (8008eb0 <prvInitialiseTaskLists+0x6c>)
 8008e7e:	f7fe fcaf 	bl	80077e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e82:	480c      	ldr	r0, [pc, #48]	@ (8008eb4 <prvInitialiseTaskLists+0x70>)
 8008e84:	f7fe fcac 	bl	80077e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e88:	480b      	ldr	r0, [pc, #44]	@ (8008eb8 <prvInitialiseTaskLists+0x74>)
 8008e8a:	f7fe fca9 	bl	80077e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8008ebc <prvInitialiseTaskLists+0x78>)
 8008e90:	4a05      	ldr	r2, [pc, #20]	@ (8008ea8 <prvInitialiseTaskLists+0x64>)
 8008e92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e94:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec0 <prvInitialiseTaskLists+0x7c>)
 8008e96:	4a05      	ldr	r2, [pc, #20]	@ (8008eac <prvInitialiseTaskLists+0x68>)
 8008e98:	601a      	str	r2, [r3, #0]
}
 8008e9a:	bf00      	nop
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20000a34 	.word	0x20000a34
 8008ea8:	20000e94 	.word	0x20000e94
 8008eac:	20000ea8 	.word	0x20000ea8
 8008eb0:	20000ec4 	.word	0x20000ec4
 8008eb4:	20000ed8 	.word	0x20000ed8
 8008eb8:	20000ef0 	.word	0x20000ef0
 8008ebc:	20000ebc 	.word	0x20000ebc
 8008ec0:	20000ec0 	.word	0x20000ec0

08008ec4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008eca:	e019      	b.n	8008f00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ecc:	f000 fd76 	bl	80099bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008ed0:	4b10      	ldr	r3, [pc, #64]	@ (8008f14 <prvCheckTasksWaitingTermination+0x50>)
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3304      	adds	r3, #4
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fe fd05 	bl	80078ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f18 <prvCheckTasksWaitingTermination+0x54>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8008f18 <prvCheckTasksWaitingTermination+0x54>)
 8008eea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008eec:	4b0b      	ldr	r3, [pc, #44]	@ (8008f1c <prvCheckTasksWaitingTermination+0x58>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8008f1c <prvCheckTasksWaitingTermination+0x58>)
 8008ef4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ef6:	f000 fd91 	bl	8009a1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f810 	bl	8008f20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f00:	4b06      	ldr	r3, [pc, #24]	@ (8008f1c <prvCheckTasksWaitingTermination+0x58>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1e1      	bne.n	8008ecc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f08:	bf00      	nop
 8008f0a:	bf00      	nop
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20000ed8 	.word	0x20000ed8
 8008f18:	20000f04 	.word	0x20000f04
 8008f1c:	20000eec 	.word	0x20000eec

08008f20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3354      	adds	r3, #84	@ 0x54
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f001 fe51 	bl	800abd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d108      	bne.n	8008f4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 ff05 	bl	8009d50 <vPortFree>
				vPortFree( pxTCB );
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 ff02 	bl	8009d50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f4c:	e019      	b.n	8008f82 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d103      	bne.n	8008f60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fef9 	bl	8009d50 <vPortFree>
	}
 8008f5e:	e010      	b.n	8008f82 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d00b      	beq.n	8008f82 <prvDeleteTCB+0x62>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	60fb      	str	r3, [r7, #12]
}
 8008f7c:	bf00      	nop
 8008f7e:	bf00      	nop
 8008f80:	e7fd      	b.n	8008f7e <prvDeleteTCB+0x5e>
	}
 8008f82:	bf00      	nop
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
	...

08008f8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f92:	4b0e      	ldr	r3, [pc, #56]	@ (8008fcc <prvResetNextTaskUnblockTime+0x40>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d101      	bne.n	8008fa0 <prvResetNextTaskUnblockTime+0x14>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e000      	b.n	8008fa2 <prvResetNextTaskUnblockTime+0x16>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d004      	beq.n	8008fb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd0 <prvResetNextTaskUnblockTime+0x44>)
 8008fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fae:	e008      	b.n	8008fc2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008fb0:	4b06      	ldr	r3, [pc, #24]	@ (8008fcc <prvResetNextTaskUnblockTime+0x40>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	4a04      	ldr	r2, [pc, #16]	@ (8008fd0 <prvResetNextTaskUnblockTime+0x44>)
 8008fc0:	6013      	str	r3, [r2, #0]
}
 8008fc2:	bf00      	nop
 8008fc4:	370c      	adds	r7, #12
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bc80      	pop	{r7}
 8008fca:	4770      	bx	lr
 8008fcc:	20000ebc 	.word	0x20000ebc
 8008fd0:	20000f24 	.word	0x20000f24

08008fd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008fda:	4b0b      	ldr	r3, [pc, #44]	@ (8009008 <xTaskGetSchedulerState+0x34>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	607b      	str	r3, [r7, #4]
 8008fe6:	e008      	b.n	8008ffa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fe8:	4b08      	ldr	r3, [pc, #32]	@ (800900c <xTaskGetSchedulerState+0x38>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d102      	bne.n	8008ff6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	607b      	str	r3, [r7, #4]
 8008ff4:	e001      	b.n	8008ffa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ffa:	687b      	ldr	r3, [r7, #4]
	}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	bc80      	pop	{r7}
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20000f10 	.word	0x20000f10
 800900c:	20000f2c 	.word	0x20000f2c

08009010 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800901c:	2300      	movs	r3, #0
 800901e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d058      	beq.n	80090d8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009026:	4b2f      	ldr	r3, [pc, #188]	@ (80090e4 <xTaskPriorityDisinherit+0xd4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	429a      	cmp	r2, r3
 800902e:	d00b      	beq.n	8009048 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	60fb      	str	r3, [r7, #12]
}
 8009042:	bf00      	nop
 8009044:	bf00      	nop
 8009046:	e7fd      	b.n	8009044 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10b      	bne.n	8009068 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	60bb      	str	r3, [r7, #8]
}
 8009062:	bf00      	nop
 8009064:	bf00      	nop
 8009066:	e7fd      	b.n	8009064 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800906c:	1e5a      	subs	r2, r3, #1
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800907a:	429a      	cmp	r2, r3
 800907c:	d02c      	beq.n	80090d8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009082:	2b00      	cmp	r3, #0
 8009084:	d128      	bne.n	80090d8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	3304      	adds	r3, #4
 800908a:	4618      	mov	r0, r3
 800908c:	f7fe fc2e 	bl	80078ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800909c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a8:	4b0f      	ldr	r3, [pc, #60]	@ (80090e8 <xTaskPriorityDisinherit+0xd8>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d903      	bls.n	80090b8 <xTaskPriorityDisinherit+0xa8>
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b4:	4a0c      	ldr	r2, [pc, #48]	@ (80090e8 <xTaskPriorityDisinherit+0xd8>)
 80090b6:	6013      	str	r3, [r2, #0]
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090bc:	4613      	mov	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	4413      	add	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4a09      	ldr	r2, [pc, #36]	@ (80090ec <xTaskPriorityDisinherit+0xdc>)
 80090c6:	441a      	add	r2, r3
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	3304      	adds	r3, #4
 80090cc:	4619      	mov	r1, r3
 80090ce:	4610      	mov	r0, r2
 80090d0:	f7fe fbb1 	bl	8007836 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090d4:	2301      	movs	r3, #1
 80090d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090d8:	697b      	ldr	r3, [r7, #20]
	}
 80090da:	4618      	mov	r0, r3
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20000a30 	.word	0x20000a30
 80090e8:	20000f0c 	.word	0x20000f0c
 80090ec:	20000a34 	.word	0x20000a34

080090f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090fa:	4b21      	ldr	r3, [pc, #132]	@ (8009180 <prvAddCurrentTaskToDelayedList+0x90>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009100:	4b20      	ldr	r3, [pc, #128]	@ (8009184 <prvAddCurrentTaskToDelayedList+0x94>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3304      	adds	r3, #4
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe fbf0 	bl	80078ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009112:	d10a      	bne.n	800912a <prvAddCurrentTaskToDelayedList+0x3a>
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d007      	beq.n	800912a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800911a:	4b1a      	ldr	r3, [pc, #104]	@ (8009184 <prvAddCurrentTaskToDelayedList+0x94>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3304      	adds	r3, #4
 8009120:	4619      	mov	r1, r3
 8009122:	4819      	ldr	r0, [pc, #100]	@ (8009188 <prvAddCurrentTaskToDelayedList+0x98>)
 8009124:	f7fe fb87 	bl	8007836 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009128:	e026      	b.n	8009178 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4413      	add	r3, r2
 8009130:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009132:	4b14      	ldr	r3, [pc, #80]	@ (8009184 <prvAddCurrentTaskToDelayedList+0x94>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	429a      	cmp	r2, r3
 8009140:	d209      	bcs.n	8009156 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009142:	4b12      	ldr	r3, [pc, #72]	@ (800918c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	4b0f      	ldr	r3, [pc, #60]	@ (8009184 <prvAddCurrentTaskToDelayedList+0x94>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3304      	adds	r3, #4
 800914c:	4619      	mov	r1, r3
 800914e:	4610      	mov	r0, r2
 8009150:	f7fe fb94 	bl	800787c <vListInsert>
}
 8009154:	e010      	b.n	8009178 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009156:	4b0e      	ldr	r3, [pc, #56]	@ (8009190 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	4b0a      	ldr	r3, [pc, #40]	@ (8009184 <prvAddCurrentTaskToDelayedList+0x94>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3304      	adds	r3, #4
 8009160:	4619      	mov	r1, r3
 8009162:	4610      	mov	r0, r2
 8009164:	f7fe fb8a 	bl	800787c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009168:	4b0a      	ldr	r3, [pc, #40]	@ (8009194 <prvAddCurrentTaskToDelayedList+0xa4>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	429a      	cmp	r2, r3
 8009170:	d202      	bcs.n	8009178 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009172:	4a08      	ldr	r2, [pc, #32]	@ (8009194 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	6013      	str	r3, [r2, #0]
}
 8009178:	bf00      	nop
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	20000f08 	.word	0x20000f08
 8009184:	20000a30 	.word	0x20000a30
 8009188:	20000ef0 	.word	0x20000ef0
 800918c:	20000ec0 	.word	0x20000ec0
 8009190:	20000ebc 	.word	0x20000ebc
 8009194:	20000f24 	.word	0x20000f24

08009198 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b08a      	sub	sp, #40	@ 0x28
 800919c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800919e:	2300      	movs	r3, #0
 80091a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80091a2:	f000 fad9 	bl	8009758 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80091a6:	4b1d      	ldr	r3, [pc, #116]	@ (800921c <xTimerCreateTimerTask+0x84>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d021      	beq.n	80091f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091ae:	2300      	movs	r3, #0
 80091b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091b6:	1d3a      	adds	r2, r7, #4
 80091b8:	f107 0108 	add.w	r1, r7, #8
 80091bc:	f107 030c 	add.w	r3, r7, #12
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fe faf3 	bl	80077ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	9202      	str	r2, [sp, #8]
 80091ce:	9301      	str	r3, [sp, #4]
 80091d0:	2302      	movs	r3, #2
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	2300      	movs	r3, #0
 80091d6:	460a      	mov	r2, r1
 80091d8:	4911      	ldr	r1, [pc, #68]	@ (8009220 <xTimerCreateTimerTask+0x88>)
 80091da:	4812      	ldr	r0, [pc, #72]	@ (8009224 <xTimerCreateTimerTask+0x8c>)
 80091dc:	f7ff f8a6 	bl	800832c <xTaskCreateStatic>
 80091e0:	4603      	mov	r3, r0
 80091e2:	4a11      	ldr	r2, [pc, #68]	@ (8009228 <xTimerCreateTimerTask+0x90>)
 80091e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091e6:	4b10      	ldr	r3, [pc, #64]	@ (8009228 <xTimerCreateTimerTask+0x90>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091ee:	2301      	movs	r3, #1
 80091f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10b      	bne.n	8009210 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	613b      	str	r3, [r7, #16]
}
 800920a:	bf00      	nop
 800920c:	bf00      	nop
 800920e:	e7fd      	b.n	800920c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009210:	697b      	ldr	r3, [r7, #20]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3718      	adds	r7, #24
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	20000f60 	.word	0x20000f60
 8009220:	0800ba10 	.word	0x0800ba10
 8009224:	0800934d 	.word	0x0800934d
 8009228:	20000f64 	.word	0x20000f64

0800922c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08a      	sub	sp, #40	@ 0x28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
 8009238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800923a:	2300      	movs	r3, #0
 800923c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10b      	bne.n	800925c <xTimerGenericCommand+0x30>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	623b      	str	r3, [r7, #32]
}
 8009256:	bf00      	nop
 8009258:	bf00      	nop
 800925a:	e7fd      	b.n	8009258 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800925c:	4b19      	ldr	r3, [pc, #100]	@ (80092c4 <xTimerGenericCommand+0x98>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d02a      	beq.n	80092ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2b05      	cmp	r3, #5
 8009274:	dc18      	bgt.n	80092a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009276:	f7ff fead 	bl	8008fd4 <xTaskGetSchedulerState>
 800927a:	4603      	mov	r3, r0
 800927c:	2b02      	cmp	r3, #2
 800927e:	d109      	bne.n	8009294 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009280:	4b10      	ldr	r3, [pc, #64]	@ (80092c4 <xTimerGenericCommand+0x98>)
 8009282:	6818      	ldr	r0, [r3, #0]
 8009284:	f107 0110 	add.w	r1, r7, #16
 8009288:	2300      	movs	r3, #0
 800928a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800928c:	f7fe fc62 	bl	8007b54 <xQueueGenericSend>
 8009290:	6278      	str	r0, [r7, #36]	@ 0x24
 8009292:	e012      	b.n	80092ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009294:	4b0b      	ldr	r3, [pc, #44]	@ (80092c4 <xTimerGenericCommand+0x98>)
 8009296:	6818      	ldr	r0, [r3, #0]
 8009298:	f107 0110 	add.w	r1, r7, #16
 800929c:	2300      	movs	r3, #0
 800929e:	2200      	movs	r2, #0
 80092a0:	f7fe fc58 	bl	8007b54 <xQueueGenericSend>
 80092a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80092a6:	e008      	b.n	80092ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092a8:	4b06      	ldr	r3, [pc, #24]	@ (80092c4 <xTimerGenericCommand+0x98>)
 80092aa:	6818      	ldr	r0, [r3, #0]
 80092ac:	f107 0110 	add.w	r1, r7, #16
 80092b0:	2300      	movs	r3, #0
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	f7fe fd50 	bl	8007d58 <xQueueGenericSendFromISR>
 80092b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80092ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3728      	adds	r7, #40	@ 0x28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	20000f60 	.word	0x20000f60

080092c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b088      	sub	sp, #32
 80092cc:	af02      	add	r7, sp, #8
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009348 <prvProcessExpiredTimer+0x80>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	3304      	adds	r3, #4
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fe fb03 	bl	80078ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d123      	bne.n	8009336 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	699a      	ldr	r2, [r3, #24]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	18d1      	adds	r1, r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	6978      	ldr	r0, [r7, #20]
 80092fc:	f000 f8cc 	bl	8009498 <prvInsertTimerInActiveList>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d017      	beq.n	8009336 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009306:	2300      	movs	r3, #0
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	2300      	movs	r3, #0
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	2100      	movs	r1, #0
 8009310:	6978      	ldr	r0, [r7, #20]
 8009312:	f7ff ff8b 	bl	800922c <xTimerGenericCommand>
 8009316:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10b      	bne.n	8009336 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	60fb      	str	r3, [r7, #12]
}
 8009330:	bf00      	nop
 8009332:	bf00      	nop
 8009334:	e7fd      	b.n	8009332 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933a:	6978      	ldr	r0, [r7, #20]
 800933c:	4798      	blx	r3
}
 800933e:	bf00      	nop
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	20000f58 	.word	0x20000f58

0800934c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009354:	f107 0308 	add.w	r3, r7, #8
 8009358:	4618      	mov	r0, r3
 800935a:	f000 f859 	bl	8009410 <prvGetNextExpireTime>
 800935e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	4619      	mov	r1, r3
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f000 f805 	bl	8009374 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800936a:	f000 f8d7 	bl	800951c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800936e:	bf00      	nop
 8009370:	e7f0      	b.n	8009354 <prvTimerTask+0x8>
	...

08009374 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800937e:	f7ff fa2f 	bl	80087e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009382:	f107 0308 	add.w	r3, r7, #8
 8009386:	4618      	mov	r0, r3
 8009388:	f000 f866 	bl	8009458 <prvSampleTimeNow>
 800938c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d130      	bne.n	80093f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10a      	bne.n	80093b0 <prvProcessTimerOrBlockTask+0x3c>
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d806      	bhi.n	80093b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80093a2:	f7ff fa2b 	bl	80087fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093a6:	68f9      	ldr	r1, [r7, #12]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7ff ff8d 	bl	80092c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80093ae:	e024      	b.n	80093fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d008      	beq.n	80093c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093b6:	4b13      	ldr	r3, [pc, #76]	@ (8009404 <prvProcessTimerOrBlockTask+0x90>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	bf0c      	ite	eq
 80093c0:	2301      	moveq	r3, #1
 80093c2:	2300      	movne	r3, #0
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009408 <prvProcessTimerOrBlockTask+0x94>)
 80093ca:	6818      	ldr	r0, [r3, #0]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	683a      	ldr	r2, [r7, #0]
 80093d4:	4619      	mov	r1, r3
 80093d6:	f7fe ff75 	bl	80082c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093da:	f7ff fa0f 	bl	80087fc <xTaskResumeAll>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10a      	bne.n	80093fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093e4:	4b09      	ldr	r3, [pc, #36]	@ (800940c <prvProcessTimerOrBlockTask+0x98>)
 80093e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	f3bf 8f6f 	isb	sy
}
 80093f4:	e001      	b.n	80093fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093f6:	f7ff fa01 	bl	80087fc <xTaskResumeAll>
}
 80093fa:	bf00      	nop
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20000f5c 	.word	0x20000f5c
 8009408:	20000f60 	.word	0x20000f60
 800940c:	e000ed04 	.word	0xe000ed04

08009410 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009418:	4b0e      	ldr	r3, [pc, #56]	@ (8009454 <prvGetNextExpireTime+0x44>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	bf0c      	ite	eq
 8009422:	2301      	moveq	r3, #1
 8009424:	2300      	movne	r3, #0
 8009426:	b2db      	uxtb	r3, r3
 8009428:	461a      	mov	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d105      	bne.n	8009442 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009436:	4b07      	ldr	r3, [pc, #28]	@ (8009454 <prvGetNextExpireTime+0x44>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	e001      	b.n	8009446 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009446:	68fb      	ldr	r3, [r7, #12]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	bc80      	pop	{r7}
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	20000f58 	.word	0x20000f58

08009458 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009460:	f7ff fa6a 	bl	8008938 <xTaskGetTickCount>
 8009464:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009466:	4b0b      	ldr	r3, [pc, #44]	@ (8009494 <prvSampleTimeNow+0x3c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	429a      	cmp	r2, r3
 800946e:	d205      	bcs.n	800947c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009470:	f000 f910 	bl	8009694 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	601a      	str	r2, [r3, #0]
 800947a:	e002      	b.n	8009482 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009482:	4a04      	ldr	r2, [pc, #16]	@ (8009494 <prvSampleTimeNow+0x3c>)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009488:	68fb      	ldr	r3, [r7, #12]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	20000f68 	.word	0x20000f68

08009498 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80094a6:	2300      	movs	r3, #0
 80094a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d812      	bhi.n	80094e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	1ad2      	subs	r2, r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d302      	bcc.n	80094d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094cc:	2301      	movs	r3, #1
 80094ce:	617b      	str	r3, [r7, #20]
 80094d0:	e01b      	b.n	800950a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094d2:	4b10      	ldr	r3, [pc, #64]	@ (8009514 <prvInsertTimerInActiveList+0x7c>)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	3304      	adds	r3, #4
 80094da:	4619      	mov	r1, r3
 80094dc:	4610      	mov	r0, r2
 80094de:	f7fe f9cd 	bl	800787c <vListInsert>
 80094e2:	e012      	b.n	800950a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d206      	bcs.n	80094fa <prvInsertTimerInActiveList+0x62>
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d302      	bcc.n	80094fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094f4:	2301      	movs	r3, #1
 80094f6:	617b      	str	r3, [r7, #20]
 80094f8:	e007      	b.n	800950a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094fa:	4b07      	ldr	r3, [pc, #28]	@ (8009518 <prvInsertTimerInActiveList+0x80>)
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3304      	adds	r3, #4
 8009502:	4619      	mov	r1, r3
 8009504:	4610      	mov	r0, r2
 8009506:	f7fe f9b9 	bl	800787c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800950a:	697b      	ldr	r3, [r7, #20]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3718      	adds	r7, #24
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	20000f5c 	.word	0x20000f5c
 8009518:	20000f58 	.word	0x20000f58

0800951c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08e      	sub	sp, #56	@ 0x38
 8009520:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009522:	e0a5      	b.n	8009670 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	da19      	bge.n	800955e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800952a:	1d3b      	adds	r3, r7, #4
 800952c:	3304      	adds	r3, #4
 800952e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10b      	bne.n	800954e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	61fb      	str	r3, [r7, #28]
}
 8009548:	bf00      	nop
 800954a:	bf00      	nop
 800954c:	e7fd      	b.n	800954a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800954e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009554:	6850      	ldr	r0, [r2, #4]
 8009556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009558:	6892      	ldr	r2, [r2, #8]
 800955a:	4611      	mov	r1, r2
 800955c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	f2c0 8085 	blt.w	8009670 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800956a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d004      	beq.n	800957c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009574:	3304      	adds	r3, #4
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe f9b8 	bl	80078ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800957c:	463b      	mov	r3, r7
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff ff6a 	bl	8009458 <prvSampleTimeNow>
 8009584:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b09      	cmp	r3, #9
 800958a:	d86c      	bhi.n	8009666 <prvProcessReceivedCommands+0x14a>
 800958c:	a201      	add	r2, pc, #4	@ (adr r2, 8009594 <prvProcessReceivedCommands+0x78>)
 800958e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009592:	bf00      	nop
 8009594:	080095bd 	.word	0x080095bd
 8009598:	080095bd 	.word	0x080095bd
 800959c:	080095bd 	.word	0x080095bd
 80095a0:	08009667 	.word	0x08009667
 80095a4:	0800961b 	.word	0x0800961b
 80095a8:	08009655 	.word	0x08009655
 80095ac:	080095bd 	.word	0x080095bd
 80095b0:	080095bd 	.word	0x080095bd
 80095b4:	08009667 	.word	0x08009667
 80095b8:	0800961b 	.word	0x0800961b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	18d1      	adds	r1, r2, r3
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095ca:	f7ff ff65 	bl	8009498 <prvInsertTimerInActiveList>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d04a      	beq.n	800966a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095da:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80095dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095de:	69db      	ldr	r3, [r3, #28]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d142      	bne.n	800966a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e8:	699b      	ldr	r3, [r3, #24]
 80095ea:	441a      	add	r2, r3
 80095ec:	2300      	movs	r3, #0
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	2300      	movs	r3, #0
 80095f2:	2100      	movs	r1, #0
 80095f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095f6:	f7ff fe19 	bl	800922c <xTimerGenericCommand>
 80095fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d133      	bne.n	800966a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	61bb      	str	r3, [r7, #24]
}
 8009614:	bf00      	nop
 8009616:	bf00      	nop
 8009618:	e7fd      	b.n	8009616 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10b      	bne.n	8009640 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8009628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	617b      	str	r3, [r7, #20]
}
 800963a:	bf00      	nop
 800963c:	bf00      	nop
 800963e:	e7fd      	b.n	800963c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009642:	699a      	ldr	r2, [r3, #24]
 8009644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009646:	18d1      	adds	r1, r2, r3
 8009648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800964c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800964e:	f7ff ff23 	bl	8009498 <prvInsertTimerInActiveList>
					break;
 8009652:	e00d      	b.n	8009670 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009656:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800965a:	2b00      	cmp	r3, #0
 800965c:	d107      	bne.n	800966e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800965e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009660:	f000 fb76 	bl	8009d50 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009664:	e003      	b.n	800966e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8009666:	bf00      	nop
 8009668:	e002      	b.n	8009670 <prvProcessReceivedCommands+0x154>
					break;
 800966a:	bf00      	nop
 800966c:	e000      	b.n	8009670 <prvProcessReceivedCommands+0x154>
					break;
 800966e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009670:	4b07      	ldr	r3, [pc, #28]	@ (8009690 <prvProcessReceivedCommands+0x174>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	1d39      	adds	r1, r7, #4
 8009676:	2200      	movs	r2, #0
 8009678:	4618      	mov	r0, r3
 800967a:	f7fe fc09 	bl	8007e90 <xQueueReceive>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	f47f af4f 	bne.w	8009524 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009686:	bf00      	nop
 8009688:	bf00      	nop
 800968a:	3730      	adds	r7, #48	@ 0x30
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	20000f60 	.word	0x20000f60

08009694 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b088      	sub	sp, #32
 8009698:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800969a:	e046      	b.n	800972a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800969c:	4b2c      	ldr	r3, [pc, #176]	@ (8009750 <prvSwitchTimerLists+0xbc>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096a6:	4b2a      	ldr	r3, [pc, #168]	@ (8009750 <prvSwitchTimerLists+0xbc>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fe f919 	bl	80078ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d12f      	bne.n	800972a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	4413      	add	r3, r2
 80096d2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d90e      	bls.n	80096fa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096e8:	4b19      	ldr	r3, [pc, #100]	@ (8009750 <prvSwitchTimerLists+0xbc>)
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3304      	adds	r3, #4
 80096f0:	4619      	mov	r1, r3
 80096f2:	4610      	mov	r0, r2
 80096f4:	f7fe f8c2 	bl	800787c <vListInsert>
 80096f8:	e017      	b.n	800972a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096fa:	2300      	movs	r3, #0
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	2300      	movs	r3, #0
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	2100      	movs	r1, #0
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f7ff fd91 	bl	800922c <xTimerGenericCommand>
 800970a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10b      	bne.n	800972a <prvSwitchTimerLists+0x96>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	603b      	str	r3, [r7, #0]
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	e7fd      	b.n	8009726 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800972a:	4b09      	ldr	r3, [pc, #36]	@ (8009750 <prvSwitchTimerLists+0xbc>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1b3      	bne.n	800969c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009734:	4b06      	ldr	r3, [pc, #24]	@ (8009750 <prvSwitchTimerLists+0xbc>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800973a:	4b06      	ldr	r3, [pc, #24]	@ (8009754 <prvSwitchTimerLists+0xc0>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a04      	ldr	r2, [pc, #16]	@ (8009750 <prvSwitchTimerLists+0xbc>)
 8009740:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009742:	4a04      	ldr	r2, [pc, #16]	@ (8009754 <prvSwitchTimerLists+0xc0>)
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	6013      	str	r3, [r2, #0]
}
 8009748:	bf00      	nop
 800974a:	3718      	adds	r7, #24
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	20000f58 	.word	0x20000f58
 8009754:	20000f5c 	.word	0x20000f5c

08009758 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800975e:	f000 f92d 	bl	80099bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009762:	4b15      	ldr	r3, [pc, #84]	@ (80097b8 <prvCheckForValidListAndQueue+0x60>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d120      	bne.n	80097ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800976a:	4814      	ldr	r0, [pc, #80]	@ (80097bc <prvCheckForValidListAndQueue+0x64>)
 800976c:	f7fe f838 	bl	80077e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009770:	4813      	ldr	r0, [pc, #76]	@ (80097c0 <prvCheckForValidListAndQueue+0x68>)
 8009772:	f7fe f835 	bl	80077e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009776:	4b13      	ldr	r3, [pc, #76]	@ (80097c4 <prvCheckForValidListAndQueue+0x6c>)
 8009778:	4a10      	ldr	r2, [pc, #64]	@ (80097bc <prvCheckForValidListAndQueue+0x64>)
 800977a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800977c:	4b12      	ldr	r3, [pc, #72]	@ (80097c8 <prvCheckForValidListAndQueue+0x70>)
 800977e:	4a10      	ldr	r2, [pc, #64]	@ (80097c0 <prvCheckForValidListAndQueue+0x68>)
 8009780:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009782:	2300      	movs	r3, #0
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	4b11      	ldr	r3, [pc, #68]	@ (80097cc <prvCheckForValidListAndQueue+0x74>)
 8009788:	4a11      	ldr	r2, [pc, #68]	@ (80097d0 <prvCheckForValidListAndQueue+0x78>)
 800978a:	2110      	movs	r1, #16
 800978c:	200a      	movs	r0, #10
 800978e:	f7fe f941 	bl	8007a14 <xQueueGenericCreateStatic>
 8009792:	4603      	mov	r3, r0
 8009794:	4a08      	ldr	r2, [pc, #32]	@ (80097b8 <prvCheckForValidListAndQueue+0x60>)
 8009796:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009798:	4b07      	ldr	r3, [pc, #28]	@ (80097b8 <prvCheckForValidListAndQueue+0x60>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d005      	beq.n	80097ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097a0:	4b05      	ldr	r3, [pc, #20]	@ (80097b8 <prvCheckForValidListAndQueue+0x60>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	490b      	ldr	r1, [pc, #44]	@ (80097d4 <prvCheckForValidListAndQueue+0x7c>)
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fe fd64 	bl	8008274 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097ac:	f000 f936 	bl	8009a1c <vPortExitCritical>
}
 80097b0:	bf00      	nop
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	20000f60 	.word	0x20000f60
 80097bc:	20000f30 	.word	0x20000f30
 80097c0:	20000f44 	.word	0x20000f44
 80097c4:	20000f58 	.word	0x20000f58
 80097c8:	20000f5c 	.word	0x20000f5c
 80097cc:	2000100c 	.word	0x2000100c
 80097d0:	20000f6c 	.word	0x20000f6c
 80097d4:	0800ba18 	.word	0x0800ba18

080097d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	3b04      	subs	r3, #4
 80097e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80097f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3b04      	subs	r3, #4
 80097f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	f023 0201 	bic.w	r2, r3, #1
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3b04      	subs	r3, #4
 8009806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009808:	4a08      	ldr	r2, [pc, #32]	@ (800982c <pxPortInitialiseStack+0x54>)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	3b14      	subs	r3, #20
 8009812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3b20      	subs	r3, #32
 800981e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009820:	68fb      	ldr	r3, [r7, #12]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	bc80      	pop	{r7}
 800982a:	4770      	bx	lr
 800982c:	08009831 	.word	0x08009831

08009830 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009836:	2300      	movs	r3, #0
 8009838:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800983a:	4b12      	ldr	r3, [pc, #72]	@ (8009884 <prvTaskExitError+0x54>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009842:	d00b      	beq.n	800985c <prvTaskExitError+0x2c>
	__asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	60fb      	str	r3, [r7, #12]
}
 8009856:	bf00      	nop
 8009858:	bf00      	nop
 800985a:	e7fd      	b.n	8009858 <prvTaskExitError+0x28>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	60bb      	str	r3, [r7, #8]
}
 800986e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009870:	bf00      	nop
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0fc      	beq.n	8009872 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009878:	bf00      	nop
 800987a:	bf00      	nop
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	bc80      	pop	{r7}
 8009882:	4770      	bx	lr
 8009884:	20000120 	.word	0x20000120
	...

08009890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009890:	4b07      	ldr	r3, [pc, #28]	@ (80098b0 <pxCurrentTCBConst2>)
 8009892:	6819      	ldr	r1, [r3, #0]
 8009894:	6808      	ldr	r0, [r1, #0]
 8009896:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800989a:	f380 8809 	msr	PSP, r0
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f04f 0000 	mov.w	r0, #0
 80098a6:	f380 8811 	msr	BASEPRI, r0
 80098aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80098ae:	4770      	bx	lr

080098b0 <pxCurrentTCBConst2>:
 80098b0:	20000a30 	.word	0x20000a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098b4:	bf00      	nop
 80098b6:	bf00      	nop

080098b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80098b8:	4806      	ldr	r0, [pc, #24]	@ (80098d4 <prvPortStartFirstTask+0x1c>)
 80098ba:	6800      	ldr	r0, [r0, #0]
 80098bc:	6800      	ldr	r0, [r0, #0]
 80098be:	f380 8808 	msr	MSP, r0
 80098c2:	b662      	cpsie	i
 80098c4:	b661      	cpsie	f
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	df00      	svc	0
 80098d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098d2:	bf00      	nop
 80098d4:	e000ed08 	.word	0xe000ed08

080098d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098de:	4b32      	ldr	r3, [pc, #200]	@ (80099a8 <xPortStartScheduler+0xd0>)
 80098e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	22ff      	movs	r2, #255	@ 0xff
 80098ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009900:	b2da      	uxtb	r2, r3
 8009902:	4b2a      	ldr	r3, [pc, #168]	@ (80099ac <xPortStartScheduler+0xd4>)
 8009904:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009906:	4b2a      	ldr	r3, [pc, #168]	@ (80099b0 <xPortStartScheduler+0xd8>)
 8009908:	2207      	movs	r2, #7
 800990a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800990c:	e009      	b.n	8009922 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800990e:	4b28      	ldr	r3, [pc, #160]	@ (80099b0 <xPortStartScheduler+0xd8>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3b01      	subs	r3, #1
 8009914:	4a26      	ldr	r2, [pc, #152]	@ (80099b0 <xPortStartScheduler+0xd8>)
 8009916:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009918:	78fb      	ldrb	r3, [r7, #3]
 800991a:	b2db      	uxtb	r3, r3
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	b2db      	uxtb	r3, r3
 8009920:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009922:	78fb      	ldrb	r3, [r7, #3]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800992a:	2b80      	cmp	r3, #128	@ 0x80
 800992c:	d0ef      	beq.n	800990e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800992e:	4b20      	ldr	r3, [pc, #128]	@ (80099b0 <xPortStartScheduler+0xd8>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f1c3 0307 	rsb	r3, r3, #7
 8009936:	2b04      	cmp	r3, #4
 8009938:	d00b      	beq.n	8009952 <xPortStartScheduler+0x7a>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	60bb      	str	r3, [r7, #8]
}
 800994c:	bf00      	nop
 800994e:	bf00      	nop
 8009950:	e7fd      	b.n	800994e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009952:	4b17      	ldr	r3, [pc, #92]	@ (80099b0 <xPortStartScheduler+0xd8>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	021b      	lsls	r3, r3, #8
 8009958:	4a15      	ldr	r2, [pc, #84]	@ (80099b0 <xPortStartScheduler+0xd8>)
 800995a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800995c:	4b14      	ldr	r3, [pc, #80]	@ (80099b0 <xPortStartScheduler+0xd8>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009964:	4a12      	ldr	r2, [pc, #72]	@ (80099b0 <xPortStartScheduler+0xd8>)
 8009966:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	b2da      	uxtb	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009970:	4b10      	ldr	r3, [pc, #64]	@ (80099b4 <xPortStartScheduler+0xdc>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a0f      	ldr	r2, [pc, #60]	@ (80099b4 <xPortStartScheduler+0xdc>)
 8009976:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800997a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800997c:	4b0d      	ldr	r3, [pc, #52]	@ (80099b4 <xPortStartScheduler+0xdc>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a0c      	ldr	r2, [pc, #48]	@ (80099b4 <xPortStartScheduler+0xdc>)
 8009982:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009986:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009988:	f000 f8b8 	bl	8009afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800998c:	4b0a      	ldr	r3, [pc, #40]	@ (80099b8 <xPortStartScheduler+0xe0>)
 800998e:	2200      	movs	r2, #0
 8009990:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009992:	f7ff ff91 	bl	80098b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009996:	f7ff f89d 	bl	8008ad4 <vTaskSwitchContext>
	prvTaskExitError();
 800999a:	f7ff ff49 	bl	8009830 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	e000e400 	.word	0xe000e400
 80099ac:	2000105c 	.word	0x2000105c
 80099b0:	20001060 	.word	0x20001060
 80099b4:	e000ed20 	.word	0xe000ed20
 80099b8:	20000120 	.word	0x20000120

080099bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
	__asm volatile
 80099c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c6:	f383 8811 	msr	BASEPRI, r3
 80099ca:	f3bf 8f6f 	isb	sy
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	607b      	str	r3, [r7, #4]
}
 80099d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009a14 <vPortEnterCritical+0x58>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3301      	adds	r3, #1
 80099dc:	4a0d      	ldr	r2, [pc, #52]	@ (8009a14 <vPortEnterCritical+0x58>)
 80099de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009a14 <vPortEnterCritical+0x58>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d110      	bne.n	8009a0a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009a18 <vPortEnterCritical+0x5c>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00b      	beq.n	8009a0a <vPortEnterCritical+0x4e>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	603b      	str	r3, [r7, #0]
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop
 8009a08:	e7fd      	b.n	8009a06 <vPortEnterCritical+0x4a>
	}
}
 8009a0a:	bf00      	nop
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bc80      	pop	{r7}
 8009a12:	4770      	bx	lr
 8009a14:	20000120 	.word	0x20000120
 8009a18:	e000ed04 	.word	0xe000ed04

08009a1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a22:	4b12      	ldr	r3, [pc, #72]	@ (8009a6c <vPortExitCritical+0x50>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10b      	bne.n	8009a42 <vPortExitCritical+0x26>
	__asm volatile
 8009a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	607b      	str	r3, [r7, #4]
}
 8009a3c:	bf00      	nop
 8009a3e:	bf00      	nop
 8009a40:	e7fd      	b.n	8009a3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a42:	4b0a      	ldr	r3, [pc, #40]	@ (8009a6c <vPortExitCritical+0x50>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	3b01      	subs	r3, #1
 8009a48:	4a08      	ldr	r2, [pc, #32]	@ (8009a6c <vPortExitCritical+0x50>)
 8009a4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a4c:	4b07      	ldr	r3, [pc, #28]	@ (8009a6c <vPortExitCritical+0x50>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d105      	bne.n	8009a60 <vPortExitCritical+0x44>
 8009a54:	2300      	movs	r3, #0
 8009a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	f383 8811 	msr	BASEPRI, r3
}
 8009a5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bc80      	pop	{r7}
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	20000120 	.word	0x20000120

08009a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a70:	f3ef 8009 	mrs	r0, PSP
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab0 <pxCurrentTCBConst>)
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009a80:	6010      	str	r0, [r2, #0]
 8009a82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009a86:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009a8a:	f380 8811 	msr	BASEPRI, r0
 8009a8e:	f7ff f821 	bl	8008ad4 <vTaskSwitchContext>
 8009a92:	f04f 0000 	mov.w	r0, #0
 8009a96:	f380 8811 	msr	BASEPRI, r0
 8009a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009a9e:	6819      	ldr	r1, [r3, #0]
 8009aa0:	6808      	ldr	r0, [r1, #0]
 8009aa2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009aa6:	f380 8809 	msr	PSP, r0
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	4770      	bx	lr

08009ab0 <pxCurrentTCBConst>:
 8009ab0:	20000a30 	.word	0x20000a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop

08009ab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	607b      	str	r3, [r7, #4]
}
 8009ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ad2:	f7fe ff3f 	bl	8008954 <xTaskIncrementTick>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d003      	beq.n	8009ae4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009adc:	4b06      	ldr	r3, [pc, #24]	@ (8009af8 <SysTick_Handler+0x40>)
 8009ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	f383 8811 	msr	BASEPRI, r3
}
 8009aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009af0:	bf00      	nop
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	e000ed04 	.word	0xe000ed04

08009afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009afc:	b480      	push	{r7}
 8009afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b00:	4b0a      	ldr	r3, [pc, #40]	@ (8009b2c <vPortSetupTimerInterrupt+0x30>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b06:	4b0a      	ldr	r3, [pc, #40]	@ (8009b30 <vPortSetupTimerInterrupt+0x34>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b0c:	4b09      	ldr	r3, [pc, #36]	@ (8009b34 <vPortSetupTimerInterrupt+0x38>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a09      	ldr	r2, [pc, #36]	@ (8009b38 <vPortSetupTimerInterrupt+0x3c>)
 8009b12:	fba2 2303 	umull	r2, r3, r2, r3
 8009b16:	099b      	lsrs	r3, r3, #6
 8009b18:	4a08      	ldr	r2, [pc, #32]	@ (8009b3c <vPortSetupTimerInterrupt+0x40>)
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b1e:	4b03      	ldr	r3, [pc, #12]	@ (8009b2c <vPortSetupTimerInterrupt+0x30>)
 8009b20:	2207      	movs	r2, #7
 8009b22:	601a      	str	r2, [r3, #0]
}
 8009b24:	bf00      	nop
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bc80      	pop	{r7}
 8009b2a:	4770      	bx	lr
 8009b2c:	e000e010 	.word	0xe000e010
 8009b30:	e000e018 	.word	0xe000e018
 8009b34:	20000004 	.word	0x20000004
 8009b38:	10624dd3 	.word	0x10624dd3
 8009b3c:	e000e014 	.word	0xe000e014

08009b40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b46:	f3ef 8305 	mrs	r3, IPSR
 8009b4a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b0f      	cmp	r3, #15
 8009b50:	d915      	bls.n	8009b7e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b52:	4a17      	ldr	r2, [pc, #92]	@ (8009bb0 <vPortValidateInterruptPriority+0x70>)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	4413      	add	r3, r2
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b5c:	4b15      	ldr	r3, [pc, #84]	@ (8009bb4 <vPortValidateInterruptPriority+0x74>)
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	7afa      	ldrb	r2, [r7, #11]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d20b      	bcs.n	8009b7e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	607b      	str	r3, [r7, #4]
}
 8009b78:	bf00      	nop
 8009b7a:	bf00      	nop
 8009b7c:	e7fd      	b.n	8009b7a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009bb8 <vPortValidateInterruptPriority+0x78>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009b86:	4b0d      	ldr	r3, [pc, #52]	@ (8009bbc <vPortValidateInterruptPriority+0x7c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d90b      	bls.n	8009ba6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	603b      	str	r3, [r7, #0]
}
 8009ba0:	bf00      	nop
 8009ba2:	bf00      	nop
 8009ba4:	e7fd      	b.n	8009ba2 <vPortValidateInterruptPriority+0x62>
	}
 8009ba6:	bf00      	nop
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bc80      	pop	{r7}
 8009bae:	4770      	bx	lr
 8009bb0:	e000e3f0 	.word	0xe000e3f0
 8009bb4:	2000105c 	.word	0x2000105c
 8009bb8:	e000ed0c 	.word	0xe000ed0c
 8009bbc:	20001060 	.word	0x20001060

08009bc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08a      	sub	sp, #40	@ 0x28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bcc:	f7fe fe08 	bl	80087e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bd0:	4b5a      	ldr	r3, [pc, #360]	@ (8009d3c <pvPortMalloc+0x17c>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009bd8:	f000 f916 	bl	8009e08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bdc:	4b58      	ldr	r3, [pc, #352]	@ (8009d40 <pvPortMalloc+0x180>)
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4013      	ands	r3, r2
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f040 8090 	bne.w	8009d0a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d01e      	beq.n	8009c2e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009bf0:	2208      	movs	r2, #8
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d015      	beq.n	8009c2e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f023 0307 	bic.w	r3, r3, #7
 8009c08:	3308      	adds	r3, #8
 8009c0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f003 0307 	and.w	r3, r3, #7
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00b      	beq.n	8009c2e <pvPortMalloc+0x6e>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	617b      	str	r3, [r7, #20]
}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	e7fd      	b.n	8009c2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d06a      	beq.n	8009d0a <pvPortMalloc+0x14a>
 8009c34:	4b43      	ldr	r3, [pc, #268]	@ (8009d44 <pvPortMalloc+0x184>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d865      	bhi.n	8009d0a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c3e:	4b42      	ldr	r3, [pc, #264]	@ (8009d48 <pvPortMalloc+0x188>)
 8009c40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c42:	4b41      	ldr	r3, [pc, #260]	@ (8009d48 <pvPortMalloc+0x188>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c48:	e004      	b.n	8009c54 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d903      	bls.n	8009c66 <pvPortMalloc+0xa6>
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1f1      	bne.n	8009c4a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c66:	4b35      	ldr	r3, [pc, #212]	@ (8009d3c <pvPortMalloc+0x17c>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d04c      	beq.n	8009d0a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2208      	movs	r2, #8
 8009c76:	4413      	add	r3, r2
 8009c78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	1ad2      	subs	r2, r2, r3
 8009c8a:	2308      	movs	r3, #8
 8009c8c:	005b      	lsls	r3, r3, #1
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d920      	bls.n	8009cd4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4413      	add	r3, r2
 8009c98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	f003 0307 	and.w	r3, r3, #7
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <pvPortMalloc+0xfc>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	613b      	str	r3, [r7, #16]
}
 8009cb6:	bf00      	nop
 8009cb8:	bf00      	nop
 8009cba:	e7fd      	b.n	8009cb8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	1ad2      	subs	r2, r2, r3
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cce:	69b8      	ldr	r0, [r7, #24]
 8009cd0:	f000 f8fc 	bl	8009ecc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8009d44 <pvPortMalloc+0x184>)
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	4a19      	ldr	r2, [pc, #100]	@ (8009d44 <pvPortMalloc+0x184>)
 8009ce0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ce2:	4b18      	ldr	r3, [pc, #96]	@ (8009d44 <pvPortMalloc+0x184>)
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	4b19      	ldr	r3, [pc, #100]	@ (8009d4c <pvPortMalloc+0x18c>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d203      	bcs.n	8009cf6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009cee:	4b15      	ldr	r3, [pc, #84]	@ (8009d44 <pvPortMalloc+0x184>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a16      	ldr	r2, [pc, #88]	@ (8009d4c <pvPortMalloc+0x18c>)
 8009cf4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf8:	685a      	ldr	r2, [r3, #4]
 8009cfa:	4b11      	ldr	r3, [pc, #68]	@ (8009d40 <pvPortMalloc+0x180>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d06:	2200      	movs	r2, #0
 8009d08:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d0a:	f7fe fd77 	bl	80087fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	f003 0307 	and.w	r3, r3, #7
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00b      	beq.n	8009d30 <pvPortMalloc+0x170>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	60fb      	str	r3, [r7, #12]
}
 8009d2a:	bf00      	nop
 8009d2c:	bf00      	nop
 8009d2e:	e7fd      	b.n	8009d2c <pvPortMalloc+0x16c>
	return pvReturn;
 8009d30:	69fb      	ldr	r3, [r7, #28]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3728      	adds	r7, #40	@ 0x28
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	20001c6c 	.word	0x20001c6c
 8009d40:	20001c78 	.word	0x20001c78
 8009d44:	20001c70 	.word	0x20001c70
 8009d48:	20001c64 	.word	0x20001c64
 8009d4c:	20001c74 	.word	0x20001c74

08009d50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d04a      	beq.n	8009df8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d62:	2308      	movs	r3, #8
 8009d64:	425b      	negs	r3, r3
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	4413      	add	r3, r2
 8009d6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	4b22      	ldr	r3, [pc, #136]	@ (8009e00 <vPortFree+0xb0>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4013      	ands	r3, r2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10b      	bne.n	8009d96 <vPortFree+0x46>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	60fb      	str	r3, [r7, #12]
}
 8009d90:	bf00      	nop
 8009d92:	bf00      	nop
 8009d94:	e7fd      	b.n	8009d92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00b      	beq.n	8009db6 <vPortFree+0x66>
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	60bb      	str	r3, [r7, #8]
}
 8009db0:	bf00      	nop
 8009db2:	bf00      	nop
 8009db4:	e7fd      	b.n	8009db2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	4b11      	ldr	r3, [pc, #68]	@ (8009e00 <vPortFree+0xb0>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d019      	beq.n	8009df8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d115      	bne.n	8009df8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	685a      	ldr	r2, [r3, #4]
 8009dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8009e00 <vPortFree+0xb0>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	43db      	mvns	r3, r3
 8009dd6:	401a      	ands	r2, r3
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ddc:	f7fe fd00 	bl	80087e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	4b07      	ldr	r3, [pc, #28]	@ (8009e04 <vPortFree+0xb4>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4413      	add	r3, r2
 8009dea:	4a06      	ldr	r2, [pc, #24]	@ (8009e04 <vPortFree+0xb4>)
 8009dec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009dee:	6938      	ldr	r0, [r7, #16]
 8009df0:	f000 f86c 	bl	8009ecc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009df4:	f7fe fd02 	bl	80087fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009df8:	bf00      	nop
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	20001c78 	.word	0x20001c78
 8009e04:	20001c70 	.word	0x20001c70

08009e08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e0e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009e12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e14:	4b27      	ldr	r3, [pc, #156]	@ (8009eb4 <prvHeapInit+0xac>)
 8009e16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f003 0307 	and.w	r3, r3, #7
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00c      	beq.n	8009e3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3307      	adds	r3, #7
 8009e26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f023 0307 	bic.w	r3, r3, #7
 8009e2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	4a1f      	ldr	r2, [pc, #124]	@ (8009eb4 <prvHeapInit+0xac>)
 8009e38:	4413      	add	r3, r2
 8009e3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e40:	4a1d      	ldr	r2, [pc, #116]	@ (8009eb8 <prvHeapInit+0xb0>)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e46:	4b1c      	ldr	r3, [pc, #112]	@ (8009eb8 <prvHeapInit+0xb0>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	4413      	add	r3, r2
 8009e52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e54:	2208      	movs	r2, #8
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	1a9b      	subs	r3, r3, r2
 8009e5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f023 0307 	bic.w	r3, r3, #7
 8009e62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	4a15      	ldr	r2, [pc, #84]	@ (8009ebc <prvHeapInit+0xb4>)
 8009e68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e6a:	4b14      	ldr	r3, [pc, #80]	@ (8009ebc <prvHeapInit+0xb4>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e72:	4b12      	ldr	r3, [pc, #72]	@ (8009ebc <prvHeapInit+0xb4>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2200      	movs	r2, #0
 8009e78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	1ad2      	subs	r2, r2, r3
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e88:	4b0c      	ldr	r3, [pc, #48]	@ (8009ebc <prvHeapInit+0xb4>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	4a0a      	ldr	r2, [pc, #40]	@ (8009ec0 <prvHeapInit+0xb8>)
 8009e96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	4a09      	ldr	r2, [pc, #36]	@ (8009ec4 <prvHeapInit+0xbc>)
 8009e9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ea0:	4b09      	ldr	r3, [pc, #36]	@ (8009ec8 <prvHeapInit+0xc0>)
 8009ea2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009ea6:	601a      	str	r2, [r3, #0]
}
 8009ea8:	bf00      	nop
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bc80      	pop	{r7}
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	20001064 	.word	0x20001064
 8009eb8:	20001c64 	.word	0x20001c64
 8009ebc:	20001c6c 	.word	0x20001c6c
 8009ec0:	20001c74 	.word	0x20001c74
 8009ec4:	20001c70 	.word	0x20001c70
 8009ec8:	20001c78 	.word	0x20001c78

08009ecc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ed4:	4b27      	ldr	r3, [pc, #156]	@ (8009f74 <prvInsertBlockIntoFreeList+0xa8>)
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	e002      	b.n	8009ee0 <prvInsertBlockIntoFreeList+0x14>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d8f7      	bhi.n	8009eda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d108      	bne.n	8009f0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	685a      	ldr	r2, [r3, #4]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	441a      	add	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	441a      	add	r2, r3
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d118      	bne.n	8009f54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	4b14      	ldr	r3, [pc, #80]	@ (8009f78 <prvInsertBlockIntoFreeList+0xac>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d00d      	beq.n	8009f4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	441a      	add	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	601a      	str	r2, [r3, #0]
 8009f48:	e008      	b.n	8009f5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f78 <prvInsertBlockIntoFreeList+0xac>)
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	e003      	b.n	8009f5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d002      	beq.n	8009f6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f6a:	bf00      	nop
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bc80      	pop	{r7}
 8009f72:	4770      	bx	lr
 8009f74:	20001c64 	.word	0x20001c64
 8009f78:	20001c6c 	.word	0x20001c6c

08009f7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f80:	2200      	movs	r2, #0
 8009f82:	4912      	ldr	r1, [pc, #72]	@ (8009fcc <MX_USB_DEVICE_Init+0x50>)
 8009f84:	4812      	ldr	r0, [pc, #72]	@ (8009fd0 <MX_USB_DEVICE_Init+0x54>)
 8009f86:	f7fc fa24 	bl	80063d2 <USBD_Init>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f90:	f7f6 fa90 	bl	80004b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f94:	490f      	ldr	r1, [pc, #60]	@ (8009fd4 <MX_USB_DEVICE_Init+0x58>)
 8009f96:	480e      	ldr	r0, [pc, #56]	@ (8009fd0 <MX_USB_DEVICE_Init+0x54>)
 8009f98:	f7fc fa46 	bl	8006428 <USBD_RegisterClass>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d001      	beq.n	8009fa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009fa2:	f7f6 fa87 	bl	80004b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009fa6:	490c      	ldr	r1, [pc, #48]	@ (8009fd8 <MX_USB_DEVICE_Init+0x5c>)
 8009fa8:	4809      	ldr	r0, [pc, #36]	@ (8009fd0 <MX_USB_DEVICE_Init+0x54>)
 8009faa:	f7fc f977 	bl	800629c <USBD_CDC_RegisterInterface>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009fb4:	f7f6 fa7e 	bl	80004b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009fb8:	4805      	ldr	r0, [pc, #20]	@ (8009fd0 <MX_USB_DEVICE_Init+0x54>)
 8009fba:	f7fc fa4e 	bl	800645a <USBD_Start>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009fc4:	f7f6 fa76 	bl	80004b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009fc8:	bf00      	nop
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	20000134 	.word	0x20000134
 8009fd0:	20001c7c 	.word	0x20001c7c
 8009fd4:	2000001c 	.word	0x2000001c
 8009fd8:	20000124 	.word	0x20000124

08009fdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	4905      	ldr	r1, [pc, #20]	@ (8009ff8 <CDC_Init_FS+0x1c>)
 8009fe4:	4805      	ldr	r0, [pc, #20]	@ (8009ffc <CDC_Init_FS+0x20>)
 8009fe6:	f7fc f96f 	bl	80062c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009fea:	4905      	ldr	r1, [pc, #20]	@ (800a000 <CDC_Init_FS+0x24>)
 8009fec:	4803      	ldr	r0, [pc, #12]	@ (8009ffc <CDC_Init_FS+0x20>)
 8009fee:	f7fc f984 	bl	80062fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009ff2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	20002340 	.word	0x20002340
 8009ffc:	20001c7c 	.word	0x20001c7c
 800a000:	20001f40 	.word	0x20001f40

0800a004 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a004:	b480      	push	{r7}
 800a006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a008:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bc80      	pop	{r7}
 800a010:	4770      	bx	lr
	...

0800a014 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	6039      	str	r1, [r7, #0]
 800a01e:	71fb      	strb	r3, [r7, #7]
 800a020:	4613      	mov	r3, r2
 800a022:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a024:	79fb      	ldrb	r3, [r7, #7]
 800a026:	2b23      	cmp	r3, #35	@ 0x23
 800a028:	d84a      	bhi.n	800a0c0 <CDC_Control_FS+0xac>
 800a02a:	a201      	add	r2, pc, #4	@ (adr r2, 800a030 <CDC_Control_FS+0x1c>)
 800a02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a030:	0800a0c1 	.word	0x0800a0c1
 800a034:	0800a0c1 	.word	0x0800a0c1
 800a038:	0800a0c1 	.word	0x0800a0c1
 800a03c:	0800a0c1 	.word	0x0800a0c1
 800a040:	0800a0c1 	.word	0x0800a0c1
 800a044:	0800a0c1 	.word	0x0800a0c1
 800a048:	0800a0c1 	.word	0x0800a0c1
 800a04c:	0800a0c1 	.word	0x0800a0c1
 800a050:	0800a0c1 	.word	0x0800a0c1
 800a054:	0800a0c1 	.word	0x0800a0c1
 800a058:	0800a0c1 	.word	0x0800a0c1
 800a05c:	0800a0c1 	.word	0x0800a0c1
 800a060:	0800a0c1 	.word	0x0800a0c1
 800a064:	0800a0c1 	.word	0x0800a0c1
 800a068:	0800a0c1 	.word	0x0800a0c1
 800a06c:	0800a0c1 	.word	0x0800a0c1
 800a070:	0800a0c1 	.word	0x0800a0c1
 800a074:	0800a0c1 	.word	0x0800a0c1
 800a078:	0800a0c1 	.word	0x0800a0c1
 800a07c:	0800a0c1 	.word	0x0800a0c1
 800a080:	0800a0c1 	.word	0x0800a0c1
 800a084:	0800a0c1 	.word	0x0800a0c1
 800a088:	0800a0c1 	.word	0x0800a0c1
 800a08c:	0800a0c1 	.word	0x0800a0c1
 800a090:	0800a0c1 	.word	0x0800a0c1
 800a094:	0800a0c1 	.word	0x0800a0c1
 800a098:	0800a0c1 	.word	0x0800a0c1
 800a09c:	0800a0c1 	.word	0x0800a0c1
 800a0a0:	0800a0c1 	.word	0x0800a0c1
 800a0a4:	0800a0c1 	.word	0x0800a0c1
 800a0a8:	0800a0c1 	.word	0x0800a0c1
 800a0ac:	0800a0c1 	.word	0x0800a0c1
 800a0b0:	0800a0c1 	.word	0x0800a0c1
 800a0b4:	0800a0c1 	.word	0x0800a0c1
 800a0b8:	0800a0c1 	.word	0x0800a0c1
 800a0bc:	0800a0c1 	.word	0x0800a0c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a0c0:	bf00      	nop
  }

  return (USBD_OK);
 800a0c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bc80      	pop	{r7}
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop

0800a0d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a0da:	6879      	ldr	r1, [r7, #4]
 800a0dc:	480f      	ldr	r0, [pc, #60]	@ (800a11c <CDC_Receive_FS+0x4c>)
 800a0de:	f7fc f90c 	bl	80062fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a0e2:	480e      	ldr	r0, [pc, #56]	@ (800a11c <CDC_Receive_FS+0x4c>)
 800a0e4:	f7fc f94b 	bl	800637e <USBD_CDC_ReceivePacket>
  uint8_t len =(uint8_t) *Len;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	73fb      	strb	r3, [r7, #15]
  memset(buffer,'\0',64);
 800a0ee:	2240      	movs	r2, #64	@ 0x40
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	480b      	ldr	r0, [pc, #44]	@ (800a120 <CDC_Receive_FS+0x50>)
 800a0f4:	f000 fcf9 	bl	800aaea <memset>
  memcpy(buffer, Buf, len);
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	4808      	ldr	r0, [pc, #32]	@ (800a120 <CDC_Receive_FS+0x50>)
 800a100:	f000 fe21 	bl	800ad46 <memcpy>
  memset(Buf, '\0', len);
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	461a      	mov	r2, r3
 800a108:	2100      	movs	r1, #0
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 fced 	bl	800aaea <memset>
  return (USBD_OK);
 800a110:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	20001c7c 	.word	0x20001c7c
 800a120:	20000204 	.word	0x20000204

0800a124 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a134:	4b0d      	ldr	r3, [pc, #52]	@ (800a16c <CDC_Transmit_FS+0x48>)
 800a136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a13a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a146:	2301      	movs	r3, #1
 800a148:	e00b      	b.n	800a162 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a14a:	887b      	ldrh	r3, [r7, #2]
 800a14c:	461a      	mov	r2, r3
 800a14e:	6879      	ldr	r1, [r7, #4]
 800a150:	4806      	ldr	r0, [pc, #24]	@ (800a16c <CDC_Transmit_FS+0x48>)
 800a152:	f7fc f8b9 	bl	80062c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a156:	4805      	ldr	r0, [pc, #20]	@ (800a16c <CDC_Transmit_FS+0x48>)
 800a158:	f7fc f8e2 	bl	8006320 <USBD_CDC_TransmitPacket>
 800a15c:	4603      	mov	r3, r0
 800a15e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a160:	7bfb      	ldrb	r3, [r7, #15]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20001c7c 	.word	0x20001c7c

0800a170 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	6039      	str	r1, [r7, #0]
 800a17a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	2212      	movs	r2, #18
 800a180:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a182:	4b03      	ldr	r3, [pc, #12]	@ (800a190 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a184:	4618      	mov	r0, r3
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	bc80      	pop	{r7}
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	20000150 	.word	0x20000150

0800a194 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	4603      	mov	r3, r0
 800a19c:	6039      	str	r1, [r7, #0]
 800a19e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	2204      	movs	r2, #4
 800a1a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a1a6:	4b03      	ldr	r3, [pc, #12]	@ (800a1b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bc80      	pop	{r7}
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	20000164 	.word	0x20000164

0800a1b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	4603      	mov	r3, r0
 800a1c0:	6039      	str	r1, [r7, #0]
 800a1c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1c4:	79fb      	ldrb	r3, [r7, #7]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d105      	bne.n	800a1d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	4907      	ldr	r1, [pc, #28]	@ (800a1ec <USBD_FS_ProductStrDescriptor+0x34>)
 800a1ce:	4808      	ldr	r0, [pc, #32]	@ (800a1f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1d0:	f7fd f8b9 	bl	8007346 <USBD_GetString>
 800a1d4:	e004      	b.n	800a1e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1d6:	683a      	ldr	r2, [r7, #0]
 800a1d8:	4904      	ldr	r1, [pc, #16]	@ (800a1ec <USBD_FS_ProductStrDescriptor+0x34>)
 800a1da:	4805      	ldr	r0, [pc, #20]	@ (800a1f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1dc:	f7fd f8b3 	bl	8007346 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1e0:	4b02      	ldr	r3, [pc, #8]	@ (800a1ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	20002740 	.word	0x20002740
 800a1f0:	0800ba20 	.word	0x0800ba20

0800a1f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	6039      	str	r1, [r7, #0]
 800a1fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a200:	683a      	ldr	r2, [r7, #0]
 800a202:	4904      	ldr	r1, [pc, #16]	@ (800a214 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a204:	4804      	ldr	r0, [pc, #16]	@ (800a218 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a206:	f7fd f89e 	bl	8007346 <USBD_GetString>
  return USBD_StrDesc;
 800a20a:	4b02      	ldr	r3, [pc, #8]	@ (800a214 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	20002740 	.word	0x20002740
 800a218:	0800ba34 	.word	0x0800ba34

0800a21c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	6039      	str	r1, [r7, #0]
 800a226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	221a      	movs	r2, #26
 800a22c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a22e:	f000 f843 	bl	800a2b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a232:	4b02      	ldr	r3, [pc, #8]	@ (800a23c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a234:	4618      	mov	r0, r3
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20000168 	.word	0x20000168

0800a240 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	4603      	mov	r3, r0
 800a248:	6039      	str	r1, [r7, #0]
 800a24a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a24c:	79fb      	ldrb	r3, [r7, #7]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d105      	bne.n	800a25e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	4907      	ldr	r1, [pc, #28]	@ (800a274 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a256:	4808      	ldr	r0, [pc, #32]	@ (800a278 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a258:	f7fd f875 	bl	8007346 <USBD_GetString>
 800a25c:	e004      	b.n	800a268 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	4904      	ldr	r1, [pc, #16]	@ (800a274 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a262:	4805      	ldr	r0, [pc, #20]	@ (800a278 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a264:	f7fd f86f 	bl	8007346 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a268:	4b02      	ldr	r3, [pc, #8]	@ (800a274 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	20002740 	.word	0x20002740
 800a278:	0800ba48 	.word	0x0800ba48

0800a27c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	4603      	mov	r3, r0
 800a284:	6039      	str	r1, [r7, #0]
 800a286:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d105      	bne.n	800a29a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a28e:	683a      	ldr	r2, [r7, #0]
 800a290:	4907      	ldr	r1, [pc, #28]	@ (800a2b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a292:	4808      	ldr	r0, [pc, #32]	@ (800a2b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a294:	f7fd f857 	bl	8007346 <USBD_GetString>
 800a298:	e004      	b.n	800a2a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	4904      	ldr	r1, [pc, #16]	@ (800a2b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a29e:	4805      	ldr	r0, [pc, #20]	@ (800a2b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2a0:	f7fd f851 	bl	8007346 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2a4:	4b02      	ldr	r3, [pc, #8]	@ (800a2b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20002740 	.word	0x20002740
 800a2b4:	0800ba54 	.word	0x0800ba54

0800a2b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a2be:	4b0f      	ldr	r3, [pc, #60]	@ (800a2fc <Get_SerialNum+0x44>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a2c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a300 <Get_SerialNum+0x48>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a2ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a304 <Get_SerialNum+0x4c>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d009      	beq.n	800a2f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a2de:	2208      	movs	r2, #8
 800a2e0:	4909      	ldr	r1, [pc, #36]	@ (800a308 <Get_SerialNum+0x50>)
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 f814 	bl	800a310 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a2e8:	2204      	movs	r2, #4
 800a2ea:	4908      	ldr	r1, [pc, #32]	@ (800a30c <Get_SerialNum+0x54>)
 800a2ec:	68b8      	ldr	r0, [r7, #8]
 800a2ee:	f000 f80f 	bl	800a310 <IntToUnicode>
  }
}
 800a2f2:	bf00      	nop
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	1ffff7e8 	.word	0x1ffff7e8
 800a300:	1ffff7ec 	.word	0x1ffff7ec
 800a304:	1ffff7f0 	.word	0x1ffff7f0
 800a308:	2000016a 	.word	0x2000016a
 800a30c:	2000017a 	.word	0x2000017a

0800a310 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a310:	b480      	push	{r7}
 800a312:	b087      	sub	sp, #28
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	4613      	mov	r3, r2
 800a31c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a322:	2300      	movs	r3, #0
 800a324:	75fb      	strb	r3, [r7, #23]
 800a326:	e027      	b.n	800a378 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	0f1b      	lsrs	r3, r3, #28
 800a32c:	2b09      	cmp	r3, #9
 800a32e:	d80b      	bhi.n	800a348 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	0f1b      	lsrs	r3, r3, #28
 800a334:	b2da      	uxtb	r2, r3
 800a336:	7dfb      	ldrb	r3, [r7, #23]
 800a338:	005b      	lsls	r3, r3, #1
 800a33a:	4619      	mov	r1, r3
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	440b      	add	r3, r1
 800a340:	3230      	adds	r2, #48	@ 0x30
 800a342:	b2d2      	uxtb	r2, r2
 800a344:	701a      	strb	r2, [r3, #0]
 800a346:	e00a      	b.n	800a35e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	0f1b      	lsrs	r3, r3, #28
 800a34c:	b2da      	uxtb	r2, r3
 800a34e:	7dfb      	ldrb	r3, [r7, #23]
 800a350:	005b      	lsls	r3, r3, #1
 800a352:	4619      	mov	r1, r3
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	440b      	add	r3, r1
 800a358:	3237      	adds	r2, #55	@ 0x37
 800a35a:	b2d2      	uxtb	r2, r2
 800a35c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	011b      	lsls	r3, r3, #4
 800a362:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a364:	7dfb      	ldrb	r3, [r7, #23]
 800a366:	005b      	lsls	r3, r3, #1
 800a368:	3301      	adds	r3, #1
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	4413      	add	r3, r2
 800a36e:	2200      	movs	r2, #0
 800a370:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a372:	7dfb      	ldrb	r3, [r7, #23]
 800a374:	3301      	adds	r3, #1
 800a376:	75fb      	strb	r3, [r7, #23]
 800a378:	7dfa      	ldrb	r2, [r7, #23]
 800a37a:	79fb      	ldrb	r3, [r7, #7]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d3d3      	bcc.n	800a328 <IntToUnicode+0x18>
  }
}
 800a380:	bf00      	nop
 800a382:	bf00      	nop
 800a384:	371c      	adds	r7, #28
 800a386:	46bd      	mov	sp, r7
 800a388:	bc80      	pop	{r7}
 800a38a:	4770      	bx	lr

0800a38c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a0d      	ldr	r2, [pc, #52]	@ (800a3d0 <HAL_PCD_MspInit+0x44>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d113      	bne.n	800a3c6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a39e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d4 <HAL_PCD_MspInit+0x48>)
 800a3a0:	69db      	ldr	r3, [r3, #28]
 800a3a2:	4a0c      	ldr	r2, [pc, #48]	@ (800a3d4 <HAL_PCD_MspInit+0x48>)
 800a3a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a3a8:	61d3      	str	r3, [r2, #28]
 800a3aa:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d4 <HAL_PCD_MspInit+0x48>)
 800a3ac:	69db      	ldr	r3, [r3, #28]
 800a3ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	2105      	movs	r1, #5
 800a3ba:	2014      	movs	r0, #20
 800a3bc:	f7f6 fb39 	bl	8000a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a3c0:	2014      	movs	r0, #20
 800a3c2:	f7f6 fb52 	bl	8000a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a3c6:	bf00      	nop
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	40005c00 	.word	0x40005c00
 800a3d4:	40021000 	.word	0x40021000

0800a3d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4610      	mov	r0, r2
 800a3f0:	f7fc f87b 	bl	80064ea <USBD_LL_SetupStage>
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	460b      	mov	r3, r1
 800a406:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a40e:	78fa      	ldrb	r2, [r7, #3]
 800a410:	6879      	ldr	r1, [r7, #4]
 800a412:	4613      	mov	r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4413      	add	r3, r2
 800a418:	00db      	lsls	r3, r3, #3
 800a41a:	440b      	add	r3, r1
 800a41c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	78fb      	ldrb	r3, [r7, #3]
 800a424:	4619      	mov	r1, r3
 800a426:	f7fc f8ad 	bl	8006584 <USBD_LL_DataOutStage>
}
 800a42a:	bf00      	nop
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a432:	b580      	push	{r7, lr}
 800a434:	b082      	sub	sp, #8
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	460b      	mov	r3, r1
 800a43c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a444:	78fa      	ldrb	r2, [r7, #3]
 800a446:	6879      	ldr	r1, [r7, #4]
 800a448:	4613      	mov	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	440b      	add	r3, r1
 800a452:	333c      	adds	r3, #60	@ 0x3c
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	78fb      	ldrb	r3, [r7, #3]
 800a458:	4619      	mov	r1, r3
 800a45a:	f7fc f904 	bl	8006666 <USBD_LL_DataInStage>
}
 800a45e:	bf00      	nop
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b082      	sub	sp, #8
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a474:	4618      	mov	r0, r3
 800a476:	f7fc fa14 	bl	80068a2 <USBD_LL_SOF>
}
 800a47a:	bf00      	nop
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b084      	sub	sp, #16
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a48a:	2301      	movs	r3, #1
 800a48c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	2b02      	cmp	r3, #2
 800a494:	d001      	beq.n	800a49a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a496:	f7f6 f80d 	bl	80004b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a4a0:	7bfa      	ldrb	r2, [r7, #15]
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fc f9c4 	bl	8006832 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7fc f97d 	bl	80067b0 <USBD_LL_Reset>
}
 800a4b6:	bf00      	nop
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
	...

0800a4c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fc f9be 	bl	8006850 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	699b      	ldr	r3, [r3, #24]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d005      	beq.n	800a4e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4dc:	4b04      	ldr	r3, [pc, #16]	@ (800a4f0 <HAL_PCD_SuspendCallback+0x30>)
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	4a03      	ldr	r2, [pc, #12]	@ (800a4f0 <HAL_PCD_SuspendCallback+0x30>)
 800a4e2:	f043 0306 	orr.w	r3, r3, #6
 800a4e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a4e8:	bf00      	nop
 800a4ea:	3708      	adds	r7, #8
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	e000ed00 	.word	0xe000ed00

0800a4f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a502:	4618      	mov	r0, r3
 800a504:	f7fc f9b8 	bl	8006878 <USBD_LL_Resume>
}
 800a508:	bf00      	nop
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a518:	4a28      	ldr	r2, [pc, #160]	@ (800a5bc <USBD_LL_Init+0xac>)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a26      	ldr	r2, [pc, #152]	@ (800a5bc <USBD_LL_Init+0xac>)
 800a524:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a528:	4b24      	ldr	r3, [pc, #144]	@ (800a5bc <USBD_LL_Init+0xac>)
 800a52a:	4a25      	ldr	r2, [pc, #148]	@ (800a5c0 <USBD_LL_Init+0xb0>)
 800a52c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a52e:	4b23      	ldr	r3, [pc, #140]	@ (800a5bc <USBD_LL_Init+0xac>)
 800a530:	2208      	movs	r2, #8
 800a532:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a534:	4b21      	ldr	r3, [pc, #132]	@ (800a5bc <USBD_LL_Init+0xac>)
 800a536:	2202      	movs	r2, #2
 800a538:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a53a:	4b20      	ldr	r3, [pc, #128]	@ (800a5bc <USBD_LL_Init+0xac>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a540:	4b1e      	ldr	r3, [pc, #120]	@ (800a5bc <USBD_LL_Init+0xac>)
 800a542:	2200      	movs	r2, #0
 800a544:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a546:	4b1d      	ldr	r3, [pc, #116]	@ (800a5bc <USBD_LL_Init+0xac>)
 800a548:	2200      	movs	r2, #0
 800a54a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a54c:	481b      	ldr	r0, [pc, #108]	@ (800a5bc <USBD_LL_Init+0xac>)
 800a54e:	f7f6 fc37 	bl	8000dc0 <HAL_PCD_Init>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d001      	beq.n	800a55c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a558:	f7f5 ffac 	bl	80004b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a562:	2318      	movs	r3, #24
 800a564:	2200      	movs	r2, #0
 800a566:	2100      	movs	r1, #0
 800a568:	f7f8 f955 	bl	8002816 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a572:	2358      	movs	r3, #88	@ 0x58
 800a574:	2200      	movs	r2, #0
 800a576:	2180      	movs	r1, #128	@ 0x80
 800a578:	f7f8 f94d 	bl	8002816 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a582:	23c0      	movs	r3, #192	@ 0xc0
 800a584:	2200      	movs	r2, #0
 800a586:	2181      	movs	r1, #129	@ 0x81
 800a588:	f7f8 f945 	bl	8002816 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a592:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a596:	2200      	movs	r2, #0
 800a598:	2101      	movs	r1, #1
 800a59a:	f7f8 f93c 	bl	8002816 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a5a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	2182      	movs	r1, #130	@ 0x82
 800a5ac:	f7f8 f933 	bl	8002816 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	20002940 	.word	0x20002940
 800a5c0:	40005c00 	.word	0x40005c00

0800a5c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7f6 fcef 	bl	8000fbe <HAL_PCD_Start>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 f94e 	bl	800a888 <USBD_Get_USB_Status>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b084      	sub	sp, #16
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	4608      	mov	r0, r1
 800a604:	4611      	mov	r1, r2
 800a606:	461a      	mov	r2, r3
 800a608:	4603      	mov	r3, r0
 800a60a:	70fb      	strb	r3, [r7, #3]
 800a60c:	460b      	mov	r3, r1
 800a60e:	70bb      	strb	r3, [r7, #2]
 800a610:	4613      	mov	r3, r2
 800a612:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a622:	78bb      	ldrb	r3, [r7, #2]
 800a624:	883a      	ldrh	r2, [r7, #0]
 800a626:	78f9      	ldrb	r1, [r7, #3]
 800a628:	f7f6 fe44 	bl	80012b4 <HAL_PCD_EP_Open>
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a630:	7bfb      	ldrb	r3, [r7, #15]
 800a632:	4618      	mov	r0, r3
 800a634:	f000 f928 	bl	800a888 <USBD_Get_USB_Status>
 800a638:	4603      	mov	r3, r0
 800a63a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a63c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b084      	sub	sp, #16
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	460b      	mov	r3, r1
 800a650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a656:	2300      	movs	r3, #0
 800a658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a660:	78fa      	ldrb	r2, [r7, #3]
 800a662:	4611      	mov	r1, r2
 800a664:	4618      	mov	r0, r3
 800a666:	f7f6 fe82 	bl	800136e <HAL_PCD_EP_Close>
 800a66a:	4603      	mov	r3, r0
 800a66c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
 800a670:	4618      	mov	r0, r3
 800a672:	f000 f909 	bl	800a888 <USBD_Get_USB_Status>
 800a676:	4603      	mov	r3, r0
 800a678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a67a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	460b      	mov	r3, r1
 800a68e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a690:	2300      	movs	r3, #0
 800a692:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a69e:	78fa      	ldrb	r2, [r7, #3]
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7f6 ff2a 	bl	80014fc <HAL_PCD_EP_SetStall>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f000 f8ea 	bl	800a888 <USBD_Get_USB_Status>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6dc:	78fa      	ldrb	r2, [r7, #3]
 800a6de:	4611      	mov	r1, r2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7f6 ff6b 	bl	80015bc <HAL_PCD_EP_ClrStall>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 f8cb 	bl	800a888 <USBD_Get_USB_Status>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	460b      	mov	r3, r1
 800a70a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a712:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a714:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	da0c      	bge.n	800a736 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a722:	68f9      	ldr	r1, [r7, #12]
 800a724:	1c5a      	adds	r2, r3, #1
 800a726:	4613      	mov	r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	4413      	add	r3, r2
 800a72c:	00db      	lsls	r3, r3, #3
 800a72e:	440b      	add	r3, r1
 800a730:	3302      	adds	r3, #2
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	e00b      	b.n	800a74e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a736:	78fb      	ldrb	r3, [r7, #3]
 800a738:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a73c:	68f9      	ldr	r1, [r7, #12]
 800a73e:	4613      	mov	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	00db      	lsls	r3, r3, #3
 800a746:	440b      	add	r3, r1
 800a748:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800a74c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3714      	adds	r7, #20
 800a752:	46bd      	mov	sp, r7
 800a754:	bc80      	pop	{r7}
 800a756:	4770      	bx	lr

0800a758 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	460b      	mov	r3, r1
 800a762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a764:	2300      	movs	r3, #0
 800a766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a768:	2300      	movs	r3, #0
 800a76a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a772:	78fa      	ldrb	r2, [r7, #3]
 800a774:	4611      	mov	r1, r2
 800a776:	4618      	mov	r0, r3
 800a778:	f7f6 fd77 	bl	800126a <HAL_PCD_SetAddress>
 800a77c:	4603      	mov	r3, r0
 800a77e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	4618      	mov	r0, r3
 800a784:	f000 f880 	bl	800a888 <USBD_Get_USB_Status>
 800a788:	4603      	mov	r3, r0
 800a78a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a78c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b086      	sub	sp, #24
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	60f8      	str	r0, [r7, #12]
 800a79e:	607a      	str	r2, [r7, #4]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	72fb      	strb	r3, [r7, #11]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a7b8:	893b      	ldrh	r3, [r7, #8]
 800a7ba:	7af9      	ldrb	r1, [r7, #11]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	f7f6 fe66 	bl	800148e <HAL_PCD_EP_Transmit>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f000 f85d 	bl	800a888 <USBD_Get_USB_Status>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3718      	adds	r7, #24
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	607a      	str	r2, [r7, #4]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	72fb      	strb	r3, [r7, #11]
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a7fe:	893b      	ldrh	r3, [r7, #8]
 800a800:	7af9      	ldrb	r1, [r7, #11]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	f7f6 fdfb 	bl	80013fe <HAL_PCD_EP_Receive>
 800a808:	4603      	mov	r3, r0
 800a80a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 f83a 	bl	800a888 <USBD_Get_USB_Status>
 800a814:	4603      	mov	r3, r0
 800a816:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a818:	7dbb      	ldrb	r3, [r7, #22]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3718      	adds	r7, #24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	460b      	mov	r3, r1
 800a82c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a834:	78fa      	ldrb	r2, [r7, #3]
 800a836:	4611      	mov	r1, r2
 800a838:	4618      	mov	r0, r3
 800a83a:	f7f6 fe11 	bl	8001460 <HAL_PCD_EP_GetRxCount>
 800a83e:	4603      	mov	r3, r0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a850:	4b02      	ldr	r3, [pc, #8]	@ (800a85c <USBD_static_malloc+0x14>)
}
 800a852:	4618      	mov	r0, r3
 800a854:	370c      	adds	r7, #12
 800a856:	46bd      	mov	sp, r7
 800a858:	bc80      	pop	{r7}
 800a85a:	4770      	bx	lr
 800a85c:	20002c30 	.word	0x20002c30

0800a860 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]

}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bc80      	pop	{r7}
 800a870:	4770      	bx	lr

0800a872 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a872:	b480      	push	{r7}
 800a874:	b083      	sub	sp, #12
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	460b      	mov	r3, r1
 800a87c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a87e:	bf00      	nop
 800a880:	370c      	adds	r7, #12
 800a882:	46bd      	mov	sp, r7
 800a884:	bc80      	pop	{r7}
 800a886:	4770      	bx	lr

0800a888 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	4603      	mov	r3, r0
 800a890:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a896:	79fb      	ldrb	r3, [r7, #7]
 800a898:	2b03      	cmp	r3, #3
 800a89a:	d817      	bhi.n	800a8cc <USBD_Get_USB_Status+0x44>
 800a89c:	a201      	add	r2, pc, #4	@ (adr r2, 800a8a4 <USBD_Get_USB_Status+0x1c>)
 800a89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a2:	bf00      	nop
 800a8a4:	0800a8b5 	.word	0x0800a8b5
 800a8a8:	0800a8bb 	.word	0x0800a8bb
 800a8ac:	0800a8c1 	.word	0x0800a8c1
 800a8b0:	0800a8c7 	.word	0x0800a8c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b8:	e00b      	b.n	800a8d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8ba:	2302      	movs	r3, #2
 800a8bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8be:	e008      	b.n	800a8d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8c4:	e005      	b.n	800a8d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ca:	e002      	b.n	800a8d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a8d0:	bf00      	nop
  }
  return usb_status;
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bc80      	pop	{r7}
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop

0800a8e0 <std>:
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	b510      	push	{r4, lr}
 800a8e4:	4604      	mov	r4, r0
 800a8e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a8ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8ee:	6083      	str	r3, [r0, #8]
 800a8f0:	8181      	strh	r1, [r0, #12]
 800a8f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a8f4:	81c2      	strh	r2, [r0, #14]
 800a8f6:	6183      	str	r3, [r0, #24]
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	2208      	movs	r2, #8
 800a8fc:	305c      	adds	r0, #92	@ 0x5c
 800a8fe:	f000 f8f4 	bl	800aaea <memset>
 800a902:	4b0d      	ldr	r3, [pc, #52]	@ (800a938 <std+0x58>)
 800a904:	6224      	str	r4, [r4, #32]
 800a906:	6263      	str	r3, [r4, #36]	@ 0x24
 800a908:	4b0c      	ldr	r3, [pc, #48]	@ (800a93c <std+0x5c>)
 800a90a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a90c:	4b0c      	ldr	r3, [pc, #48]	@ (800a940 <std+0x60>)
 800a90e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a910:	4b0c      	ldr	r3, [pc, #48]	@ (800a944 <std+0x64>)
 800a912:	6323      	str	r3, [r4, #48]	@ 0x30
 800a914:	4b0c      	ldr	r3, [pc, #48]	@ (800a948 <std+0x68>)
 800a916:	429c      	cmp	r4, r3
 800a918:	d006      	beq.n	800a928 <std+0x48>
 800a91a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a91e:	4294      	cmp	r4, r2
 800a920:	d002      	beq.n	800a928 <std+0x48>
 800a922:	33d0      	adds	r3, #208	@ 0xd0
 800a924:	429c      	cmp	r4, r3
 800a926:	d105      	bne.n	800a934 <std+0x54>
 800a928:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a92c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a930:	f000 ba06 	b.w	800ad40 <__retarget_lock_init_recursive>
 800a934:	bd10      	pop	{r4, pc}
 800a936:	bf00      	nop
 800a938:	0800aa65 	.word	0x0800aa65
 800a93c:	0800aa87 	.word	0x0800aa87
 800a940:	0800aabf 	.word	0x0800aabf
 800a944:	0800aae3 	.word	0x0800aae3
 800a948:	20002e50 	.word	0x20002e50

0800a94c <stdio_exit_handler>:
 800a94c:	4a02      	ldr	r2, [pc, #8]	@ (800a958 <stdio_exit_handler+0xc>)
 800a94e:	4903      	ldr	r1, [pc, #12]	@ (800a95c <stdio_exit_handler+0x10>)
 800a950:	4803      	ldr	r0, [pc, #12]	@ (800a960 <stdio_exit_handler+0x14>)
 800a952:	f000 b869 	b.w	800aa28 <_fwalk_sglue>
 800a956:	bf00      	nop
 800a958:	20000184 	.word	0x20000184
 800a95c:	0800b09d 	.word	0x0800b09d
 800a960:	20000194 	.word	0x20000194

0800a964 <cleanup_stdio>:
 800a964:	6841      	ldr	r1, [r0, #4]
 800a966:	4b0c      	ldr	r3, [pc, #48]	@ (800a998 <cleanup_stdio+0x34>)
 800a968:	b510      	push	{r4, lr}
 800a96a:	4299      	cmp	r1, r3
 800a96c:	4604      	mov	r4, r0
 800a96e:	d001      	beq.n	800a974 <cleanup_stdio+0x10>
 800a970:	f000 fb94 	bl	800b09c <_fflush_r>
 800a974:	68a1      	ldr	r1, [r4, #8]
 800a976:	4b09      	ldr	r3, [pc, #36]	@ (800a99c <cleanup_stdio+0x38>)
 800a978:	4299      	cmp	r1, r3
 800a97a:	d002      	beq.n	800a982 <cleanup_stdio+0x1e>
 800a97c:	4620      	mov	r0, r4
 800a97e:	f000 fb8d 	bl	800b09c <_fflush_r>
 800a982:	68e1      	ldr	r1, [r4, #12]
 800a984:	4b06      	ldr	r3, [pc, #24]	@ (800a9a0 <cleanup_stdio+0x3c>)
 800a986:	4299      	cmp	r1, r3
 800a988:	d004      	beq.n	800a994 <cleanup_stdio+0x30>
 800a98a:	4620      	mov	r0, r4
 800a98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a990:	f000 bb84 	b.w	800b09c <_fflush_r>
 800a994:	bd10      	pop	{r4, pc}
 800a996:	bf00      	nop
 800a998:	20002e50 	.word	0x20002e50
 800a99c:	20002eb8 	.word	0x20002eb8
 800a9a0:	20002f20 	.word	0x20002f20

0800a9a4 <global_stdio_init.part.0>:
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a9d4 <global_stdio_init.part.0+0x30>)
 800a9a8:	4c0b      	ldr	r4, [pc, #44]	@ (800a9d8 <global_stdio_init.part.0+0x34>)
 800a9aa:	4a0c      	ldr	r2, [pc, #48]	@ (800a9dc <global_stdio_init.part.0+0x38>)
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	601a      	str	r2, [r3, #0]
 800a9b0:	2104      	movs	r1, #4
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f7ff ff94 	bl	800a8e0 <std>
 800a9b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a9bc:	2201      	movs	r2, #1
 800a9be:	2109      	movs	r1, #9
 800a9c0:	f7ff ff8e 	bl	800a8e0 <std>
 800a9c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9ce:	2112      	movs	r1, #18
 800a9d0:	f7ff bf86 	b.w	800a8e0 <std>
 800a9d4:	20002f88 	.word	0x20002f88
 800a9d8:	20002e50 	.word	0x20002e50
 800a9dc:	0800a94d 	.word	0x0800a94d

0800a9e0 <__sfp_lock_acquire>:
 800a9e0:	4801      	ldr	r0, [pc, #4]	@ (800a9e8 <__sfp_lock_acquire+0x8>)
 800a9e2:	f000 b9ae 	b.w	800ad42 <__retarget_lock_acquire_recursive>
 800a9e6:	bf00      	nop
 800a9e8:	20002f91 	.word	0x20002f91

0800a9ec <__sfp_lock_release>:
 800a9ec:	4801      	ldr	r0, [pc, #4]	@ (800a9f4 <__sfp_lock_release+0x8>)
 800a9ee:	f000 b9a9 	b.w	800ad44 <__retarget_lock_release_recursive>
 800a9f2:	bf00      	nop
 800a9f4:	20002f91 	.word	0x20002f91

0800a9f8 <__sinit>:
 800a9f8:	b510      	push	{r4, lr}
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	f7ff fff0 	bl	800a9e0 <__sfp_lock_acquire>
 800aa00:	6a23      	ldr	r3, [r4, #32]
 800aa02:	b11b      	cbz	r3, 800aa0c <__sinit+0x14>
 800aa04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa08:	f7ff bff0 	b.w	800a9ec <__sfp_lock_release>
 800aa0c:	4b04      	ldr	r3, [pc, #16]	@ (800aa20 <__sinit+0x28>)
 800aa0e:	6223      	str	r3, [r4, #32]
 800aa10:	4b04      	ldr	r3, [pc, #16]	@ (800aa24 <__sinit+0x2c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1f5      	bne.n	800aa04 <__sinit+0xc>
 800aa18:	f7ff ffc4 	bl	800a9a4 <global_stdio_init.part.0>
 800aa1c:	e7f2      	b.n	800aa04 <__sinit+0xc>
 800aa1e:	bf00      	nop
 800aa20:	0800a965 	.word	0x0800a965
 800aa24:	20002f88 	.word	0x20002f88

0800aa28 <_fwalk_sglue>:
 800aa28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa2c:	4607      	mov	r7, r0
 800aa2e:	4688      	mov	r8, r1
 800aa30:	4614      	mov	r4, r2
 800aa32:	2600      	movs	r6, #0
 800aa34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa38:	f1b9 0901 	subs.w	r9, r9, #1
 800aa3c:	d505      	bpl.n	800aa4a <_fwalk_sglue+0x22>
 800aa3e:	6824      	ldr	r4, [r4, #0]
 800aa40:	2c00      	cmp	r4, #0
 800aa42:	d1f7      	bne.n	800aa34 <_fwalk_sglue+0xc>
 800aa44:	4630      	mov	r0, r6
 800aa46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa4a:	89ab      	ldrh	r3, [r5, #12]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d907      	bls.n	800aa60 <_fwalk_sglue+0x38>
 800aa50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa54:	3301      	adds	r3, #1
 800aa56:	d003      	beq.n	800aa60 <_fwalk_sglue+0x38>
 800aa58:	4629      	mov	r1, r5
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	47c0      	blx	r8
 800aa5e:	4306      	orrs	r6, r0
 800aa60:	3568      	adds	r5, #104	@ 0x68
 800aa62:	e7e9      	b.n	800aa38 <_fwalk_sglue+0x10>

0800aa64 <__sread>:
 800aa64:	b510      	push	{r4, lr}
 800aa66:	460c      	mov	r4, r1
 800aa68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa6c:	f000 f91a 	bl	800aca4 <_read_r>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	bfab      	itete	ge
 800aa74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa76:	89a3      	ldrhlt	r3, [r4, #12]
 800aa78:	181b      	addge	r3, r3, r0
 800aa7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa7e:	bfac      	ite	ge
 800aa80:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa82:	81a3      	strhlt	r3, [r4, #12]
 800aa84:	bd10      	pop	{r4, pc}

0800aa86 <__swrite>:
 800aa86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8a:	461f      	mov	r7, r3
 800aa8c:	898b      	ldrh	r3, [r1, #12]
 800aa8e:	4605      	mov	r5, r0
 800aa90:	05db      	lsls	r3, r3, #23
 800aa92:	460c      	mov	r4, r1
 800aa94:	4616      	mov	r6, r2
 800aa96:	d505      	bpl.n	800aaa4 <__swrite+0x1e>
 800aa98:	2302      	movs	r3, #2
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa0:	f000 f8ee 	bl	800ac80 <_lseek_r>
 800aaa4:	89a3      	ldrh	r3, [r4, #12]
 800aaa6:	4632      	mov	r2, r6
 800aaa8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aaac:	81a3      	strh	r3, [r4, #12]
 800aaae:	4628      	mov	r0, r5
 800aab0:	463b      	mov	r3, r7
 800aab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaba:	f000 b905 	b.w	800acc8 <_write_r>

0800aabe <__sseek>:
 800aabe:	b510      	push	{r4, lr}
 800aac0:	460c      	mov	r4, r1
 800aac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aac6:	f000 f8db 	bl	800ac80 <_lseek_r>
 800aaca:	1c43      	adds	r3, r0, #1
 800aacc:	89a3      	ldrh	r3, [r4, #12]
 800aace:	bf15      	itete	ne
 800aad0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aad2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aad6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aada:	81a3      	strheq	r3, [r4, #12]
 800aadc:	bf18      	it	ne
 800aade:	81a3      	strhne	r3, [r4, #12]
 800aae0:	bd10      	pop	{r4, pc}

0800aae2 <__sclose>:
 800aae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aae6:	f000 b865 	b.w	800abb4 <_close_r>

0800aaea <memset>:
 800aaea:	4603      	mov	r3, r0
 800aaec:	4402      	add	r2, r0
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d100      	bne.n	800aaf4 <memset+0xa>
 800aaf2:	4770      	bx	lr
 800aaf4:	f803 1b01 	strb.w	r1, [r3], #1
 800aaf8:	e7f9      	b.n	800aaee <memset+0x4>
	...

0800aafc <strtok>:
 800aafc:	4b16      	ldr	r3, [pc, #88]	@ (800ab58 <strtok+0x5c>)
 800aafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab02:	681f      	ldr	r7, [r3, #0]
 800ab04:	4605      	mov	r5, r0
 800ab06:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ab08:	460e      	mov	r6, r1
 800ab0a:	b9ec      	cbnz	r4, 800ab48 <strtok+0x4c>
 800ab0c:	2050      	movs	r0, #80	@ 0x50
 800ab0e:	f000 f98f 	bl	800ae30 <malloc>
 800ab12:	4602      	mov	r2, r0
 800ab14:	6478      	str	r0, [r7, #68]	@ 0x44
 800ab16:	b920      	cbnz	r0, 800ab22 <strtok+0x26>
 800ab18:	215b      	movs	r1, #91	@ 0x5b
 800ab1a:	4b10      	ldr	r3, [pc, #64]	@ (800ab5c <strtok+0x60>)
 800ab1c:	4810      	ldr	r0, [pc, #64]	@ (800ab60 <strtok+0x64>)
 800ab1e:	f000 f921 	bl	800ad64 <__assert_func>
 800ab22:	e9c0 4400 	strd	r4, r4, [r0]
 800ab26:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ab2a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ab2e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ab32:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ab36:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ab3a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ab3e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ab42:	6184      	str	r4, [r0, #24]
 800ab44:	7704      	strb	r4, [r0, #28]
 800ab46:	6244      	str	r4, [r0, #36]	@ 0x24
 800ab48:	4631      	mov	r1, r6
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab54:	f000 b806 	b.w	800ab64 <__strtok_r>
 800ab58:	20000190 	.word	0x20000190
 800ab5c:	0800bada 	.word	0x0800bada
 800ab60:	0800baf1 	.word	0x0800baf1

0800ab64 <__strtok_r>:
 800ab64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab66:	4604      	mov	r4, r0
 800ab68:	b908      	cbnz	r0, 800ab6e <__strtok_r+0xa>
 800ab6a:	6814      	ldr	r4, [r2, #0]
 800ab6c:	b144      	cbz	r4, 800ab80 <__strtok_r+0x1c>
 800ab6e:	460f      	mov	r7, r1
 800ab70:	4620      	mov	r0, r4
 800ab72:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ab76:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ab7a:	b91e      	cbnz	r6, 800ab84 <__strtok_r+0x20>
 800ab7c:	b965      	cbnz	r5, 800ab98 <__strtok_r+0x34>
 800ab7e:	6015      	str	r5, [r2, #0]
 800ab80:	2000      	movs	r0, #0
 800ab82:	e005      	b.n	800ab90 <__strtok_r+0x2c>
 800ab84:	42b5      	cmp	r5, r6
 800ab86:	d1f6      	bne.n	800ab76 <__strtok_r+0x12>
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1f0      	bne.n	800ab6e <__strtok_r+0xa>
 800ab8c:	6014      	str	r4, [r2, #0]
 800ab8e:	7003      	strb	r3, [r0, #0]
 800ab90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab92:	461c      	mov	r4, r3
 800ab94:	e00c      	b.n	800abb0 <__strtok_r+0x4c>
 800ab96:	b915      	cbnz	r5, 800ab9e <__strtok_r+0x3a>
 800ab98:	460e      	mov	r6, r1
 800ab9a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab9e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aba2:	42ab      	cmp	r3, r5
 800aba4:	d1f7      	bne.n	800ab96 <__strtok_r+0x32>
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d0f3      	beq.n	800ab92 <__strtok_r+0x2e>
 800abaa:	2300      	movs	r3, #0
 800abac:	f804 3c01 	strb.w	r3, [r4, #-1]
 800abb0:	6014      	str	r4, [r2, #0]
 800abb2:	e7ed      	b.n	800ab90 <__strtok_r+0x2c>

0800abb4 <_close_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	2300      	movs	r3, #0
 800abb8:	4d05      	ldr	r5, [pc, #20]	@ (800abd0 <_close_r+0x1c>)
 800abba:	4604      	mov	r4, r0
 800abbc:	4608      	mov	r0, r1
 800abbe:	602b      	str	r3, [r5, #0]
 800abc0:	f7f5 fdbd 	bl	800073e <_close>
 800abc4:	1c43      	adds	r3, r0, #1
 800abc6:	d102      	bne.n	800abce <_close_r+0x1a>
 800abc8:	682b      	ldr	r3, [r5, #0]
 800abca:	b103      	cbz	r3, 800abce <_close_r+0x1a>
 800abcc:	6023      	str	r3, [r4, #0]
 800abce:	bd38      	pop	{r3, r4, r5, pc}
 800abd0:	20002f8c 	.word	0x20002f8c

0800abd4 <_reclaim_reent>:
 800abd4:	4b29      	ldr	r3, [pc, #164]	@ (800ac7c <_reclaim_reent+0xa8>)
 800abd6:	b570      	push	{r4, r5, r6, lr}
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4604      	mov	r4, r0
 800abdc:	4283      	cmp	r3, r0
 800abde:	d04b      	beq.n	800ac78 <_reclaim_reent+0xa4>
 800abe0:	69c3      	ldr	r3, [r0, #28]
 800abe2:	b1ab      	cbz	r3, 800ac10 <_reclaim_reent+0x3c>
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	b16b      	cbz	r3, 800ac04 <_reclaim_reent+0x30>
 800abe8:	2500      	movs	r5, #0
 800abea:	69e3      	ldr	r3, [r4, #28]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	5959      	ldr	r1, [r3, r5]
 800abf0:	2900      	cmp	r1, #0
 800abf2:	d13b      	bne.n	800ac6c <_reclaim_reent+0x98>
 800abf4:	3504      	adds	r5, #4
 800abf6:	2d80      	cmp	r5, #128	@ 0x80
 800abf8:	d1f7      	bne.n	800abea <_reclaim_reent+0x16>
 800abfa:	69e3      	ldr	r3, [r4, #28]
 800abfc:	4620      	mov	r0, r4
 800abfe:	68d9      	ldr	r1, [r3, #12]
 800ac00:	f000 f8ce 	bl	800ada0 <_free_r>
 800ac04:	69e3      	ldr	r3, [r4, #28]
 800ac06:	6819      	ldr	r1, [r3, #0]
 800ac08:	b111      	cbz	r1, 800ac10 <_reclaim_reent+0x3c>
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f000 f8c8 	bl	800ada0 <_free_r>
 800ac10:	6961      	ldr	r1, [r4, #20]
 800ac12:	b111      	cbz	r1, 800ac1a <_reclaim_reent+0x46>
 800ac14:	4620      	mov	r0, r4
 800ac16:	f000 f8c3 	bl	800ada0 <_free_r>
 800ac1a:	69e1      	ldr	r1, [r4, #28]
 800ac1c:	b111      	cbz	r1, 800ac24 <_reclaim_reent+0x50>
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 f8be 	bl	800ada0 <_free_r>
 800ac24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ac26:	b111      	cbz	r1, 800ac2e <_reclaim_reent+0x5a>
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f000 f8b9 	bl	800ada0 <_free_r>
 800ac2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac30:	b111      	cbz	r1, 800ac38 <_reclaim_reent+0x64>
 800ac32:	4620      	mov	r0, r4
 800ac34:	f000 f8b4 	bl	800ada0 <_free_r>
 800ac38:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ac3a:	b111      	cbz	r1, 800ac42 <_reclaim_reent+0x6e>
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f000 f8af 	bl	800ada0 <_free_r>
 800ac42:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ac44:	b111      	cbz	r1, 800ac4c <_reclaim_reent+0x78>
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 f8aa 	bl	800ada0 <_free_r>
 800ac4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ac4e:	b111      	cbz	r1, 800ac56 <_reclaim_reent+0x82>
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 f8a5 	bl	800ada0 <_free_r>
 800ac56:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ac58:	b111      	cbz	r1, 800ac60 <_reclaim_reent+0x8c>
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f000 f8a0 	bl	800ada0 <_free_r>
 800ac60:	6a23      	ldr	r3, [r4, #32]
 800ac62:	b14b      	cbz	r3, 800ac78 <_reclaim_reent+0xa4>
 800ac64:	4620      	mov	r0, r4
 800ac66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac6a:	4718      	bx	r3
 800ac6c:	680e      	ldr	r6, [r1, #0]
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f000 f896 	bl	800ada0 <_free_r>
 800ac74:	4631      	mov	r1, r6
 800ac76:	e7bb      	b.n	800abf0 <_reclaim_reent+0x1c>
 800ac78:	bd70      	pop	{r4, r5, r6, pc}
 800ac7a:	bf00      	nop
 800ac7c:	20000190 	.word	0x20000190

0800ac80 <_lseek_r>:
 800ac80:	b538      	push	{r3, r4, r5, lr}
 800ac82:	4604      	mov	r4, r0
 800ac84:	4608      	mov	r0, r1
 800ac86:	4611      	mov	r1, r2
 800ac88:	2200      	movs	r2, #0
 800ac8a:	4d05      	ldr	r5, [pc, #20]	@ (800aca0 <_lseek_r+0x20>)
 800ac8c:	602a      	str	r2, [r5, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	f7f5 fd79 	bl	8000786 <_lseek>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	d102      	bne.n	800ac9e <_lseek_r+0x1e>
 800ac98:	682b      	ldr	r3, [r5, #0]
 800ac9a:	b103      	cbz	r3, 800ac9e <_lseek_r+0x1e>
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	20002f8c 	.word	0x20002f8c

0800aca4 <_read_r>:
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	4604      	mov	r4, r0
 800aca8:	4608      	mov	r0, r1
 800acaa:	4611      	mov	r1, r2
 800acac:	2200      	movs	r2, #0
 800acae:	4d05      	ldr	r5, [pc, #20]	@ (800acc4 <_read_r+0x20>)
 800acb0:	602a      	str	r2, [r5, #0]
 800acb2:	461a      	mov	r2, r3
 800acb4:	f7f5 fd0a 	bl	80006cc <_read>
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	d102      	bne.n	800acc2 <_read_r+0x1e>
 800acbc:	682b      	ldr	r3, [r5, #0]
 800acbe:	b103      	cbz	r3, 800acc2 <_read_r+0x1e>
 800acc0:	6023      	str	r3, [r4, #0]
 800acc2:	bd38      	pop	{r3, r4, r5, pc}
 800acc4:	20002f8c 	.word	0x20002f8c

0800acc8 <_write_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4604      	mov	r4, r0
 800accc:	4608      	mov	r0, r1
 800acce:	4611      	mov	r1, r2
 800acd0:	2200      	movs	r2, #0
 800acd2:	4d05      	ldr	r5, [pc, #20]	@ (800ace8 <_write_r+0x20>)
 800acd4:	602a      	str	r2, [r5, #0]
 800acd6:	461a      	mov	r2, r3
 800acd8:	f7f5 fd15 	bl	8000706 <_write>
 800acdc:	1c43      	adds	r3, r0, #1
 800acde:	d102      	bne.n	800ace6 <_write_r+0x1e>
 800ace0:	682b      	ldr	r3, [r5, #0]
 800ace2:	b103      	cbz	r3, 800ace6 <_write_r+0x1e>
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
 800ace8:	20002f8c 	.word	0x20002f8c

0800acec <__errno>:
 800acec:	4b01      	ldr	r3, [pc, #4]	@ (800acf4 <__errno+0x8>)
 800acee:	6818      	ldr	r0, [r3, #0]
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	20000190 	.word	0x20000190

0800acf8 <__libc_init_array>:
 800acf8:	b570      	push	{r4, r5, r6, lr}
 800acfa:	2600      	movs	r6, #0
 800acfc:	4d0c      	ldr	r5, [pc, #48]	@ (800ad30 <__libc_init_array+0x38>)
 800acfe:	4c0d      	ldr	r4, [pc, #52]	@ (800ad34 <__libc_init_array+0x3c>)
 800ad00:	1b64      	subs	r4, r4, r5
 800ad02:	10a4      	asrs	r4, r4, #2
 800ad04:	42a6      	cmp	r6, r4
 800ad06:	d109      	bne.n	800ad1c <__libc_init_array+0x24>
 800ad08:	f000 fe54 	bl	800b9b4 <_init>
 800ad0c:	2600      	movs	r6, #0
 800ad0e:	4d0a      	ldr	r5, [pc, #40]	@ (800ad38 <__libc_init_array+0x40>)
 800ad10:	4c0a      	ldr	r4, [pc, #40]	@ (800ad3c <__libc_init_array+0x44>)
 800ad12:	1b64      	subs	r4, r4, r5
 800ad14:	10a4      	asrs	r4, r4, #2
 800ad16:	42a6      	cmp	r6, r4
 800ad18:	d105      	bne.n	800ad26 <__libc_init_array+0x2e>
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}
 800ad1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad20:	4798      	blx	r3
 800ad22:	3601      	adds	r6, #1
 800ad24:	e7ee      	b.n	800ad04 <__libc_init_array+0xc>
 800ad26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad2a:	4798      	blx	r3
 800ad2c:	3601      	adds	r6, #1
 800ad2e:	e7f2      	b.n	800ad16 <__libc_init_array+0x1e>
 800ad30:	0800bbc4 	.word	0x0800bbc4
 800ad34:	0800bbc4 	.word	0x0800bbc4
 800ad38:	0800bbc4 	.word	0x0800bbc4
 800ad3c:	0800bbc8 	.word	0x0800bbc8

0800ad40 <__retarget_lock_init_recursive>:
 800ad40:	4770      	bx	lr

0800ad42 <__retarget_lock_acquire_recursive>:
 800ad42:	4770      	bx	lr

0800ad44 <__retarget_lock_release_recursive>:
 800ad44:	4770      	bx	lr

0800ad46 <memcpy>:
 800ad46:	440a      	add	r2, r1
 800ad48:	4291      	cmp	r1, r2
 800ad4a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad4e:	d100      	bne.n	800ad52 <memcpy+0xc>
 800ad50:	4770      	bx	lr
 800ad52:	b510      	push	{r4, lr}
 800ad54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad58:	4291      	cmp	r1, r2
 800ad5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad5e:	d1f9      	bne.n	800ad54 <memcpy+0xe>
 800ad60:	bd10      	pop	{r4, pc}
	...

0800ad64 <__assert_func>:
 800ad64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad66:	4614      	mov	r4, r2
 800ad68:	461a      	mov	r2, r3
 800ad6a:	4b09      	ldr	r3, [pc, #36]	@ (800ad90 <__assert_func+0x2c>)
 800ad6c:	4605      	mov	r5, r0
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68d8      	ldr	r0, [r3, #12]
 800ad72:	b954      	cbnz	r4, 800ad8a <__assert_func+0x26>
 800ad74:	4b07      	ldr	r3, [pc, #28]	@ (800ad94 <__assert_func+0x30>)
 800ad76:	461c      	mov	r4, r3
 800ad78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad7c:	9100      	str	r1, [sp, #0]
 800ad7e:	462b      	mov	r3, r5
 800ad80:	4905      	ldr	r1, [pc, #20]	@ (800ad98 <__assert_func+0x34>)
 800ad82:	f000 f9b3 	bl	800b0ec <fiprintf>
 800ad86:	f000 f9d3 	bl	800b130 <abort>
 800ad8a:	4b04      	ldr	r3, [pc, #16]	@ (800ad9c <__assert_func+0x38>)
 800ad8c:	e7f4      	b.n	800ad78 <__assert_func+0x14>
 800ad8e:	bf00      	nop
 800ad90:	20000190 	.word	0x20000190
 800ad94:	0800bb86 	.word	0x0800bb86
 800ad98:	0800bb58 	.word	0x0800bb58
 800ad9c:	0800bb4b 	.word	0x0800bb4b

0800ada0 <_free_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4605      	mov	r5, r0
 800ada4:	2900      	cmp	r1, #0
 800ada6:	d040      	beq.n	800ae2a <_free_r+0x8a>
 800ada8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adac:	1f0c      	subs	r4, r1, #4
 800adae:	2b00      	cmp	r3, #0
 800adb0:	bfb8      	it	lt
 800adb2:	18e4      	addlt	r4, r4, r3
 800adb4:	f000 f8e6 	bl	800af84 <__malloc_lock>
 800adb8:	4a1c      	ldr	r2, [pc, #112]	@ (800ae2c <_free_r+0x8c>)
 800adba:	6813      	ldr	r3, [r2, #0]
 800adbc:	b933      	cbnz	r3, 800adcc <_free_r+0x2c>
 800adbe:	6063      	str	r3, [r4, #4]
 800adc0:	6014      	str	r4, [r2, #0]
 800adc2:	4628      	mov	r0, r5
 800adc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adc8:	f000 b8e2 	b.w	800af90 <__malloc_unlock>
 800adcc:	42a3      	cmp	r3, r4
 800adce:	d908      	bls.n	800ade2 <_free_r+0x42>
 800add0:	6820      	ldr	r0, [r4, #0]
 800add2:	1821      	adds	r1, r4, r0
 800add4:	428b      	cmp	r3, r1
 800add6:	bf01      	itttt	eq
 800add8:	6819      	ldreq	r1, [r3, #0]
 800adda:	685b      	ldreq	r3, [r3, #4]
 800addc:	1809      	addeq	r1, r1, r0
 800adde:	6021      	streq	r1, [r4, #0]
 800ade0:	e7ed      	b.n	800adbe <_free_r+0x1e>
 800ade2:	461a      	mov	r2, r3
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	b10b      	cbz	r3, 800adec <_free_r+0x4c>
 800ade8:	42a3      	cmp	r3, r4
 800adea:	d9fa      	bls.n	800ade2 <_free_r+0x42>
 800adec:	6811      	ldr	r1, [r2, #0]
 800adee:	1850      	adds	r0, r2, r1
 800adf0:	42a0      	cmp	r0, r4
 800adf2:	d10b      	bne.n	800ae0c <_free_r+0x6c>
 800adf4:	6820      	ldr	r0, [r4, #0]
 800adf6:	4401      	add	r1, r0
 800adf8:	1850      	adds	r0, r2, r1
 800adfa:	4283      	cmp	r3, r0
 800adfc:	6011      	str	r1, [r2, #0]
 800adfe:	d1e0      	bne.n	800adc2 <_free_r+0x22>
 800ae00:	6818      	ldr	r0, [r3, #0]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	4408      	add	r0, r1
 800ae06:	6010      	str	r0, [r2, #0]
 800ae08:	6053      	str	r3, [r2, #4]
 800ae0a:	e7da      	b.n	800adc2 <_free_r+0x22>
 800ae0c:	d902      	bls.n	800ae14 <_free_r+0x74>
 800ae0e:	230c      	movs	r3, #12
 800ae10:	602b      	str	r3, [r5, #0]
 800ae12:	e7d6      	b.n	800adc2 <_free_r+0x22>
 800ae14:	6820      	ldr	r0, [r4, #0]
 800ae16:	1821      	adds	r1, r4, r0
 800ae18:	428b      	cmp	r3, r1
 800ae1a:	bf01      	itttt	eq
 800ae1c:	6819      	ldreq	r1, [r3, #0]
 800ae1e:	685b      	ldreq	r3, [r3, #4]
 800ae20:	1809      	addeq	r1, r1, r0
 800ae22:	6021      	streq	r1, [r4, #0]
 800ae24:	6063      	str	r3, [r4, #4]
 800ae26:	6054      	str	r4, [r2, #4]
 800ae28:	e7cb      	b.n	800adc2 <_free_r+0x22>
 800ae2a:	bd38      	pop	{r3, r4, r5, pc}
 800ae2c:	20002f98 	.word	0x20002f98

0800ae30 <malloc>:
 800ae30:	4b02      	ldr	r3, [pc, #8]	@ (800ae3c <malloc+0xc>)
 800ae32:	4601      	mov	r1, r0
 800ae34:	6818      	ldr	r0, [r3, #0]
 800ae36:	f000 b825 	b.w	800ae84 <_malloc_r>
 800ae3a:	bf00      	nop
 800ae3c:	20000190 	.word	0x20000190

0800ae40 <sbrk_aligned>:
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	4e0f      	ldr	r6, [pc, #60]	@ (800ae80 <sbrk_aligned+0x40>)
 800ae44:	460c      	mov	r4, r1
 800ae46:	6831      	ldr	r1, [r6, #0]
 800ae48:	4605      	mov	r5, r0
 800ae4a:	b911      	cbnz	r1, 800ae52 <sbrk_aligned+0x12>
 800ae4c:	f000 f960 	bl	800b110 <_sbrk_r>
 800ae50:	6030      	str	r0, [r6, #0]
 800ae52:	4621      	mov	r1, r4
 800ae54:	4628      	mov	r0, r5
 800ae56:	f000 f95b 	bl	800b110 <_sbrk_r>
 800ae5a:	1c43      	adds	r3, r0, #1
 800ae5c:	d103      	bne.n	800ae66 <sbrk_aligned+0x26>
 800ae5e:	f04f 34ff 	mov.w	r4, #4294967295
 800ae62:	4620      	mov	r0, r4
 800ae64:	bd70      	pop	{r4, r5, r6, pc}
 800ae66:	1cc4      	adds	r4, r0, #3
 800ae68:	f024 0403 	bic.w	r4, r4, #3
 800ae6c:	42a0      	cmp	r0, r4
 800ae6e:	d0f8      	beq.n	800ae62 <sbrk_aligned+0x22>
 800ae70:	1a21      	subs	r1, r4, r0
 800ae72:	4628      	mov	r0, r5
 800ae74:	f000 f94c 	bl	800b110 <_sbrk_r>
 800ae78:	3001      	adds	r0, #1
 800ae7a:	d1f2      	bne.n	800ae62 <sbrk_aligned+0x22>
 800ae7c:	e7ef      	b.n	800ae5e <sbrk_aligned+0x1e>
 800ae7e:	bf00      	nop
 800ae80:	20002f94 	.word	0x20002f94

0800ae84 <_malloc_r>:
 800ae84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae88:	1ccd      	adds	r5, r1, #3
 800ae8a:	f025 0503 	bic.w	r5, r5, #3
 800ae8e:	3508      	adds	r5, #8
 800ae90:	2d0c      	cmp	r5, #12
 800ae92:	bf38      	it	cc
 800ae94:	250c      	movcc	r5, #12
 800ae96:	2d00      	cmp	r5, #0
 800ae98:	4606      	mov	r6, r0
 800ae9a:	db01      	blt.n	800aea0 <_malloc_r+0x1c>
 800ae9c:	42a9      	cmp	r1, r5
 800ae9e:	d904      	bls.n	800aeaa <_malloc_r+0x26>
 800aea0:	230c      	movs	r3, #12
 800aea2:	6033      	str	r3, [r6, #0]
 800aea4:	2000      	movs	r0, #0
 800aea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af80 <_malloc_r+0xfc>
 800aeae:	f000 f869 	bl	800af84 <__malloc_lock>
 800aeb2:	f8d8 3000 	ldr.w	r3, [r8]
 800aeb6:	461c      	mov	r4, r3
 800aeb8:	bb44      	cbnz	r4, 800af0c <_malloc_r+0x88>
 800aeba:	4629      	mov	r1, r5
 800aebc:	4630      	mov	r0, r6
 800aebe:	f7ff ffbf 	bl	800ae40 <sbrk_aligned>
 800aec2:	1c43      	adds	r3, r0, #1
 800aec4:	4604      	mov	r4, r0
 800aec6:	d158      	bne.n	800af7a <_malloc_r+0xf6>
 800aec8:	f8d8 4000 	ldr.w	r4, [r8]
 800aecc:	4627      	mov	r7, r4
 800aece:	2f00      	cmp	r7, #0
 800aed0:	d143      	bne.n	800af5a <_malloc_r+0xd6>
 800aed2:	2c00      	cmp	r4, #0
 800aed4:	d04b      	beq.n	800af6e <_malloc_r+0xea>
 800aed6:	6823      	ldr	r3, [r4, #0]
 800aed8:	4639      	mov	r1, r7
 800aeda:	4630      	mov	r0, r6
 800aedc:	eb04 0903 	add.w	r9, r4, r3
 800aee0:	f000 f916 	bl	800b110 <_sbrk_r>
 800aee4:	4581      	cmp	r9, r0
 800aee6:	d142      	bne.n	800af6e <_malloc_r+0xea>
 800aee8:	6821      	ldr	r1, [r4, #0]
 800aeea:	4630      	mov	r0, r6
 800aeec:	1a6d      	subs	r5, r5, r1
 800aeee:	4629      	mov	r1, r5
 800aef0:	f7ff ffa6 	bl	800ae40 <sbrk_aligned>
 800aef4:	3001      	adds	r0, #1
 800aef6:	d03a      	beq.n	800af6e <_malloc_r+0xea>
 800aef8:	6823      	ldr	r3, [r4, #0]
 800aefa:	442b      	add	r3, r5
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	f8d8 3000 	ldr.w	r3, [r8]
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	bb62      	cbnz	r2, 800af60 <_malloc_r+0xdc>
 800af06:	f8c8 7000 	str.w	r7, [r8]
 800af0a:	e00f      	b.n	800af2c <_malloc_r+0xa8>
 800af0c:	6822      	ldr	r2, [r4, #0]
 800af0e:	1b52      	subs	r2, r2, r5
 800af10:	d420      	bmi.n	800af54 <_malloc_r+0xd0>
 800af12:	2a0b      	cmp	r2, #11
 800af14:	d917      	bls.n	800af46 <_malloc_r+0xc2>
 800af16:	1961      	adds	r1, r4, r5
 800af18:	42a3      	cmp	r3, r4
 800af1a:	6025      	str	r5, [r4, #0]
 800af1c:	bf18      	it	ne
 800af1e:	6059      	strne	r1, [r3, #4]
 800af20:	6863      	ldr	r3, [r4, #4]
 800af22:	bf08      	it	eq
 800af24:	f8c8 1000 	streq.w	r1, [r8]
 800af28:	5162      	str	r2, [r4, r5]
 800af2a:	604b      	str	r3, [r1, #4]
 800af2c:	4630      	mov	r0, r6
 800af2e:	f000 f82f 	bl	800af90 <__malloc_unlock>
 800af32:	f104 000b 	add.w	r0, r4, #11
 800af36:	1d23      	adds	r3, r4, #4
 800af38:	f020 0007 	bic.w	r0, r0, #7
 800af3c:	1ac2      	subs	r2, r0, r3
 800af3e:	bf1c      	itt	ne
 800af40:	1a1b      	subne	r3, r3, r0
 800af42:	50a3      	strne	r3, [r4, r2]
 800af44:	e7af      	b.n	800aea6 <_malloc_r+0x22>
 800af46:	6862      	ldr	r2, [r4, #4]
 800af48:	42a3      	cmp	r3, r4
 800af4a:	bf0c      	ite	eq
 800af4c:	f8c8 2000 	streq.w	r2, [r8]
 800af50:	605a      	strne	r2, [r3, #4]
 800af52:	e7eb      	b.n	800af2c <_malloc_r+0xa8>
 800af54:	4623      	mov	r3, r4
 800af56:	6864      	ldr	r4, [r4, #4]
 800af58:	e7ae      	b.n	800aeb8 <_malloc_r+0x34>
 800af5a:	463c      	mov	r4, r7
 800af5c:	687f      	ldr	r7, [r7, #4]
 800af5e:	e7b6      	b.n	800aece <_malloc_r+0x4a>
 800af60:	461a      	mov	r2, r3
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	42a3      	cmp	r3, r4
 800af66:	d1fb      	bne.n	800af60 <_malloc_r+0xdc>
 800af68:	2300      	movs	r3, #0
 800af6a:	6053      	str	r3, [r2, #4]
 800af6c:	e7de      	b.n	800af2c <_malloc_r+0xa8>
 800af6e:	230c      	movs	r3, #12
 800af70:	4630      	mov	r0, r6
 800af72:	6033      	str	r3, [r6, #0]
 800af74:	f000 f80c 	bl	800af90 <__malloc_unlock>
 800af78:	e794      	b.n	800aea4 <_malloc_r+0x20>
 800af7a:	6005      	str	r5, [r0, #0]
 800af7c:	e7d6      	b.n	800af2c <_malloc_r+0xa8>
 800af7e:	bf00      	nop
 800af80:	20002f98 	.word	0x20002f98

0800af84 <__malloc_lock>:
 800af84:	4801      	ldr	r0, [pc, #4]	@ (800af8c <__malloc_lock+0x8>)
 800af86:	f7ff bedc 	b.w	800ad42 <__retarget_lock_acquire_recursive>
 800af8a:	bf00      	nop
 800af8c:	20002f90 	.word	0x20002f90

0800af90 <__malloc_unlock>:
 800af90:	4801      	ldr	r0, [pc, #4]	@ (800af98 <__malloc_unlock+0x8>)
 800af92:	f7ff bed7 	b.w	800ad44 <__retarget_lock_release_recursive>
 800af96:	bf00      	nop
 800af98:	20002f90 	.word	0x20002f90

0800af9c <__sflush_r>:
 800af9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa2:	0716      	lsls	r6, r2, #28
 800afa4:	4605      	mov	r5, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	d454      	bmi.n	800b054 <__sflush_r+0xb8>
 800afaa:	684b      	ldr	r3, [r1, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	dc02      	bgt.n	800afb6 <__sflush_r+0x1a>
 800afb0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	dd48      	ble.n	800b048 <__sflush_r+0xac>
 800afb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afb8:	2e00      	cmp	r6, #0
 800afba:	d045      	beq.n	800b048 <__sflush_r+0xac>
 800afbc:	2300      	movs	r3, #0
 800afbe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800afc2:	682f      	ldr	r7, [r5, #0]
 800afc4:	6a21      	ldr	r1, [r4, #32]
 800afc6:	602b      	str	r3, [r5, #0]
 800afc8:	d030      	beq.n	800b02c <__sflush_r+0x90>
 800afca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afcc:	89a3      	ldrh	r3, [r4, #12]
 800afce:	0759      	lsls	r1, r3, #29
 800afd0:	d505      	bpl.n	800afde <__sflush_r+0x42>
 800afd2:	6863      	ldr	r3, [r4, #4]
 800afd4:	1ad2      	subs	r2, r2, r3
 800afd6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afd8:	b10b      	cbz	r3, 800afde <__sflush_r+0x42>
 800afda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afdc:	1ad2      	subs	r2, r2, r3
 800afde:	2300      	movs	r3, #0
 800afe0:	4628      	mov	r0, r5
 800afe2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afe4:	6a21      	ldr	r1, [r4, #32]
 800afe6:	47b0      	blx	r6
 800afe8:	1c43      	adds	r3, r0, #1
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	d106      	bne.n	800affc <__sflush_r+0x60>
 800afee:	6829      	ldr	r1, [r5, #0]
 800aff0:	291d      	cmp	r1, #29
 800aff2:	d82b      	bhi.n	800b04c <__sflush_r+0xb0>
 800aff4:	4a28      	ldr	r2, [pc, #160]	@ (800b098 <__sflush_r+0xfc>)
 800aff6:	410a      	asrs	r2, r1
 800aff8:	07d6      	lsls	r6, r2, #31
 800affa:	d427      	bmi.n	800b04c <__sflush_r+0xb0>
 800affc:	2200      	movs	r2, #0
 800affe:	6062      	str	r2, [r4, #4]
 800b000:	6922      	ldr	r2, [r4, #16]
 800b002:	04d9      	lsls	r1, r3, #19
 800b004:	6022      	str	r2, [r4, #0]
 800b006:	d504      	bpl.n	800b012 <__sflush_r+0x76>
 800b008:	1c42      	adds	r2, r0, #1
 800b00a:	d101      	bne.n	800b010 <__sflush_r+0x74>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	b903      	cbnz	r3, 800b012 <__sflush_r+0x76>
 800b010:	6560      	str	r0, [r4, #84]	@ 0x54
 800b012:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b014:	602f      	str	r7, [r5, #0]
 800b016:	b1b9      	cbz	r1, 800b048 <__sflush_r+0xac>
 800b018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b01c:	4299      	cmp	r1, r3
 800b01e:	d002      	beq.n	800b026 <__sflush_r+0x8a>
 800b020:	4628      	mov	r0, r5
 800b022:	f7ff febd 	bl	800ada0 <_free_r>
 800b026:	2300      	movs	r3, #0
 800b028:	6363      	str	r3, [r4, #52]	@ 0x34
 800b02a:	e00d      	b.n	800b048 <__sflush_r+0xac>
 800b02c:	2301      	movs	r3, #1
 800b02e:	4628      	mov	r0, r5
 800b030:	47b0      	blx	r6
 800b032:	4602      	mov	r2, r0
 800b034:	1c50      	adds	r0, r2, #1
 800b036:	d1c9      	bne.n	800afcc <__sflush_r+0x30>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d0c6      	beq.n	800afcc <__sflush_r+0x30>
 800b03e:	2b1d      	cmp	r3, #29
 800b040:	d001      	beq.n	800b046 <__sflush_r+0xaa>
 800b042:	2b16      	cmp	r3, #22
 800b044:	d11d      	bne.n	800b082 <__sflush_r+0xe6>
 800b046:	602f      	str	r7, [r5, #0]
 800b048:	2000      	movs	r0, #0
 800b04a:	e021      	b.n	800b090 <__sflush_r+0xf4>
 800b04c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b050:	b21b      	sxth	r3, r3
 800b052:	e01a      	b.n	800b08a <__sflush_r+0xee>
 800b054:	690f      	ldr	r7, [r1, #16]
 800b056:	2f00      	cmp	r7, #0
 800b058:	d0f6      	beq.n	800b048 <__sflush_r+0xac>
 800b05a:	0793      	lsls	r3, r2, #30
 800b05c:	bf18      	it	ne
 800b05e:	2300      	movne	r3, #0
 800b060:	680e      	ldr	r6, [r1, #0]
 800b062:	bf08      	it	eq
 800b064:	694b      	ldreq	r3, [r1, #20]
 800b066:	1bf6      	subs	r6, r6, r7
 800b068:	600f      	str	r7, [r1, #0]
 800b06a:	608b      	str	r3, [r1, #8]
 800b06c:	2e00      	cmp	r6, #0
 800b06e:	ddeb      	ble.n	800b048 <__sflush_r+0xac>
 800b070:	4633      	mov	r3, r6
 800b072:	463a      	mov	r2, r7
 800b074:	4628      	mov	r0, r5
 800b076:	6a21      	ldr	r1, [r4, #32]
 800b078:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b07c:	47e0      	blx	ip
 800b07e:	2800      	cmp	r0, #0
 800b080:	dc07      	bgt.n	800b092 <__sflush_r+0xf6>
 800b082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b08a:	f04f 30ff 	mov.w	r0, #4294967295
 800b08e:	81a3      	strh	r3, [r4, #12]
 800b090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b092:	4407      	add	r7, r0
 800b094:	1a36      	subs	r6, r6, r0
 800b096:	e7e9      	b.n	800b06c <__sflush_r+0xd0>
 800b098:	dfbffffe 	.word	0xdfbffffe

0800b09c <_fflush_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	690b      	ldr	r3, [r1, #16]
 800b0a0:	4605      	mov	r5, r0
 800b0a2:	460c      	mov	r4, r1
 800b0a4:	b913      	cbnz	r3, 800b0ac <_fflush_r+0x10>
 800b0a6:	2500      	movs	r5, #0
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	bd38      	pop	{r3, r4, r5, pc}
 800b0ac:	b118      	cbz	r0, 800b0b6 <_fflush_r+0x1a>
 800b0ae:	6a03      	ldr	r3, [r0, #32]
 800b0b0:	b90b      	cbnz	r3, 800b0b6 <_fflush_r+0x1a>
 800b0b2:	f7ff fca1 	bl	800a9f8 <__sinit>
 800b0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d0f3      	beq.n	800b0a6 <_fflush_r+0xa>
 800b0be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0c0:	07d0      	lsls	r0, r2, #31
 800b0c2:	d404      	bmi.n	800b0ce <_fflush_r+0x32>
 800b0c4:	0599      	lsls	r1, r3, #22
 800b0c6:	d402      	bmi.n	800b0ce <_fflush_r+0x32>
 800b0c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ca:	f7ff fe3a 	bl	800ad42 <__retarget_lock_acquire_recursive>
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	f7ff ff63 	bl	800af9c <__sflush_r>
 800b0d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0d8:	4605      	mov	r5, r0
 800b0da:	07da      	lsls	r2, r3, #31
 800b0dc:	d4e4      	bmi.n	800b0a8 <_fflush_r+0xc>
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	059b      	lsls	r3, r3, #22
 800b0e2:	d4e1      	bmi.n	800b0a8 <_fflush_r+0xc>
 800b0e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0e6:	f7ff fe2d 	bl	800ad44 <__retarget_lock_release_recursive>
 800b0ea:	e7dd      	b.n	800b0a8 <_fflush_r+0xc>

0800b0ec <fiprintf>:
 800b0ec:	b40e      	push	{r1, r2, r3}
 800b0ee:	b503      	push	{r0, r1, lr}
 800b0f0:	4601      	mov	r1, r0
 800b0f2:	ab03      	add	r3, sp, #12
 800b0f4:	4805      	ldr	r0, [pc, #20]	@ (800b10c <fiprintf+0x20>)
 800b0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0fa:	6800      	ldr	r0, [r0, #0]
 800b0fc:	9301      	str	r3, [sp, #4]
 800b0fe:	f000 f845 	bl	800b18c <_vfiprintf_r>
 800b102:	b002      	add	sp, #8
 800b104:	f85d eb04 	ldr.w	lr, [sp], #4
 800b108:	b003      	add	sp, #12
 800b10a:	4770      	bx	lr
 800b10c:	20000190 	.word	0x20000190

0800b110 <_sbrk_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	2300      	movs	r3, #0
 800b114:	4d05      	ldr	r5, [pc, #20]	@ (800b12c <_sbrk_r+0x1c>)
 800b116:	4604      	mov	r4, r0
 800b118:	4608      	mov	r0, r1
 800b11a:	602b      	str	r3, [r5, #0]
 800b11c:	f7f5 fb40 	bl	80007a0 <_sbrk>
 800b120:	1c43      	adds	r3, r0, #1
 800b122:	d102      	bne.n	800b12a <_sbrk_r+0x1a>
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	b103      	cbz	r3, 800b12a <_sbrk_r+0x1a>
 800b128:	6023      	str	r3, [r4, #0]
 800b12a:	bd38      	pop	{r3, r4, r5, pc}
 800b12c:	20002f8c 	.word	0x20002f8c

0800b130 <abort>:
 800b130:	2006      	movs	r0, #6
 800b132:	b508      	push	{r3, lr}
 800b134:	f000 fb90 	bl	800b858 <raise>
 800b138:	2001      	movs	r0, #1
 800b13a:	f7f5 fabc 	bl	80006b6 <_exit>

0800b13e <__sfputc_r>:
 800b13e:	6893      	ldr	r3, [r2, #8]
 800b140:	b410      	push	{r4}
 800b142:	3b01      	subs	r3, #1
 800b144:	2b00      	cmp	r3, #0
 800b146:	6093      	str	r3, [r2, #8]
 800b148:	da07      	bge.n	800b15a <__sfputc_r+0x1c>
 800b14a:	6994      	ldr	r4, [r2, #24]
 800b14c:	42a3      	cmp	r3, r4
 800b14e:	db01      	blt.n	800b154 <__sfputc_r+0x16>
 800b150:	290a      	cmp	r1, #10
 800b152:	d102      	bne.n	800b15a <__sfputc_r+0x1c>
 800b154:	bc10      	pop	{r4}
 800b156:	f000 bac3 	b.w	800b6e0 <__swbuf_r>
 800b15a:	6813      	ldr	r3, [r2, #0]
 800b15c:	1c58      	adds	r0, r3, #1
 800b15e:	6010      	str	r0, [r2, #0]
 800b160:	7019      	strb	r1, [r3, #0]
 800b162:	4608      	mov	r0, r1
 800b164:	bc10      	pop	{r4}
 800b166:	4770      	bx	lr

0800b168 <__sfputs_r>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	4606      	mov	r6, r0
 800b16c:	460f      	mov	r7, r1
 800b16e:	4614      	mov	r4, r2
 800b170:	18d5      	adds	r5, r2, r3
 800b172:	42ac      	cmp	r4, r5
 800b174:	d101      	bne.n	800b17a <__sfputs_r+0x12>
 800b176:	2000      	movs	r0, #0
 800b178:	e007      	b.n	800b18a <__sfputs_r+0x22>
 800b17a:	463a      	mov	r2, r7
 800b17c:	4630      	mov	r0, r6
 800b17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b182:	f7ff ffdc 	bl	800b13e <__sfputc_r>
 800b186:	1c43      	adds	r3, r0, #1
 800b188:	d1f3      	bne.n	800b172 <__sfputs_r+0xa>
 800b18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b18c <_vfiprintf_r>:
 800b18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b190:	460d      	mov	r5, r1
 800b192:	4614      	mov	r4, r2
 800b194:	4698      	mov	r8, r3
 800b196:	4606      	mov	r6, r0
 800b198:	b09d      	sub	sp, #116	@ 0x74
 800b19a:	b118      	cbz	r0, 800b1a4 <_vfiprintf_r+0x18>
 800b19c:	6a03      	ldr	r3, [r0, #32]
 800b19e:	b90b      	cbnz	r3, 800b1a4 <_vfiprintf_r+0x18>
 800b1a0:	f7ff fc2a 	bl	800a9f8 <__sinit>
 800b1a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1a6:	07d9      	lsls	r1, r3, #31
 800b1a8:	d405      	bmi.n	800b1b6 <_vfiprintf_r+0x2a>
 800b1aa:	89ab      	ldrh	r3, [r5, #12]
 800b1ac:	059a      	lsls	r2, r3, #22
 800b1ae:	d402      	bmi.n	800b1b6 <_vfiprintf_r+0x2a>
 800b1b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1b2:	f7ff fdc6 	bl	800ad42 <__retarget_lock_acquire_recursive>
 800b1b6:	89ab      	ldrh	r3, [r5, #12]
 800b1b8:	071b      	lsls	r3, r3, #28
 800b1ba:	d501      	bpl.n	800b1c0 <_vfiprintf_r+0x34>
 800b1bc:	692b      	ldr	r3, [r5, #16]
 800b1be:	b99b      	cbnz	r3, 800b1e8 <_vfiprintf_r+0x5c>
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	f000 faca 	bl	800b75c <__swsetup_r>
 800b1c8:	b170      	cbz	r0, 800b1e8 <_vfiprintf_r+0x5c>
 800b1ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1cc:	07dc      	lsls	r4, r3, #31
 800b1ce:	d504      	bpl.n	800b1da <_vfiprintf_r+0x4e>
 800b1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d4:	b01d      	add	sp, #116	@ 0x74
 800b1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1da:	89ab      	ldrh	r3, [r5, #12]
 800b1dc:	0598      	lsls	r0, r3, #22
 800b1de:	d4f7      	bmi.n	800b1d0 <_vfiprintf_r+0x44>
 800b1e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1e2:	f7ff fdaf 	bl	800ad44 <__retarget_lock_release_recursive>
 800b1e6:	e7f3      	b.n	800b1d0 <_vfiprintf_r+0x44>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ec:	2320      	movs	r3, #32
 800b1ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1f2:	2330      	movs	r3, #48	@ 0x30
 800b1f4:	f04f 0901 	mov.w	r9, #1
 800b1f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1fc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b3a8 <_vfiprintf_r+0x21c>
 800b200:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b204:	4623      	mov	r3, r4
 800b206:	469a      	mov	sl, r3
 800b208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b20c:	b10a      	cbz	r2, 800b212 <_vfiprintf_r+0x86>
 800b20e:	2a25      	cmp	r2, #37	@ 0x25
 800b210:	d1f9      	bne.n	800b206 <_vfiprintf_r+0x7a>
 800b212:	ebba 0b04 	subs.w	fp, sl, r4
 800b216:	d00b      	beq.n	800b230 <_vfiprintf_r+0xa4>
 800b218:	465b      	mov	r3, fp
 800b21a:	4622      	mov	r2, r4
 800b21c:	4629      	mov	r1, r5
 800b21e:	4630      	mov	r0, r6
 800b220:	f7ff ffa2 	bl	800b168 <__sfputs_r>
 800b224:	3001      	adds	r0, #1
 800b226:	f000 80a7 	beq.w	800b378 <_vfiprintf_r+0x1ec>
 800b22a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b22c:	445a      	add	r2, fp
 800b22e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b230:	f89a 3000 	ldrb.w	r3, [sl]
 800b234:	2b00      	cmp	r3, #0
 800b236:	f000 809f 	beq.w	800b378 <_vfiprintf_r+0x1ec>
 800b23a:	2300      	movs	r3, #0
 800b23c:	f04f 32ff 	mov.w	r2, #4294967295
 800b240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b244:	f10a 0a01 	add.w	sl, sl, #1
 800b248:	9304      	str	r3, [sp, #16]
 800b24a:	9307      	str	r3, [sp, #28]
 800b24c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b250:	931a      	str	r3, [sp, #104]	@ 0x68
 800b252:	4654      	mov	r4, sl
 800b254:	2205      	movs	r2, #5
 800b256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25a:	4853      	ldr	r0, [pc, #332]	@ (800b3a8 <_vfiprintf_r+0x21c>)
 800b25c:	f000 fb18 	bl	800b890 <memchr>
 800b260:	9a04      	ldr	r2, [sp, #16]
 800b262:	b9d8      	cbnz	r0, 800b29c <_vfiprintf_r+0x110>
 800b264:	06d1      	lsls	r1, r2, #27
 800b266:	bf44      	itt	mi
 800b268:	2320      	movmi	r3, #32
 800b26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b26e:	0713      	lsls	r3, r2, #28
 800b270:	bf44      	itt	mi
 800b272:	232b      	movmi	r3, #43	@ 0x2b
 800b274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b278:	f89a 3000 	ldrb.w	r3, [sl]
 800b27c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b27e:	d015      	beq.n	800b2ac <_vfiprintf_r+0x120>
 800b280:	4654      	mov	r4, sl
 800b282:	2000      	movs	r0, #0
 800b284:	f04f 0c0a 	mov.w	ip, #10
 800b288:	9a07      	ldr	r2, [sp, #28]
 800b28a:	4621      	mov	r1, r4
 800b28c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b290:	3b30      	subs	r3, #48	@ 0x30
 800b292:	2b09      	cmp	r3, #9
 800b294:	d94b      	bls.n	800b32e <_vfiprintf_r+0x1a2>
 800b296:	b1b0      	cbz	r0, 800b2c6 <_vfiprintf_r+0x13a>
 800b298:	9207      	str	r2, [sp, #28]
 800b29a:	e014      	b.n	800b2c6 <_vfiprintf_r+0x13a>
 800b29c:	eba0 0308 	sub.w	r3, r0, r8
 800b2a0:	fa09 f303 	lsl.w	r3, r9, r3
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	46a2      	mov	sl, r4
 800b2a8:	9304      	str	r3, [sp, #16]
 800b2aa:	e7d2      	b.n	800b252 <_vfiprintf_r+0xc6>
 800b2ac:	9b03      	ldr	r3, [sp, #12]
 800b2ae:	1d19      	adds	r1, r3, #4
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	9103      	str	r1, [sp, #12]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	bfbb      	ittet	lt
 800b2b8:	425b      	neglt	r3, r3
 800b2ba:	f042 0202 	orrlt.w	r2, r2, #2
 800b2be:	9307      	strge	r3, [sp, #28]
 800b2c0:	9307      	strlt	r3, [sp, #28]
 800b2c2:	bfb8      	it	lt
 800b2c4:	9204      	strlt	r2, [sp, #16]
 800b2c6:	7823      	ldrb	r3, [r4, #0]
 800b2c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2ca:	d10a      	bne.n	800b2e2 <_vfiprintf_r+0x156>
 800b2cc:	7863      	ldrb	r3, [r4, #1]
 800b2ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2d0:	d132      	bne.n	800b338 <_vfiprintf_r+0x1ac>
 800b2d2:	9b03      	ldr	r3, [sp, #12]
 800b2d4:	3402      	adds	r4, #2
 800b2d6:	1d1a      	adds	r2, r3, #4
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	9203      	str	r2, [sp, #12]
 800b2dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2e0:	9305      	str	r3, [sp, #20]
 800b2e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b3ac <_vfiprintf_r+0x220>
 800b2e6:	2203      	movs	r2, #3
 800b2e8:	4650      	mov	r0, sl
 800b2ea:	7821      	ldrb	r1, [r4, #0]
 800b2ec:	f000 fad0 	bl	800b890 <memchr>
 800b2f0:	b138      	cbz	r0, 800b302 <_vfiprintf_r+0x176>
 800b2f2:	2240      	movs	r2, #64	@ 0x40
 800b2f4:	9b04      	ldr	r3, [sp, #16]
 800b2f6:	eba0 000a 	sub.w	r0, r0, sl
 800b2fa:	4082      	lsls	r2, r0
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	3401      	adds	r4, #1
 800b300:	9304      	str	r3, [sp, #16]
 800b302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b306:	2206      	movs	r2, #6
 800b308:	4829      	ldr	r0, [pc, #164]	@ (800b3b0 <_vfiprintf_r+0x224>)
 800b30a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b30e:	f000 fabf 	bl	800b890 <memchr>
 800b312:	2800      	cmp	r0, #0
 800b314:	d03f      	beq.n	800b396 <_vfiprintf_r+0x20a>
 800b316:	4b27      	ldr	r3, [pc, #156]	@ (800b3b4 <_vfiprintf_r+0x228>)
 800b318:	bb1b      	cbnz	r3, 800b362 <_vfiprintf_r+0x1d6>
 800b31a:	9b03      	ldr	r3, [sp, #12]
 800b31c:	3307      	adds	r3, #7
 800b31e:	f023 0307 	bic.w	r3, r3, #7
 800b322:	3308      	adds	r3, #8
 800b324:	9303      	str	r3, [sp, #12]
 800b326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b328:	443b      	add	r3, r7
 800b32a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b32c:	e76a      	b.n	800b204 <_vfiprintf_r+0x78>
 800b32e:	460c      	mov	r4, r1
 800b330:	2001      	movs	r0, #1
 800b332:	fb0c 3202 	mla	r2, ip, r2, r3
 800b336:	e7a8      	b.n	800b28a <_vfiprintf_r+0xfe>
 800b338:	2300      	movs	r3, #0
 800b33a:	f04f 0c0a 	mov.w	ip, #10
 800b33e:	4619      	mov	r1, r3
 800b340:	3401      	adds	r4, #1
 800b342:	9305      	str	r3, [sp, #20]
 800b344:	4620      	mov	r0, r4
 800b346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b34a:	3a30      	subs	r2, #48	@ 0x30
 800b34c:	2a09      	cmp	r2, #9
 800b34e:	d903      	bls.n	800b358 <_vfiprintf_r+0x1cc>
 800b350:	2b00      	cmp	r3, #0
 800b352:	d0c6      	beq.n	800b2e2 <_vfiprintf_r+0x156>
 800b354:	9105      	str	r1, [sp, #20]
 800b356:	e7c4      	b.n	800b2e2 <_vfiprintf_r+0x156>
 800b358:	4604      	mov	r4, r0
 800b35a:	2301      	movs	r3, #1
 800b35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b360:	e7f0      	b.n	800b344 <_vfiprintf_r+0x1b8>
 800b362:	ab03      	add	r3, sp, #12
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	462a      	mov	r2, r5
 800b368:	4630      	mov	r0, r6
 800b36a:	4b13      	ldr	r3, [pc, #76]	@ (800b3b8 <_vfiprintf_r+0x22c>)
 800b36c:	a904      	add	r1, sp, #16
 800b36e:	f3af 8000 	nop.w
 800b372:	4607      	mov	r7, r0
 800b374:	1c78      	adds	r0, r7, #1
 800b376:	d1d6      	bne.n	800b326 <_vfiprintf_r+0x19a>
 800b378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b37a:	07d9      	lsls	r1, r3, #31
 800b37c:	d405      	bmi.n	800b38a <_vfiprintf_r+0x1fe>
 800b37e:	89ab      	ldrh	r3, [r5, #12]
 800b380:	059a      	lsls	r2, r3, #22
 800b382:	d402      	bmi.n	800b38a <_vfiprintf_r+0x1fe>
 800b384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b386:	f7ff fcdd 	bl	800ad44 <__retarget_lock_release_recursive>
 800b38a:	89ab      	ldrh	r3, [r5, #12]
 800b38c:	065b      	lsls	r3, r3, #25
 800b38e:	f53f af1f 	bmi.w	800b1d0 <_vfiprintf_r+0x44>
 800b392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b394:	e71e      	b.n	800b1d4 <_vfiprintf_r+0x48>
 800b396:	ab03      	add	r3, sp, #12
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	462a      	mov	r2, r5
 800b39c:	4630      	mov	r0, r6
 800b39e:	4b06      	ldr	r3, [pc, #24]	@ (800b3b8 <_vfiprintf_r+0x22c>)
 800b3a0:	a904      	add	r1, sp, #16
 800b3a2:	f000 f87d 	bl	800b4a0 <_printf_i>
 800b3a6:	e7e4      	b.n	800b372 <_vfiprintf_r+0x1e6>
 800b3a8:	0800bb87 	.word	0x0800bb87
 800b3ac:	0800bb8d 	.word	0x0800bb8d
 800b3b0:	0800bb91 	.word	0x0800bb91
 800b3b4:	00000000 	.word	0x00000000
 800b3b8:	0800b169 	.word	0x0800b169

0800b3bc <_printf_common>:
 800b3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c0:	4616      	mov	r6, r2
 800b3c2:	4698      	mov	r8, r3
 800b3c4:	688a      	ldr	r2, [r1, #8]
 800b3c6:	690b      	ldr	r3, [r1, #16]
 800b3c8:	4607      	mov	r7, r0
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	bfb8      	it	lt
 800b3ce:	4613      	movlt	r3, r2
 800b3d0:	6033      	str	r3, [r6, #0]
 800b3d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3dc:	b10a      	cbz	r2, 800b3e2 <_printf_common+0x26>
 800b3de:	3301      	adds	r3, #1
 800b3e0:	6033      	str	r3, [r6, #0]
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	0699      	lsls	r1, r3, #26
 800b3e6:	bf42      	ittt	mi
 800b3e8:	6833      	ldrmi	r3, [r6, #0]
 800b3ea:	3302      	addmi	r3, #2
 800b3ec:	6033      	strmi	r3, [r6, #0]
 800b3ee:	6825      	ldr	r5, [r4, #0]
 800b3f0:	f015 0506 	ands.w	r5, r5, #6
 800b3f4:	d106      	bne.n	800b404 <_printf_common+0x48>
 800b3f6:	f104 0a19 	add.w	sl, r4, #25
 800b3fa:	68e3      	ldr	r3, [r4, #12]
 800b3fc:	6832      	ldr	r2, [r6, #0]
 800b3fe:	1a9b      	subs	r3, r3, r2
 800b400:	42ab      	cmp	r3, r5
 800b402:	dc2b      	bgt.n	800b45c <_printf_common+0xa0>
 800b404:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b408:	6822      	ldr	r2, [r4, #0]
 800b40a:	3b00      	subs	r3, #0
 800b40c:	bf18      	it	ne
 800b40e:	2301      	movne	r3, #1
 800b410:	0692      	lsls	r2, r2, #26
 800b412:	d430      	bmi.n	800b476 <_printf_common+0xba>
 800b414:	4641      	mov	r1, r8
 800b416:	4638      	mov	r0, r7
 800b418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b41c:	47c8      	blx	r9
 800b41e:	3001      	adds	r0, #1
 800b420:	d023      	beq.n	800b46a <_printf_common+0xae>
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	6922      	ldr	r2, [r4, #16]
 800b426:	f003 0306 	and.w	r3, r3, #6
 800b42a:	2b04      	cmp	r3, #4
 800b42c:	bf14      	ite	ne
 800b42e:	2500      	movne	r5, #0
 800b430:	6833      	ldreq	r3, [r6, #0]
 800b432:	f04f 0600 	mov.w	r6, #0
 800b436:	bf08      	it	eq
 800b438:	68e5      	ldreq	r5, [r4, #12]
 800b43a:	f104 041a 	add.w	r4, r4, #26
 800b43e:	bf08      	it	eq
 800b440:	1aed      	subeq	r5, r5, r3
 800b442:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b446:	bf08      	it	eq
 800b448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b44c:	4293      	cmp	r3, r2
 800b44e:	bfc4      	itt	gt
 800b450:	1a9b      	subgt	r3, r3, r2
 800b452:	18ed      	addgt	r5, r5, r3
 800b454:	42b5      	cmp	r5, r6
 800b456:	d11a      	bne.n	800b48e <_printf_common+0xd2>
 800b458:	2000      	movs	r0, #0
 800b45a:	e008      	b.n	800b46e <_printf_common+0xb2>
 800b45c:	2301      	movs	r3, #1
 800b45e:	4652      	mov	r2, sl
 800b460:	4641      	mov	r1, r8
 800b462:	4638      	mov	r0, r7
 800b464:	47c8      	blx	r9
 800b466:	3001      	adds	r0, #1
 800b468:	d103      	bne.n	800b472 <_printf_common+0xb6>
 800b46a:	f04f 30ff 	mov.w	r0, #4294967295
 800b46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b472:	3501      	adds	r5, #1
 800b474:	e7c1      	b.n	800b3fa <_printf_common+0x3e>
 800b476:	2030      	movs	r0, #48	@ 0x30
 800b478:	18e1      	adds	r1, r4, r3
 800b47a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b47e:	1c5a      	adds	r2, r3, #1
 800b480:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b484:	4422      	add	r2, r4
 800b486:	3302      	adds	r3, #2
 800b488:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b48c:	e7c2      	b.n	800b414 <_printf_common+0x58>
 800b48e:	2301      	movs	r3, #1
 800b490:	4622      	mov	r2, r4
 800b492:	4641      	mov	r1, r8
 800b494:	4638      	mov	r0, r7
 800b496:	47c8      	blx	r9
 800b498:	3001      	adds	r0, #1
 800b49a:	d0e6      	beq.n	800b46a <_printf_common+0xae>
 800b49c:	3601      	adds	r6, #1
 800b49e:	e7d9      	b.n	800b454 <_printf_common+0x98>

0800b4a0 <_printf_i>:
 800b4a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a4:	7e0f      	ldrb	r7, [r1, #24]
 800b4a6:	4691      	mov	r9, r2
 800b4a8:	2f78      	cmp	r7, #120	@ 0x78
 800b4aa:	4680      	mov	r8, r0
 800b4ac:	460c      	mov	r4, r1
 800b4ae:	469a      	mov	sl, r3
 800b4b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b4b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b4b6:	d807      	bhi.n	800b4c8 <_printf_i+0x28>
 800b4b8:	2f62      	cmp	r7, #98	@ 0x62
 800b4ba:	d80a      	bhi.n	800b4d2 <_printf_i+0x32>
 800b4bc:	2f00      	cmp	r7, #0
 800b4be:	f000 80d3 	beq.w	800b668 <_printf_i+0x1c8>
 800b4c2:	2f58      	cmp	r7, #88	@ 0x58
 800b4c4:	f000 80ba 	beq.w	800b63c <_printf_i+0x19c>
 800b4c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b4d0:	e03a      	b.n	800b548 <_printf_i+0xa8>
 800b4d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b4d6:	2b15      	cmp	r3, #21
 800b4d8:	d8f6      	bhi.n	800b4c8 <_printf_i+0x28>
 800b4da:	a101      	add	r1, pc, #4	@ (adr r1, 800b4e0 <_printf_i+0x40>)
 800b4dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4e0:	0800b539 	.word	0x0800b539
 800b4e4:	0800b54d 	.word	0x0800b54d
 800b4e8:	0800b4c9 	.word	0x0800b4c9
 800b4ec:	0800b4c9 	.word	0x0800b4c9
 800b4f0:	0800b4c9 	.word	0x0800b4c9
 800b4f4:	0800b4c9 	.word	0x0800b4c9
 800b4f8:	0800b54d 	.word	0x0800b54d
 800b4fc:	0800b4c9 	.word	0x0800b4c9
 800b500:	0800b4c9 	.word	0x0800b4c9
 800b504:	0800b4c9 	.word	0x0800b4c9
 800b508:	0800b4c9 	.word	0x0800b4c9
 800b50c:	0800b64f 	.word	0x0800b64f
 800b510:	0800b577 	.word	0x0800b577
 800b514:	0800b609 	.word	0x0800b609
 800b518:	0800b4c9 	.word	0x0800b4c9
 800b51c:	0800b4c9 	.word	0x0800b4c9
 800b520:	0800b671 	.word	0x0800b671
 800b524:	0800b4c9 	.word	0x0800b4c9
 800b528:	0800b577 	.word	0x0800b577
 800b52c:	0800b4c9 	.word	0x0800b4c9
 800b530:	0800b4c9 	.word	0x0800b4c9
 800b534:	0800b611 	.word	0x0800b611
 800b538:	6833      	ldr	r3, [r6, #0]
 800b53a:	1d1a      	adds	r2, r3, #4
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	6032      	str	r2, [r6, #0]
 800b540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b544:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b548:	2301      	movs	r3, #1
 800b54a:	e09e      	b.n	800b68a <_printf_i+0x1ea>
 800b54c:	6833      	ldr	r3, [r6, #0]
 800b54e:	6820      	ldr	r0, [r4, #0]
 800b550:	1d19      	adds	r1, r3, #4
 800b552:	6031      	str	r1, [r6, #0]
 800b554:	0606      	lsls	r6, r0, #24
 800b556:	d501      	bpl.n	800b55c <_printf_i+0xbc>
 800b558:	681d      	ldr	r5, [r3, #0]
 800b55a:	e003      	b.n	800b564 <_printf_i+0xc4>
 800b55c:	0645      	lsls	r5, r0, #25
 800b55e:	d5fb      	bpl.n	800b558 <_printf_i+0xb8>
 800b560:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b564:	2d00      	cmp	r5, #0
 800b566:	da03      	bge.n	800b570 <_printf_i+0xd0>
 800b568:	232d      	movs	r3, #45	@ 0x2d
 800b56a:	426d      	negs	r5, r5
 800b56c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b570:	230a      	movs	r3, #10
 800b572:	4859      	ldr	r0, [pc, #356]	@ (800b6d8 <_printf_i+0x238>)
 800b574:	e011      	b.n	800b59a <_printf_i+0xfa>
 800b576:	6821      	ldr	r1, [r4, #0]
 800b578:	6833      	ldr	r3, [r6, #0]
 800b57a:	0608      	lsls	r0, r1, #24
 800b57c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b580:	d402      	bmi.n	800b588 <_printf_i+0xe8>
 800b582:	0649      	lsls	r1, r1, #25
 800b584:	bf48      	it	mi
 800b586:	b2ad      	uxthmi	r5, r5
 800b588:	2f6f      	cmp	r7, #111	@ 0x6f
 800b58a:	6033      	str	r3, [r6, #0]
 800b58c:	bf14      	ite	ne
 800b58e:	230a      	movne	r3, #10
 800b590:	2308      	moveq	r3, #8
 800b592:	4851      	ldr	r0, [pc, #324]	@ (800b6d8 <_printf_i+0x238>)
 800b594:	2100      	movs	r1, #0
 800b596:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b59a:	6866      	ldr	r6, [r4, #4]
 800b59c:	2e00      	cmp	r6, #0
 800b59e:	bfa8      	it	ge
 800b5a0:	6821      	ldrge	r1, [r4, #0]
 800b5a2:	60a6      	str	r6, [r4, #8]
 800b5a4:	bfa4      	itt	ge
 800b5a6:	f021 0104 	bicge.w	r1, r1, #4
 800b5aa:	6021      	strge	r1, [r4, #0]
 800b5ac:	b90d      	cbnz	r5, 800b5b2 <_printf_i+0x112>
 800b5ae:	2e00      	cmp	r6, #0
 800b5b0:	d04b      	beq.n	800b64a <_printf_i+0x1aa>
 800b5b2:	4616      	mov	r6, r2
 800b5b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5b8:	fb03 5711 	mls	r7, r3, r1, r5
 800b5bc:	5dc7      	ldrb	r7, [r0, r7]
 800b5be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5c2:	462f      	mov	r7, r5
 800b5c4:	42bb      	cmp	r3, r7
 800b5c6:	460d      	mov	r5, r1
 800b5c8:	d9f4      	bls.n	800b5b4 <_printf_i+0x114>
 800b5ca:	2b08      	cmp	r3, #8
 800b5cc:	d10b      	bne.n	800b5e6 <_printf_i+0x146>
 800b5ce:	6823      	ldr	r3, [r4, #0]
 800b5d0:	07df      	lsls	r7, r3, #31
 800b5d2:	d508      	bpl.n	800b5e6 <_printf_i+0x146>
 800b5d4:	6923      	ldr	r3, [r4, #16]
 800b5d6:	6861      	ldr	r1, [r4, #4]
 800b5d8:	4299      	cmp	r1, r3
 800b5da:	bfde      	ittt	le
 800b5dc:	2330      	movle	r3, #48	@ 0x30
 800b5de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b5e6:	1b92      	subs	r2, r2, r6
 800b5e8:	6122      	str	r2, [r4, #16]
 800b5ea:	464b      	mov	r3, r9
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	4640      	mov	r0, r8
 800b5f0:	f8cd a000 	str.w	sl, [sp]
 800b5f4:	aa03      	add	r2, sp, #12
 800b5f6:	f7ff fee1 	bl	800b3bc <_printf_common>
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	d14a      	bne.n	800b694 <_printf_i+0x1f4>
 800b5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b602:	b004      	add	sp, #16
 800b604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	f043 0320 	orr.w	r3, r3, #32
 800b60e:	6023      	str	r3, [r4, #0]
 800b610:	2778      	movs	r7, #120	@ 0x78
 800b612:	4832      	ldr	r0, [pc, #200]	@ (800b6dc <_printf_i+0x23c>)
 800b614:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b618:	6823      	ldr	r3, [r4, #0]
 800b61a:	6831      	ldr	r1, [r6, #0]
 800b61c:	061f      	lsls	r7, r3, #24
 800b61e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b622:	d402      	bmi.n	800b62a <_printf_i+0x18a>
 800b624:	065f      	lsls	r7, r3, #25
 800b626:	bf48      	it	mi
 800b628:	b2ad      	uxthmi	r5, r5
 800b62a:	6031      	str	r1, [r6, #0]
 800b62c:	07d9      	lsls	r1, r3, #31
 800b62e:	bf44      	itt	mi
 800b630:	f043 0320 	orrmi.w	r3, r3, #32
 800b634:	6023      	strmi	r3, [r4, #0]
 800b636:	b11d      	cbz	r5, 800b640 <_printf_i+0x1a0>
 800b638:	2310      	movs	r3, #16
 800b63a:	e7ab      	b.n	800b594 <_printf_i+0xf4>
 800b63c:	4826      	ldr	r0, [pc, #152]	@ (800b6d8 <_printf_i+0x238>)
 800b63e:	e7e9      	b.n	800b614 <_printf_i+0x174>
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	f023 0320 	bic.w	r3, r3, #32
 800b646:	6023      	str	r3, [r4, #0]
 800b648:	e7f6      	b.n	800b638 <_printf_i+0x198>
 800b64a:	4616      	mov	r6, r2
 800b64c:	e7bd      	b.n	800b5ca <_printf_i+0x12a>
 800b64e:	6833      	ldr	r3, [r6, #0]
 800b650:	6825      	ldr	r5, [r4, #0]
 800b652:	1d18      	adds	r0, r3, #4
 800b654:	6961      	ldr	r1, [r4, #20]
 800b656:	6030      	str	r0, [r6, #0]
 800b658:	062e      	lsls	r6, r5, #24
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	d501      	bpl.n	800b662 <_printf_i+0x1c2>
 800b65e:	6019      	str	r1, [r3, #0]
 800b660:	e002      	b.n	800b668 <_printf_i+0x1c8>
 800b662:	0668      	lsls	r0, r5, #25
 800b664:	d5fb      	bpl.n	800b65e <_printf_i+0x1be>
 800b666:	8019      	strh	r1, [r3, #0]
 800b668:	2300      	movs	r3, #0
 800b66a:	4616      	mov	r6, r2
 800b66c:	6123      	str	r3, [r4, #16]
 800b66e:	e7bc      	b.n	800b5ea <_printf_i+0x14a>
 800b670:	6833      	ldr	r3, [r6, #0]
 800b672:	2100      	movs	r1, #0
 800b674:	1d1a      	adds	r2, r3, #4
 800b676:	6032      	str	r2, [r6, #0]
 800b678:	681e      	ldr	r6, [r3, #0]
 800b67a:	6862      	ldr	r2, [r4, #4]
 800b67c:	4630      	mov	r0, r6
 800b67e:	f000 f907 	bl	800b890 <memchr>
 800b682:	b108      	cbz	r0, 800b688 <_printf_i+0x1e8>
 800b684:	1b80      	subs	r0, r0, r6
 800b686:	6060      	str	r0, [r4, #4]
 800b688:	6863      	ldr	r3, [r4, #4]
 800b68a:	6123      	str	r3, [r4, #16]
 800b68c:	2300      	movs	r3, #0
 800b68e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b692:	e7aa      	b.n	800b5ea <_printf_i+0x14a>
 800b694:	4632      	mov	r2, r6
 800b696:	4649      	mov	r1, r9
 800b698:	4640      	mov	r0, r8
 800b69a:	6923      	ldr	r3, [r4, #16]
 800b69c:	47d0      	blx	sl
 800b69e:	3001      	adds	r0, #1
 800b6a0:	d0ad      	beq.n	800b5fe <_printf_i+0x15e>
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	079b      	lsls	r3, r3, #30
 800b6a6:	d413      	bmi.n	800b6d0 <_printf_i+0x230>
 800b6a8:	68e0      	ldr	r0, [r4, #12]
 800b6aa:	9b03      	ldr	r3, [sp, #12]
 800b6ac:	4298      	cmp	r0, r3
 800b6ae:	bfb8      	it	lt
 800b6b0:	4618      	movlt	r0, r3
 800b6b2:	e7a6      	b.n	800b602 <_printf_i+0x162>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	4632      	mov	r2, r6
 800b6b8:	4649      	mov	r1, r9
 800b6ba:	4640      	mov	r0, r8
 800b6bc:	47d0      	blx	sl
 800b6be:	3001      	adds	r0, #1
 800b6c0:	d09d      	beq.n	800b5fe <_printf_i+0x15e>
 800b6c2:	3501      	adds	r5, #1
 800b6c4:	68e3      	ldr	r3, [r4, #12]
 800b6c6:	9903      	ldr	r1, [sp, #12]
 800b6c8:	1a5b      	subs	r3, r3, r1
 800b6ca:	42ab      	cmp	r3, r5
 800b6cc:	dcf2      	bgt.n	800b6b4 <_printf_i+0x214>
 800b6ce:	e7eb      	b.n	800b6a8 <_printf_i+0x208>
 800b6d0:	2500      	movs	r5, #0
 800b6d2:	f104 0619 	add.w	r6, r4, #25
 800b6d6:	e7f5      	b.n	800b6c4 <_printf_i+0x224>
 800b6d8:	0800bb98 	.word	0x0800bb98
 800b6dc:	0800bba9 	.word	0x0800bba9

0800b6e0 <__swbuf_r>:
 800b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e2:	460e      	mov	r6, r1
 800b6e4:	4614      	mov	r4, r2
 800b6e6:	4605      	mov	r5, r0
 800b6e8:	b118      	cbz	r0, 800b6f2 <__swbuf_r+0x12>
 800b6ea:	6a03      	ldr	r3, [r0, #32]
 800b6ec:	b90b      	cbnz	r3, 800b6f2 <__swbuf_r+0x12>
 800b6ee:	f7ff f983 	bl	800a9f8 <__sinit>
 800b6f2:	69a3      	ldr	r3, [r4, #24]
 800b6f4:	60a3      	str	r3, [r4, #8]
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	071a      	lsls	r2, r3, #28
 800b6fa:	d501      	bpl.n	800b700 <__swbuf_r+0x20>
 800b6fc:	6923      	ldr	r3, [r4, #16]
 800b6fe:	b943      	cbnz	r3, 800b712 <__swbuf_r+0x32>
 800b700:	4621      	mov	r1, r4
 800b702:	4628      	mov	r0, r5
 800b704:	f000 f82a 	bl	800b75c <__swsetup_r>
 800b708:	b118      	cbz	r0, 800b712 <__swbuf_r+0x32>
 800b70a:	f04f 37ff 	mov.w	r7, #4294967295
 800b70e:	4638      	mov	r0, r7
 800b710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	6922      	ldr	r2, [r4, #16]
 800b716:	b2f6      	uxtb	r6, r6
 800b718:	1a98      	subs	r0, r3, r2
 800b71a:	6963      	ldr	r3, [r4, #20]
 800b71c:	4637      	mov	r7, r6
 800b71e:	4283      	cmp	r3, r0
 800b720:	dc05      	bgt.n	800b72e <__swbuf_r+0x4e>
 800b722:	4621      	mov	r1, r4
 800b724:	4628      	mov	r0, r5
 800b726:	f7ff fcb9 	bl	800b09c <_fflush_r>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d1ed      	bne.n	800b70a <__swbuf_r+0x2a>
 800b72e:	68a3      	ldr	r3, [r4, #8]
 800b730:	3b01      	subs	r3, #1
 800b732:	60a3      	str	r3, [r4, #8]
 800b734:	6823      	ldr	r3, [r4, #0]
 800b736:	1c5a      	adds	r2, r3, #1
 800b738:	6022      	str	r2, [r4, #0]
 800b73a:	701e      	strb	r6, [r3, #0]
 800b73c:	6962      	ldr	r2, [r4, #20]
 800b73e:	1c43      	adds	r3, r0, #1
 800b740:	429a      	cmp	r2, r3
 800b742:	d004      	beq.n	800b74e <__swbuf_r+0x6e>
 800b744:	89a3      	ldrh	r3, [r4, #12]
 800b746:	07db      	lsls	r3, r3, #31
 800b748:	d5e1      	bpl.n	800b70e <__swbuf_r+0x2e>
 800b74a:	2e0a      	cmp	r6, #10
 800b74c:	d1df      	bne.n	800b70e <__swbuf_r+0x2e>
 800b74e:	4621      	mov	r1, r4
 800b750:	4628      	mov	r0, r5
 800b752:	f7ff fca3 	bl	800b09c <_fflush_r>
 800b756:	2800      	cmp	r0, #0
 800b758:	d0d9      	beq.n	800b70e <__swbuf_r+0x2e>
 800b75a:	e7d6      	b.n	800b70a <__swbuf_r+0x2a>

0800b75c <__swsetup_r>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	4b29      	ldr	r3, [pc, #164]	@ (800b804 <__swsetup_r+0xa8>)
 800b760:	4605      	mov	r5, r0
 800b762:	6818      	ldr	r0, [r3, #0]
 800b764:	460c      	mov	r4, r1
 800b766:	b118      	cbz	r0, 800b770 <__swsetup_r+0x14>
 800b768:	6a03      	ldr	r3, [r0, #32]
 800b76a:	b90b      	cbnz	r3, 800b770 <__swsetup_r+0x14>
 800b76c:	f7ff f944 	bl	800a9f8 <__sinit>
 800b770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b774:	0719      	lsls	r1, r3, #28
 800b776:	d422      	bmi.n	800b7be <__swsetup_r+0x62>
 800b778:	06da      	lsls	r2, r3, #27
 800b77a:	d407      	bmi.n	800b78c <__swsetup_r+0x30>
 800b77c:	2209      	movs	r2, #9
 800b77e:	602a      	str	r2, [r5, #0]
 800b780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b784:	f04f 30ff 	mov.w	r0, #4294967295
 800b788:	81a3      	strh	r3, [r4, #12]
 800b78a:	e033      	b.n	800b7f4 <__swsetup_r+0x98>
 800b78c:	0758      	lsls	r0, r3, #29
 800b78e:	d512      	bpl.n	800b7b6 <__swsetup_r+0x5a>
 800b790:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b792:	b141      	cbz	r1, 800b7a6 <__swsetup_r+0x4a>
 800b794:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b798:	4299      	cmp	r1, r3
 800b79a:	d002      	beq.n	800b7a2 <__swsetup_r+0x46>
 800b79c:	4628      	mov	r0, r5
 800b79e:	f7ff faff 	bl	800ada0 <_free_r>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7a6:	89a3      	ldrh	r3, [r4, #12]
 800b7a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7ac:	81a3      	strh	r3, [r4, #12]
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	6063      	str	r3, [r4, #4]
 800b7b2:	6923      	ldr	r3, [r4, #16]
 800b7b4:	6023      	str	r3, [r4, #0]
 800b7b6:	89a3      	ldrh	r3, [r4, #12]
 800b7b8:	f043 0308 	orr.w	r3, r3, #8
 800b7bc:	81a3      	strh	r3, [r4, #12]
 800b7be:	6923      	ldr	r3, [r4, #16]
 800b7c0:	b94b      	cbnz	r3, 800b7d6 <__swsetup_r+0x7a>
 800b7c2:	89a3      	ldrh	r3, [r4, #12]
 800b7c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b7c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7cc:	d003      	beq.n	800b7d6 <__swsetup_r+0x7a>
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	f000 f890 	bl	800b8f6 <__smakebuf_r>
 800b7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7da:	f013 0201 	ands.w	r2, r3, #1
 800b7de:	d00a      	beq.n	800b7f6 <__swsetup_r+0x9a>
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	60a2      	str	r2, [r4, #8]
 800b7e4:	6962      	ldr	r2, [r4, #20]
 800b7e6:	4252      	negs	r2, r2
 800b7e8:	61a2      	str	r2, [r4, #24]
 800b7ea:	6922      	ldr	r2, [r4, #16]
 800b7ec:	b942      	cbnz	r2, 800b800 <__swsetup_r+0xa4>
 800b7ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7f2:	d1c5      	bne.n	800b780 <__swsetup_r+0x24>
 800b7f4:	bd38      	pop	{r3, r4, r5, pc}
 800b7f6:	0799      	lsls	r1, r3, #30
 800b7f8:	bf58      	it	pl
 800b7fa:	6962      	ldrpl	r2, [r4, #20]
 800b7fc:	60a2      	str	r2, [r4, #8]
 800b7fe:	e7f4      	b.n	800b7ea <__swsetup_r+0x8e>
 800b800:	2000      	movs	r0, #0
 800b802:	e7f7      	b.n	800b7f4 <__swsetup_r+0x98>
 800b804:	20000190 	.word	0x20000190

0800b808 <_raise_r>:
 800b808:	291f      	cmp	r1, #31
 800b80a:	b538      	push	{r3, r4, r5, lr}
 800b80c:	4605      	mov	r5, r0
 800b80e:	460c      	mov	r4, r1
 800b810:	d904      	bls.n	800b81c <_raise_r+0x14>
 800b812:	2316      	movs	r3, #22
 800b814:	6003      	str	r3, [r0, #0]
 800b816:	f04f 30ff 	mov.w	r0, #4294967295
 800b81a:	bd38      	pop	{r3, r4, r5, pc}
 800b81c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b81e:	b112      	cbz	r2, 800b826 <_raise_r+0x1e>
 800b820:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b824:	b94b      	cbnz	r3, 800b83a <_raise_r+0x32>
 800b826:	4628      	mov	r0, r5
 800b828:	f000 f830 	bl	800b88c <_getpid_r>
 800b82c:	4622      	mov	r2, r4
 800b82e:	4601      	mov	r1, r0
 800b830:	4628      	mov	r0, r5
 800b832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b836:	f000 b817 	b.w	800b868 <_kill_r>
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d00a      	beq.n	800b854 <_raise_r+0x4c>
 800b83e:	1c59      	adds	r1, r3, #1
 800b840:	d103      	bne.n	800b84a <_raise_r+0x42>
 800b842:	2316      	movs	r3, #22
 800b844:	6003      	str	r3, [r0, #0]
 800b846:	2001      	movs	r0, #1
 800b848:	e7e7      	b.n	800b81a <_raise_r+0x12>
 800b84a:	2100      	movs	r1, #0
 800b84c:	4620      	mov	r0, r4
 800b84e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b852:	4798      	blx	r3
 800b854:	2000      	movs	r0, #0
 800b856:	e7e0      	b.n	800b81a <_raise_r+0x12>

0800b858 <raise>:
 800b858:	4b02      	ldr	r3, [pc, #8]	@ (800b864 <raise+0xc>)
 800b85a:	4601      	mov	r1, r0
 800b85c:	6818      	ldr	r0, [r3, #0]
 800b85e:	f7ff bfd3 	b.w	800b808 <_raise_r>
 800b862:	bf00      	nop
 800b864:	20000190 	.word	0x20000190

0800b868 <_kill_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	2300      	movs	r3, #0
 800b86c:	4d06      	ldr	r5, [pc, #24]	@ (800b888 <_kill_r+0x20>)
 800b86e:	4604      	mov	r4, r0
 800b870:	4608      	mov	r0, r1
 800b872:	4611      	mov	r1, r2
 800b874:	602b      	str	r3, [r5, #0]
 800b876:	f7f4 ff0e 	bl	8000696 <_kill>
 800b87a:	1c43      	adds	r3, r0, #1
 800b87c:	d102      	bne.n	800b884 <_kill_r+0x1c>
 800b87e:	682b      	ldr	r3, [r5, #0]
 800b880:	b103      	cbz	r3, 800b884 <_kill_r+0x1c>
 800b882:	6023      	str	r3, [r4, #0]
 800b884:	bd38      	pop	{r3, r4, r5, pc}
 800b886:	bf00      	nop
 800b888:	20002f8c 	.word	0x20002f8c

0800b88c <_getpid_r>:
 800b88c:	f7f4 befc 	b.w	8000688 <_getpid>

0800b890 <memchr>:
 800b890:	4603      	mov	r3, r0
 800b892:	b510      	push	{r4, lr}
 800b894:	b2c9      	uxtb	r1, r1
 800b896:	4402      	add	r2, r0
 800b898:	4293      	cmp	r3, r2
 800b89a:	4618      	mov	r0, r3
 800b89c:	d101      	bne.n	800b8a2 <memchr+0x12>
 800b89e:	2000      	movs	r0, #0
 800b8a0:	e003      	b.n	800b8aa <memchr+0x1a>
 800b8a2:	7804      	ldrb	r4, [r0, #0]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	428c      	cmp	r4, r1
 800b8a8:	d1f6      	bne.n	800b898 <memchr+0x8>
 800b8aa:	bd10      	pop	{r4, pc}

0800b8ac <__swhatbuf_r>:
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	460c      	mov	r4, r1
 800b8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b4:	4615      	mov	r5, r2
 800b8b6:	2900      	cmp	r1, #0
 800b8b8:	461e      	mov	r6, r3
 800b8ba:	b096      	sub	sp, #88	@ 0x58
 800b8bc:	da0c      	bge.n	800b8d8 <__swhatbuf_r+0x2c>
 800b8be:	89a3      	ldrh	r3, [r4, #12]
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b8c6:	bf14      	ite	ne
 800b8c8:	2340      	movne	r3, #64	@ 0x40
 800b8ca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	6031      	str	r1, [r6, #0]
 800b8d2:	602b      	str	r3, [r5, #0]
 800b8d4:	b016      	add	sp, #88	@ 0x58
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}
 800b8d8:	466a      	mov	r2, sp
 800b8da:	f000 f849 	bl	800b970 <_fstat_r>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	dbed      	blt.n	800b8be <__swhatbuf_r+0x12>
 800b8e2:	9901      	ldr	r1, [sp, #4]
 800b8e4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b8e8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b8ec:	4259      	negs	r1, r3
 800b8ee:	4159      	adcs	r1, r3
 800b8f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8f4:	e7eb      	b.n	800b8ce <__swhatbuf_r+0x22>

0800b8f6 <__smakebuf_r>:
 800b8f6:	898b      	ldrh	r3, [r1, #12]
 800b8f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8fa:	079d      	lsls	r5, r3, #30
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	460c      	mov	r4, r1
 800b900:	d507      	bpl.n	800b912 <__smakebuf_r+0x1c>
 800b902:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b906:	6023      	str	r3, [r4, #0]
 800b908:	6123      	str	r3, [r4, #16]
 800b90a:	2301      	movs	r3, #1
 800b90c:	6163      	str	r3, [r4, #20]
 800b90e:	b003      	add	sp, #12
 800b910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b912:	466a      	mov	r2, sp
 800b914:	ab01      	add	r3, sp, #4
 800b916:	f7ff ffc9 	bl	800b8ac <__swhatbuf_r>
 800b91a:	9f00      	ldr	r7, [sp, #0]
 800b91c:	4605      	mov	r5, r0
 800b91e:	4639      	mov	r1, r7
 800b920:	4630      	mov	r0, r6
 800b922:	f7ff faaf 	bl	800ae84 <_malloc_r>
 800b926:	b948      	cbnz	r0, 800b93c <__smakebuf_r+0x46>
 800b928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b92c:	059a      	lsls	r2, r3, #22
 800b92e:	d4ee      	bmi.n	800b90e <__smakebuf_r+0x18>
 800b930:	f023 0303 	bic.w	r3, r3, #3
 800b934:	f043 0302 	orr.w	r3, r3, #2
 800b938:	81a3      	strh	r3, [r4, #12]
 800b93a:	e7e2      	b.n	800b902 <__smakebuf_r+0xc>
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b946:	81a3      	strh	r3, [r4, #12]
 800b948:	9b01      	ldr	r3, [sp, #4]
 800b94a:	6020      	str	r0, [r4, #0]
 800b94c:	b15b      	cbz	r3, 800b966 <__smakebuf_r+0x70>
 800b94e:	4630      	mov	r0, r6
 800b950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b954:	f000 f81e 	bl	800b994 <_isatty_r>
 800b958:	b128      	cbz	r0, 800b966 <__smakebuf_r+0x70>
 800b95a:	89a3      	ldrh	r3, [r4, #12]
 800b95c:	f023 0303 	bic.w	r3, r3, #3
 800b960:	f043 0301 	orr.w	r3, r3, #1
 800b964:	81a3      	strh	r3, [r4, #12]
 800b966:	89a3      	ldrh	r3, [r4, #12]
 800b968:	431d      	orrs	r5, r3
 800b96a:	81a5      	strh	r5, [r4, #12]
 800b96c:	e7cf      	b.n	800b90e <__smakebuf_r+0x18>
	...

0800b970 <_fstat_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	2300      	movs	r3, #0
 800b974:	4d06      	ldr	r5, [pc, #24]	@ (800b990 <_fstat_r+0x20>)
 800b976:	4604      	mov	r4, r0
 800b978:	4608      	mov	r0, r1
 800b97a:	4611      	mov	r1, r2
 800b97c:	602b      	str	r3, [r5, #0]
 800b97e:	f7f4 fee9 	bl	8000754 <_fstat>
 800b982:	1c43      	adds	r3, r0, #1
 800b984:	d102      	bne.n	800b98c <_fstat_r+0x1c>
 800b986:	682b      	ldr	r3, [r5, #0]
 800b988:	b103      	cbz	r3, 800b98c <_fstat_r+0x1c>
 800b98a:	6023      	str	r3, [r4, #0]
 800b98c:	bd38      	pop	{r3, r4, r5, pc}
 800b98e:	bf00      	nop
 800b990:	20002f8c 	.word	0x20002f8c

0800b994 <_isatty_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	2300      	movs	r3, #0
 800b998:	4d05      	ldr	r5, [pc, #20]	@ (800b9b0 <_isatty_r+0x1c>)
 800b99a:	4604      	mov	r4, r0
 800b99c:	4608      	mov	r0, r1
 800b99e:	602b      	str	r3, [r5, #0]
 800b9a0:	f7f4 fee7 	bl	8000772 <_isatty>
 800b9a4:	1c43      	adds	r3, r0, #1
 800b9a6:	d102      	bne.n	800b9ae <_isatty_r+0x1a>
 800b9a8:	682b      	ldr	r3, [r5, #0]
 800b9aa:	b103      	cbz	r3, 800b9ae <_isatty_r+0x1a>
 800b9ac:	6023      	str	r3, [r4, #0]
 800b9ae:	bd38      	pop	{r3, r4, r5, pc}
 800b9b0:	20002f8c 	.word	0x20002f8c

0800b9b4 <_init>:
 800b9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b6:	bf00      	nop
 800b9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ba:	bc08      	pop	{r3}
 800b9bc:	469e      	mov	lr, r3
 800b9be:	4770      	bx	lr

0800b9c0 <_fini>:
 800b9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c2:	bf00      	nop
 800b9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9c6:	bc08      	pop	{r3}
 800b9c8:	469e      	mov	lr, r3
 800b9ca:	4770      	bx	lr
